# Generated from C:\Users\pmora\Documents\Git\GitHub\LinguaFranca/LinguaFranca.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


class ModelContext(ParserRuleContext):
    __slots__ = 'parser'

    def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
        super().__init__(parent, invokingState)
        self.parser = parser

    def targetDecl(self):
        return self.getTypedRuleContext(LinguaFrancaParser.TargetDeclContext, 0)

    def importDecl(self, i: int = None):
        if i is None:
            return self.getTypedRuleContexts(LinguaFrancaParser.ImportDeclContext)
        else:
            return self.getTypedRuleContext(LinguaFrancaParser.ImportDeclContext, i)

    def preamble(self, i: int = None):
        if i is None:
            return self.getTypedRuleContexts(LinguaFrancaParser.PreambleContext)
        else:
            return self.getTypedRuleContext(LinguaFrancaParser.PreambleContext, i)

    def reactor(self, i: int = None):
        if i is None:
            return self.getTypedRuleContexts(LinguaFrancaParser.ReactorContext)
        else:
            return self.getTypedRuleContext(LinguaFrancaParser.ReactorContext, i)

    def getRuleIndex(self):
        return LinguaFrancaParser.RULE_model

    def enterRule(self, listener: ParseTreeListener):
        if hasattr(listener, "enterModel"):
            listener.enterModel(self)

    def exitRule(self, listener: ParseTreeListener):
        if hasattr(listener, "exitModel"):
            listener.exitModel(self)


def serializedATN():
    return [
        4,1,86,896,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,1,0,1,0,5,0,123,8,0,10,0,12,0,126,9,0,1,0,5,0,129,8,0,10,0,
        12,0,132,9,0,1,0,4,0,135,8,0,11,0,12,0,136,1,1,1,1,1,1,3,1,142,8,
        1,1,1,3,1,145,8,1,1,2,1,2,4,2,149,8,2,11,2,12,2,150,1,2,1,2,4,2,
        155,8,2,11,2,12,2,156,5,2,159,8,2,10,2,12,2,162,9,2,1,2,1,2,1,2,
        3,2,167,8,2,1,3,1,3,3,3,171,8,3,1,4,1,4,1,4,3,4,176,8,4,1,5,5,5,
        179,8,5,10,5,12,5,182,9,5,1,5,3,5,185,8,5,1,5,3,5,188,8,5,1,5,1,
        5,3,5,192,8,5,1,5,1,5,1,5,1,5,5,5,198,8,5,10,5,12,5,201,9,5,1,5,
        1,5,3,5,205,8,5,1,5,3,5,208,8,5,1,5,1,5,3,5,212,8,5,1,5,1,5,1,5,
        1,5,5,5,218,8,5,10,5,12,5,221,9,5,3,5,223,8,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,237,8,5,10,5,12,5,240,9,5,1,5,
        1,5,1,6,1,6,3,6,246,8,6,1,7,4,7,249,8,7,11,7,12,7,250,1,8,5,8,254,
        8,8,10,8,12,8,257,9,8,1,8,3,8,260,8,8,1,8,1,8,1,8,1,8,3,8,266,8,
        8,1,8,3,8,269,8,8,1,8,3,8,272,8,8,1,8,3,8,275,8,8,1,9,3,9,278,8,
        9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,286,8,9,10,9,12,9,289,9,9,3,9,291,
        8,9,1,9,1,9,1,9,3,9,296,8,9,1,9,1,9,3,9,300,8,9,1,10,1,10,1,10,3,
        10,305,8,10,1,11,5,11,308,8,11,10,11,12,11,311,9,11,1,11,3,11,314,
        8,11,1,11,1,11,3,11,318,8,11,1,11,1,11,1,11,3,11,323,8,11,1,11,3,
        11,326,8,11,1,12,5,12,329,8,12,10,12,12,12,332,9,12,1,12,1,12,3,
        12,336,8,12,1,12,1,12,1,12,3,12,341,8,12,1,12,3,12,344,8,12,1,13,
        5,13,347,8,13,10,13,12,13,350,9,13,1,13,1,13,1,13,1,13,1,13,1,13,
        3,13,358,8,13,1,13,1,13,3,13,362,8,13,1,13,3,13,365,8,13,1,14,3,
        14,368,8,14,1,14,1,14,3,14,372,8,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,5,14,381,8,14,10,14,12,14,384,9,14,1,14,1,14,1,15,5,15,389,
        8,15,10,15,12,15,392,9,15,1,15,3,15,395,8,15,1,15,1,15,1,15,3,15,
        400,8,15,1,15,1,15,3,15,404,8,15,1,15,3,15,407,8,15,1,16,5,16,410,
        8,16,10,16,12,16,413,9,16,1,16,1,16,1,16,1,16,1,16,5,16,420,8,16,
        10,16,12,16,423,9,16,3,16,425,8,16,1,16,3,16,428,8,16,1,16,1,16,
        1,16,5,16,433,8,16,10,16,12,16,436,9,16,3,16,438,8,16,1,16,1,16,
        1,16,1,16,5,16,444,8,16,10,16,12,16,447,9,16,3,16,449,8,16,1,16,
        1,16,3,16,453,8,16,1,16,3,16,456,8,16,1,17,1,17,3,17,460,8,17,1,
        18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,
        20,1,21,3,21,477,8,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,3,22,486,
        8,22,1,22,1,22,1,22,1,22,1,22,5,22,493,8,22,10,22,12,22,496,9,22,
        1,22,1,22,3,22,500,8,22,1,22,1,22,1,22,1,22,5,22,506,8,22,10,22,
        12,22,509,9,22,3,22,511,8,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,
        519,8,22,1,23,1,23,1,23,5,23,524,8,23,10,23,12,23,527,9,23,1,23,
        1,23,1,23,1,23,5,23,533,8,23,10,23,12,23,536,9,23,1,23,1,23,3,23,
        540,8,23,3,23,542,8,23,1,23,1,23,1,23,1,23,5,23,548,8,23,10,23,12,
        23,551,9,23,1,23,1,23,3,23,555,8,23,1,23,3,23,558,8,23,1,23,3,23,
        561,8,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,5,25,572,8,
        25,10,25,12,25,575,9,25,1,25,3,25,578,8,25,3,25,580,8,25,1,25,3,
        25,583,8,25,1,26,1,26,3,26,587,8,26,1,26,1,26,1,27,1,27,1,28,1,28,
        1,28,1,28,5,28,597,8,28,10,28,12,28,600,9,28,3,28,602,8,28,1,28,
        1,28,1,29,1,29,1,29,1,29,3,29,610,8,29,1,30,1,30,1,30,1,30,5,30,
        616,8,30,10,30,12,30,619,9,30,1,30,3,30,622,8,30,1,30,1,30,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,634,8,31,1,32,1,32,3,32,
        638,8,32,1,33,1,33,1,33,3,33,643,8,33,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,659,8,34,1,34,1,
        34,3,34,663,8,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,671,8,35,1,36,
        1,36,1,36,1,36,3,36,677,8,36,1,36,1,36,3,36,681,8,36,3,36,683,8,
        36,1,37,5,37,686,8,37,10,37,12,37,689,9,37,1,37,1,37,1,37,3,37,694,
        8,37,1,37,1,37,3,37,698,8,37,1,38,1,38,1,38,1,38,5,38,704,8,38,10,
        38,12,38,707,9,38,3,38,709,8,38,1,38,1,38,1,39,1,39,1,39,1,39,5,
        39,717,8,39,10,39,12,39,720,9,39,3,39,722,8,39,1,39,1,39,1,40,1,
        40,1,40,1,40,5,40,730,8,40,10,40,12,40,733,9,40,1,40,1,40,1,41,1,
        41,1,41,1,41,5,41,741,8,41,10,41,12,41,744,9,41,3,41,746,8,41,1,
        41,1,41,1,42,1,42,1,42,3,42,753,8,42,1,43,1,43,3,43,757,8,43,1,43,
        1,43,3,43,761,8,43,1,44,1,44,1,44,1,44,5,44,767,8,44,10,44,12,44,
        770,9,44,1,44,1,44,1,45,1,45,3,45,776,8,45,1,46,1,46,3,46,780,8,
        46,1,46,1,46,1,46,1,46,1,46,5,46,787,8,46,10,46,12,46,790,9,46,1,
        46,1,46,3,46,794,8,46,1,46,5,46,797,8,46,10,46,12,46,800,9,46,1,
        46,3,46,803,8,46,1,46,3,46,806,8,46,1,47,1,47,1,47,1,47,3,47,812,
        8,47,1,48,1,48,1,48,1,48,1,48,5,48,819,8,48,10,48,12,48,822,9,48,
        1,48,1,48,3,48,826,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,
        835,8,49,1,50,1,50,3,50,839,8,50,1,50,1,50,1,50,3,50,844,8,50,1,
        51,1,51,1,51,3,51,849,8,51,1,51,1,51,1,51,1,51,3,51,855,8,51,1,52,
        1,52,3,52,859,8,52,1,52,1,52,1,52,3,52,864,8,52,1,53,1,53,1,53,3,
        53,869,8,53,1,54,1,54,1,54,5,54,874,8,54,10,54,12,54,877,9,54,1,
        55,1,55,5,55,881,8,55,10,55,12,55,884,9,55,1,55,1,55,1,56,1,56,1,
        57,1,57,1,58,1,58,1,59,1,59,1,59,0,0,60,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,0,11,1,0,6,7,1,0,30,31,2,0,32,32,39,
        39,4,0,58,58,64,65,70,70,79,79,2,0,57,57,82,82,2,0,64,65,79,79,1,
        0,85,85,1,0,50,51,1,0,52,53,2,0,16,16,54,55,2,0,16,16,56,56,1004,
        0,120,1,0,0,0,2,138,1,0,0,0,4,146,1,0,0,0,6,170,1,0,0,0,8,172,1,
        0,0,0,10,180,1,0,0,0,12,245,1,0,0,0,14,248,1,0,0,0,16,255,1,0,0,
        0,18,277,1,0,0,0,20,301,1,0,0,0,22,309,1,0,0,0,24,330,1,0,0,0,26,
        348,1,0,0,0,28,367,1,0,0,0,30,390,1,0,0,0,32,411,1,0,0,0,34,459,
        1,0,0,0,36,461,1,0,0,0,38,463,1,0,0,0,40,469,1,0,0,0,42,476,1,0,
        0,0,44,481,1,0,0,0,46,541,1,0,0,0,48,562,1,0,0,0,50,565,1,0,0,0,
        52,586,1,0,0,0,54,590,1,0,0,0,56,592,1,0,0,0,58,605,1,0,0,0,60,611,
        1,0,0,0,62,633,1,0,0,0,64,637,1,0,0,0,66,642,1,0,0,0,68,662,1,0,
        0,0,70,670,1,0,0,0,72,672,1,0,0,0,74,687,1,0,0,0,76,699,1,0,0,0,
        78,712,1,0,0,0,80,725,1,0,0,0,82,736,1,0,0,0,84,752,1,0,0,0,86,760,
        1,0,0,0,88,762,1,0,0,0,90,775,1,0,0,0,92,805,1,0,0,0,94,811,1,0,
        0,0,96,825,1,0,0,0,98,834,1,0,0,0,100,838,1,0,0,0,102,845,1,0,0,
        0,104,858,1,0,0,0,106,868,1,0,0,0,108,870,1,0,0,0,110,878,1,0,0,
        0,112,887,1,0,0,0,114,889,1,0,0,0,116,891,1,0,0,0,118,893,1,0,0,
        0,120,124,3,2,1,0,121,123,3,4,2,0,122,121,1,0,0,0,123,126,1,0,0,
        0,124,122,1,0,0,0,124,125,1,0,0,0,125,130,1,0,0,0,126,124,1,0,0,
        0,127,129,3,42,21,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,1,0,
        0,0,130,131,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,133,135,3,10,
        5,0,134,133,1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,
        0,0,137,1,1,0,0,0,138,139,5,1,0,0,139,141,5,63,0,0,140,142,3,56,
        28,0,141,140,1,0,0,0,141,142,1,0,0,0,142,144,1,0,0,0,143,145,5,2,
        0,0,144,143,1,0,0,0,144,145,1,0,0,0,145,3,1,0,0,0,146,148,5,3,0,
        0,147,149,3,8,4,0,148,147,1,0,0,0,149,150,1,0,0,0,150,148,1,0,0,
        0,150,151,1,0,0,0,151,160,1,0,0,0,152,154,5,57,0,0,153,155,3,8,4,
        0,154,153,1,0,0,0,155,156,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,
        0,157,159,1,0,0,0,158,152,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,
        0,160,161,1,0,0,0,161,163,1,0,0,0,162,160,1,0,0,0,163,164,5,4,0,
        0,164,166,5,70,0,0,165,167,5,2,0,0,166,165,1,0,0,0,166,167,1,0,0,
        0,167,5,1,0,0,0,168,171,3,10,5,0,169,171,3,8,4,0,170,168,1,0,0,0,
        170,169,1,0,0,0,171,7,1,0,0,0,172,175,5,63,0,0,173,174,5,5,0,0,174,
        176,5,63,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,9,1,0,0,0,177,179,
        3,50,25,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,
        1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,183,185,7,0,0,0,184,183,
        1,0,0,0,184,185,1,0,0,0,185,187,1,0,0,0,186,188,5,8,0,0,187,186,
        1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,191,5,9,0,0,190,192,
        5,63,0,0,191,190,1,0,0,0,191,192,1,0,0,0,192,204,1,0,0,0,193,194,
        5,10,0,0,194,199,3,12,6,0,195,196,5,57,0,0,196,198,3,12,6,0,197,
        195,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,
        202,1,0,0,0,201,199,1,0,0,0,202,203,5,11,0,0,203,205,1,0,0,0,204,
        193,1,0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,208,3,80,40,0,207,
        206,1,0,0,0,207,208,1,0,0,0,208,211,1,0,0,0,209,210,5,12,0,0,210,
        212,3,106,53,0,211,209,1,0,0,0,211,212,1,0,0,0,212,222,1,0,0,0,213,
        214,5,13,0,0,214,219,3,6,3,0,215,216,5,57,0,0,216,218,3,6,3,0,217,
        215,1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,
        223,1,0,0,0,221,219,1,0,0,0,222,213,1,0,0,0,222,223,1,0,0,0,223,
        224,1,0,0,0,224,238,5,14,0,0,225,237,3,42,21,0,226,237,3,16,8,0,
        227,237,3,18,9,0,228,237,3,22,11,0,229,237,3,24,12,0,230,237,3,26,
        13,0,231,237,3,30,15,0,232,237,3,44,22,0,233,237,3,46,23,0,234,237,
        3,32,16,0,235,237,3,28,14,0,236,225,1,0,0,0,236,226,1,0,0,0,236,
        227,1,0,0,0,236,228,1,0,0,0,236,229,1,0,0,0,236,230,1,0,0,0,236,
        231,1,0,0,0,236,232,1,0,0,0,236,233,1,0,0,0,236,234,1,0,0,0,236,
        235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,
        241,1,0,0,0,240,238,1,0,0,0,241,242,5,15,0,0,242,11,1,0,0,0,243,
        246,3,14,7,0,244,246,3,110,55,0,245,243,1,0,0,0,245,244,1,0,0,0,
        246,13,1,0,0,0,247,249,5,63,0,0,248,247,1,0,0,0,249,250,1,0,0,0,
        250,248,1,0,0,0,250,251,1,0,0,0,251,15,1,0,0,0,252,254,3,50,25,0,
        253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,
        256,259,1,0,0,0,257,255,1,0,0,0,258,260,5,16,0,0,259,258,1,0,0,0,
        259,260,1,0,0,0,260,261,1,0,0,0,261,262,5,17,0,0,262,265,5,63,0,
        0,263,264,5,18,0,0,264,266,3,92,46,0,265,263,1,0,0,0,265,266,1,0,
        0,0,266,268,1,0,0,0,267,269,3,76,38,0,268,267,1,0,0,0,268,269,1,
        0,0,0,269,271,1,0,0,0,270,272,3,78,39,0,271,270,1,0,0,0,271,272,
        1,0,0,0,272,274,1,0,0,0,273,275,5,2,0,0,274,273,1,0,0,0,274,275,
        1,0,0,0,275,17,1,0,0,0,276,278,5,19,0,0,277,276,1,0,0,0,277,278,
        1,0,0,0,278,279,1,0,0,0,279,280,5,20,0,0,280,281,5,63,0,0,281,290,
        5,21,0,0,282,287,3,20,10,0,283,284,5,57,0,0,284,286,3,20,10,0,285,
        283,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,
        291,1,0,0,0,289,287,1,0,0,0,290,282,1,0,0,0,290,291,1,0,0,0,291,
        292,1,0,0,0,292,295,5,22,0,0,293,294,5,18,0,0,294,296,3,92,46,0,
        295,293,1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,299,3,110,55,
        0,298,300,5,2,0,0,299,298,1,0,0,0,299,300,1,0,0,0,300,19,1,0,0,0,
        301,304,5,63,0,0,302,303,5,18,0,0,303,305,3,92,46,0,304,302,1,0,
        0,0,304,305,1,0,0,0,305,21,1,0,0,0,306,308,3,50,25,0,307,306,1,0,
        0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,313,1,0,
        0,0,311,309,1,0,0,0,312,314,5,23,0,0,313,312,1,0,0,0,313,314,1,0,
        0,0,314,315,1,0,0,0,315,317,5,24,0,0,316,318,3,96,48,0,317,316,1,
        0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,322,5,63,0,0,320,321,5,
        18,0,0,321,323,3,92,46,0,322,320,1,0,0,0,322,323,1,0,0,0,323,325,
        1,0,0,0,324,326,5,2,0,0,325,324,1,0,0,0,325,326,1,0,0,0,326,23,1,
        0,0,0,327,329,3,50,25,0,328,327,1,0,0,0,329,332,1,0,0,0,330,328,
        1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,330,1,0,0,0,333,335,
        5,25,0,0,334,336,3,96,48,0,335,334,1,0,0,0,335,336,1,0,0,0,336,337,
        1,0,0,0,337,340,5,63,0,0,338,339,5,18,0,0,339,341,3,92,46,0,340,
        338,1,0,0,0,340,341,1,0,0,0,341,343,1,0,0,0,342,344,5,2,0,0,343,
        342,1,0,0,0,343,344,1,0,0,0,344,25,1,0,0,0,345,347,3,50,25,0,346,
        345,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,
        351,1,0,0,0,350,348,1,0,0,0,351,352,5,26,0,0,352,361,5,63,0,0,353,
        354,5,21,0,0,354,357,3,84,42,0,355,356,5,57,0,0,356,358,3,84,42,
        0,357,355,1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,5,22,0,
        0,360,362,1,0,0,0,361,353,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,
        0,363,365,5,2,0,0,364,363,1,0,0,0,364,365,1,0,0,0,365,27,1,0,0,0,
        366,368,5,27,0,0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,
        369,371,5,28,0,0,370,372,5,63,0,0,371,370,1,0,0,0,371,372,1,0,0,
        0,372,373,1,0,0,0,373,382,5,14,0,0,374,381,3,16,8,0,375,381,3,26,
        13,0,376,381,3,30,15,0,377,381,3,44,22,0,378,381,3,46,23,0,379,381,
        3,32,16,0,380,374,1,0,0,0,380,375,1,0,0,0,380,376,1,0,0,0,380,377,
        1,0,0,0,380,378,1,0,0,0,380,379,1,0,0,0,381,384,1,0,0,0,382,380,
        1,0,0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,382,1,0,0,0,385,386,
        5,15,0,0,386,29,1,0,0,0,387,389,3,50,25,0,388,387,1,0,0,0,389,392,
        1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,394,1,0,0,0,392,390,
        1,0,0,0,393,395,3,112,56,0,394,393,1,0,0,0,394,395,1,0,0,0,395,396,
        1,0,0,0,396,397,5,29,0,0,397,399,5,63,0,0,398,400,3,76,38,0,399,
        398,1,0,0,0,399,400,1,0,0,0,400,403,1,0,0,0,401,402,5,18,0,0,402,
        404,3,92,46,0,403,401,1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,
        407,5,2,0,0,406,405,1,0,0,0,406,407,1,0,0,0,407,31,1,0,0,0,408,410,
        3,50,25,0,409,408,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,
        1,0,0,0,412,414,1,0,0,0,413,411,1,0,0,0,414,427,7,1,0,0,415,424,
        5,21,0,0,416,421,3,34,17,0,417,418,5,57,0,0,418,420,3,34,17,0,419,
        417,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,
        425,1,0,0,0,423,421,1,0,0,0,424,416,1,0,0,0,424,425,1,0,0,0,425,
        426,1,0,0,0,426,428,5,22,0,0,427,415,1,0,0,0,427,428,1,0,0,0,428,
        437,1,0,0,0,429,434,3,68,34,0,430,431,5,57,0,0,431,433,3,68,34,0,
        432,430,1,0,0,0,433,436,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,
        435,438,1,0,0,0,436,434,1,0,0,0,437,429,1,0,0,0,437,438,1,0,0,0,
        438,448,1,0,0,0,439,440,5,32,0,0,440,445,3,70,35,0,441,442,5,57,
        0,0,442,444,3,70,35,0,443,441,1,0,0,0,444,447,1,0,0,0,445,443,1,
        0,0,0,445,446,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,448,439,1,
        0,0,0,448,449,1,0,0,0,449,450,1,0,0,0,450,452,3,110,55,0,451,453,
        3,40,20,0,452,451,1,0,0,0,452,453,1,0,0,0,453,455,1,0,0,0,454,456,
        3,38,19,0,455,454,1,0,0,0,455,456,1,0,0,0,456,33,1,0,0,0,457,460,
        3,36,18,0,458,460,3,68,34,0,459,457,1,0,0,0,459,458,1,0,0,0,460,
        35,1,0,0,0,461,462,3,116,58,0,462,37,1,0,0,0,463,464,5,33,0,0,464,
        465,5,21,0,0,465,466,3,84,42,0,466,467,5,22,0,0,467,468,3,110,55,
        0,468,39,1,0,0,0,469,470,5,34,0,0,470,471,5,21,0,0,471,472,3,84,
        42,0,472,473,5,22,0,0,473,474,3,110,55,0,474,41,1,0,0,0,475,477,
        3,114,57,0,476,475,1,0,0,0,476,477,1,0,0,0,477,478,1,0,0,0,478,479,
        5,35,0,0,479,480,3,110,55,0,480,43,1,0,0,0,481,482,5,63,0,0,482,
        483,5,36,0,0,483,485,5,37,0,0,484,486,3,96,48,0,485,484,1,0,0,0,
        485,486,1,0,0,0,486,487,1,0,0,0,487,499,5,63,0,0,488,489,5,10,0,
        0,489,494,3,12,6,0,490,491,5,57,0,0,491,493,3,12,6,0,492,490,1,0,
        0,0,493,496,1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,497,1,0,
        0,0,496,494,1,0,0,0,497,498,5,11,0,0,498,500,1,0,0,0,499,488,1,0,
        0,0,499,500,1,0,0,0,500,501,1,0,0,0,501,510,5,21,0,0,502,507,3,72,
        36,0,503,504,5,57,0,0,504,506,3,72,36,0,505,503,1,0,0,0,506,509,
        1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,511,1,0,0,0,509,507,
        1,0,0,0,510,502,1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,0,512,518,
        5,22,0,0,513,514,5,12,0,0,514,515,3,106,53,0,515,516,5,2,0,0,516,
        519,1,0,0,0,517,519,5,2,0,0,518,513,1,0,0,0,518,517,1,0,0,0,518,
        519,1,0,0,0,519,45,1,0,0,0,520,525,3,68,34,0,521,522,5,57,0,0,522,
        524,3,68,34,0,523,521,1,0,0,0,524,527,1,0,0,0,525,523,1,0,0,0,525,
        526,1,0,0,0,526,542,1,0,0,0,527,525,1,0,0,0,528,529,5,21,0,0,529,
        534,3,68,34,0,530,531,5,57,0,0,531,533,3,68,34,0,532,530,1,0,0,0,
        533,536,1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,537,1,0,0,0,
        536,534,1,0,0,0,537,539,5,22,0,0,538,540,5,38,0,0,539,538,1,0,0,
        0,539,540,1,0,0,0,540,542,1,0,0,0,541,520,1,0,0,0,541,528,1,0,0,
        0,542,543,1,0,0,0,543,544,7,2,0,0,544,549,3,68,34,0,545,546,5,57,
        0,0,546,548,3,68,34,0,547,545,1,0,0,0,548,551,1,0,0,0,549,547,1,
        0,0,0,549,550,1,0,0,0,550,554,1,0,0,0,551,549,1,0,0,0,552,553,5,
        40,0,0,553,555,3,84,42,0,554,552,1,0,0,0,554,555,1,0,0,0,555,557,
        1,0,0,0,556,558,3,48,24,0,557,556,1,0,0,0,557,558,1,0,0,0,558,560,
        1,0,0,0,559,561,5,2,0,0,560,559,1,0,0,0,560,561,1,0,0,0,561,47,1,
        0,0,0,562,563,5,41,0,0,563,564,5,70,0,0,564,49,1,0,0,0,565,566,5,
        42,0,0,566,582,5,63,0,0,567,579,5,21,0,0,568,573,3,52,26,0,569,570,
        5,57,0,0,570,572,3,52,26,0,571,569,1,0,0,0,572,575,1,0,0,0,573,571,
        1,0,0,0,573,574,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,576,578,
        5,57,0,0,577,576,1,0,0,0,577,578,1,0,0,0,578,580,1,0,0,0,579,568,
        1,0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,583,5,22,0,0,582,567,
        1,0,0,0,582,583,1,0,0,0,583,51,1,0,0,0,584,585,5,63,0,0,585,587,
        5,36,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,588,1,0,0,0,588,589,
        3,54,27,0,589,53,1,0,0,0,590,591,7,3,0,0,591,55,1,0,0,0,592,601,
        5,14,0,0,593,598,3,58,29,0,594,595,7,4,0,0,595,597,3,58,29,0,596,
        594,1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,
        602,1,0,0,0,600,598,1,0,0,0,601,593,1,0,0,0,601,602,1,0,0,0,602,
        603,1,0,0,0,603,604,5,15,0,0,604,57,1,0,0,0,605,606,5,63,0,0,606,
        609,5,18,0,0,607,610,3,86,43,0,608,610,3,88,44,0,609,607,1,0,0,0,
        609,608,1,0,0,0,610,59,1,0,0,0,611,612,5,43,0,0,612,617,3,62,31,
        0,613,614,5,57,0,0,614,616,3,62,31,0,615,613,1,0,0,0,616,619,1,0,
        0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,621,1,0,0,0,619,617,1,0,
        0,0,620,622,5,57,0,0,621,620,1,0,0,0,621,622,1,0,0,0,622,623,1,0,
        0,0,623,624,5,44,0,0,624,61,1,0,0,0,625,634,3,86,43,0,626,634,5,
        64,0,0,627,634,5,65,0,0,628,634,5,58,0,0,629,634,5,79,0,0,630,634,
        5,81,0,0,631,634,3,60,30,0,632,634,5,70,0,0,633,625,1,0,0,0,633,
        626,1,0,0,0,633,627,1,0,0,0,633,628,1,0,0,0,633,629,1,0,0,0,633,
        630,1,0,0,0,633,631,1,0,0,0,633,632,1,0,0,0,634,63,1,0,0,0,635,638,
        3,90,45,0,636,638,3,30,15,0,637,635,1,0,0,0,637,636,1,0,0,0,638,
        65,1,0,0,0,639,643,3,64,32,0,640,643,3,26,13,0,641,643,3,28,14,0,
        642,639,1,0,0,0,642,640,1,0,0,0,642,641,1,0,0,0,643,67,1,0,0,0,644,
        663,5,63,0,0,645,663,3,66,33,0,646,663,5,59,0,0,647,648,3,44,22,
        0,648,649,5,45,0,0,649,650,3,66,33,0,650,663,1,0,0,0,651,652,5,46,
        0,0,652,658,5,21,0,0,653,659,3,66,33,0,654,655,3,44,22,0,655,656,
        5,45,0,0,656,657,3,66,33,0,657,659,1,0,0,0,658,653,1,0,0,0,658,654,
        1,0,0,0,659,660,1,0,0,0,660,661,5,22,0,0,661,663,1,0,0,0,662,644,
        1,0,0,0,662,645,1,0,0,0,662,646,1,0,0,0,662,647,1,0,0,0,662,651,
        1,0,0,0,663,69,1,0,0,0,664,671,3,68,34,0,665,666,3,118,59,0,666,
        667,5,21,0,0,667,668,3,28,14,0,668,669,5,22,0,0,669,671,1,0,0,0,
        670,664,1,0,0,0,670,665,1,0,0,0,671,71,1,0,0,0,672,682,3,74,37,0,
        673,674,5,36,0,0,674,683,3,84,42,0,675,677,5,36,0,0,676,675,1,0,
        0,0,676,677,1,0,0,0,677,680,1,0,0,0,678,681,3,76,38,0,679,681,3,
        78,39,0,680,678,1,0,0,0,680,679,1,0,0,0,681,683,1,0,0,0,682,673,
        1,0,0,0,682,676,1,0,0,0,683,73,1,0,0,0,684,686,3,50,25,0,685,684,
        1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,687,688,1,0,0,0,688,690,
        1,0,0,0,689,687,1,0,0,0,690,693,5,63,0,0,691,692,5,18,0,0,692,694,
        3,92,46,0,693,691,1,0,0,0,693,694,1,0,0,0,694,697,1,0,0,0,695,698,
        3,76,38,0,696,698,3,78,39,0,697,695,1,0,0,0,697,696,1,0,0,0,697,
        698,1,0,0,0,698,75,1,0,0,0,699,708,5,21,0,0,700,705,3,84,42,0,701,
        702,5,57,0,0,702,704,3,84,42,0,703,701,1,0,0,0,704,707,1,0,0,0,705,
        703,1,0,0,0,705,706,1,0,0,0,706,709,1,0,0,0,707,705,1,0,0,0,708,
        700,1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,711,5,22,0,0,711,
        77,1,0,0,0,712,721,5,14,0,0,713,718,3,84,42,0,714,715,5,57,0,0,715,
        717,3,84,42,0,716,714,1,0,0,0,717,720,1,0,0,0,718,716,1,0,0,0,718,
        719,1,0,0,0,719,722,1,0,0,0,720,718,1,0,0,0,721,713,1,0,0,0,721,
        722,1,0,0,0,722,723,1,0,0,0,723,724,5,15,0,0,724,79,1,0,0,0,725,
        726,5,21,0,0,726,731,3,74,37,0,727,728,5,57,0,0,728,730,3,74,37,
        0,729,727,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,
        0,732,734,1,0,0,0,733,731,1,0,0,0,734,735,5,22,0,0,735,81,1,0,0,
        0,736,745,5,21,0,0,737,742,3,74,37,0,738,739,5,57,0,0,739,741,3,
        74,37,0,740,738,1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,0,742,743,
        1,0,0,0,743,746,1,0,0,0,744,742,1,0,0,0,745,737,1,0,0,0,745,746,
        1,0,0,0,746,747,1,0,0,0,747,748,5,22,0,0,748,83,1,0,0,0,749,753,
        3,74,37,0,750,753,3,86,43,0,751,753,3,110,55,0,752,749,1,0,0,0,752,
        750,1,0,0,0,752,751,1,0,0,0,753,85,1,0,0,0,754,756,7,5,0,0,755,757,
        5,82,0,0,756,755,1,0,0,0,756,757,1,0,0,0,757,761,1,0,0,0,758,761,
        5,70,0,0,759,761,5,58,0,0,760,754,1,0,0,0,760,758,1,0,0,0,760,759,
        1,0,0,0,761,87,1,0,0,0,762,763,5,43,0,0,763,768,3,86,43,0,764,765,
        5,57,0,0,765,767,3,86,43,0,766,764,1,0,0,0,767,770,1,0,0,0,768,766,
        1,0,0,0,768,769,1,0,0,0,769,771,1,0,0,0,770,768,1,0,0,0,771,772,
        5,44,0,0,772,89,1,0,0,0,773,776,3,22,11,0,774,776,3,24,12,0,775,
        773,1,0,0,0,775,774,1,0,0,0,776,91,1,0,0,0,777,779,5,47,0,0,778,
        780,3,94,47,0,779,778,1,0,0,0,779,780,1,0,0,0,780,806,1,0,0,0,781,
        793,5,59,0,0,782,783,5,10,0,0,783,788,3,92,46,0,784,785,5,57,0,0,
        785,787,3,92,46,0,786,784,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,
        0,788,789,1,0,0,0,789,791,1,0,0,0,790,788,1,0,0,0,791,792,5,11,0,
        0,792,794,1,0,0,0,793,782,1,0,0,0,793,794,1,0,0,0,794,798,1,0,0,
        0,795,797,5,48,0,0,796,795,1,0,0,0,797,800,1,0,0,0,798,796,1,0,0,
        0,798,799,1,0,0,0,799,802,1,0,0,0,800,798,1,0,0,0,801,803,3,94,47,
        0,802,801,1,0,0,0,802,803,1,0,0,0,803,806,1,0,0,0,804,806,3,110,
        55,0,805,777,1,0,0,0,805,781,1,0,0,0,805,804,1,0,0,0,806,93,1,0,
        0,0,807,812,5,83,0,0,808,809,5,43,0,0,809,810,5,64,0,0,810,812,5,
        44,0,0,811,807,1,0,0,0,811,808,1,0,0,0,812,95,1,0,0,0,813,826,5,
        83,0,0,814,815,5,43,0,0,815,820,3,98,49,0,816,817,5,38,0,0,817,819,
        3,98,49,0,818,816,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,820,821,
        1,0,0,0,821,823,1,0,0,0,822,820,1,0,0,0,823,824,5,44,0,0,824,826,
        1,0,0,0,825,813,1,0,0,0,825,814,1,0,0,0,826,97,1,0,0,0,827,835,5,
        64,0,0,828,835,3,74,37,0,829,830,5,49,0,0,830,831,3,68,34,0,831,
        832,5,22,0,0,832,835,1,0,0,0,833,835,3,110,55,0,834,827,1,0,0,0,
        834,828,1,0,0,0,834,829,1,0,0,0,834,833,1,0,0,0,835,99,1,0,0,0,836,
        837,5,73,0,0,837,839,5,42,0,0,838,836,1,0,0,0,838,839,1,0,0,0,839,
        840,1,0,0,0,840,843,5,74,0,0,841,842,5,18,0,0,842,844,5,64,0,0,843,
        841,1,0,0,0,843,844,1,0,0,0,844,101,1,0,0,0,845,848,5,43,0,0,846,
        847,5,73,0,0,847,849,5,42,0,0,848,846,1,0,0,0,848,849,1,0,0,0,849,
        850,1,0,0,0,850,851,5,78,0,0,851,854,5,44,0,0,852,853,5,18,0,0,853,
        855,5,64,0,0,854,852,1,0,0,0,854,855,1,0,0,0,855,103,1,0,0,0,856,
        857,5,73,0,0,857,859,5,42,0,0,858,856,1,0,0,0,858,859,1,0,0,0,859,
        860,1,0,0,0,860,863,3,108,54,0,861,862,5,18,0,0,862,864,5,64,0,0,
        863,861,1,0,0,0,863,864,1,0,0,0,864,105,1,0,0,0,865,869,3,100,50,
        0,866,869,3,102,51,0,867,869,3,104,52,0,868,865,1,0,0,0,868,866,
        1,0,0,0,868,867,1,0,0,0,869,107,1,0,0,0,870,875,5,73,0,0,871,872,
        5,45,0,0,872,874,5,73,0,0,873,871,1,0,0,0,874,877,1,0,0,0,875,873,
        1,0,0,0,875,876,1,0,0,0,876,109,1,0,0,0,877,875,1,0,0,0,878,882,
        5,84,0,0,879,881,8,6,0,0,880,879,1,0,0,0,881,884,1,0,0,0,882,880,
        1,0,0,0,882,883,1,0,0,0,883,885,1,0,0,0,884,882,1,0,0,0,885,886,
        5,85,0,0,886,111,1,0,0,0,887,888,7,7,0,0,888,113,1,0,0,0,889,890,
        7,8,0,0,890,115,1,0,0,0,891,892,7,9,0,0,892,117,1,0,0,0,893,894,
        7,10,0,0,894,119,1,0,0,0,138,124,130,136,141,144,150,156,160,166,
        170,175,180,184,187,191,199,204,207,211,219,222,236,238,245,250,
        255,259,265,268,271,274,277,287,290,295,299,304,309,313,317,322,
        325,330,335,340,343,348,357,361,364,367,371,380,382,390,394,399,
        403,406,411,421,424,427,434,437,445,448,452,455,459,476,485,494,
        499,507,510,518,525,534,539,541,549,554,557,560,573,577,579,582,
        586,598,601,609,617,621,633,637,642,658,662,670,676,680,682,687,
        693,697,705,708,718,721,731,742,745,752,756,760,768,775,779,788,
        793,798,802,805,811,820,825,834,838,843,848,854,858,863,868,875,
        882
    ]

class LinguaFrancaParser ( Parser ):

    grammarFileName = "LinguaFranca.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'target'", "';'", "'import'", "'from'", 
                     "'as'", "'federated'", "'main'", "'realtime'", "'reactor'", 
                     "'<'", "'>'", "'at'", "'extends'", "'{'", "'}'", "'reset'", 
                     "'state'", "':'", "'const'", "'method'", "'('", "')'", 
                     "'mutable'", "'input'", "'output'", "'timer'", "'initial'", 
                     "'mode'", "'action'", "'reaction'", "'mutation'", "'->'", 
                     "'deadline'", "'STP'", "'preamble'", "'='", "'new'", 
                     "'+'", "'~>'", "'after'", "'serializer'", "'@'", "'['", 
                     "']'", "'.'", "'interleaved'", "'time'", "'*'", "'widthof('", 
                     "'logical'", "'physical'", "'private'", "'public'", 
                     "'startup'", "'shutdown'", "'history'", "','", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'[]'", "'{='", "'=}'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "COMMA", "Boolean", "DottedName", "WS", 
                      "TRUE", "FALSE", "ID", "INT", "NEGINT", "FLOAT_EXP_SUFFIX", 
                      "SL_COMMENT", "ML_COMMENT", "LT_ANNOT", "STRING", 
                      "CHAR_LIT", "ANY_OTHER", "Kebab", "IPV4Addr", "HEXDIG", 
                      "H16", "LS32", "IPV6Addr", "SignedFloat", "FileName", 
                      "Path", "TimeUnit", "OPEN_CLOSE_SQ_BR", "SC_MARK", 
                      "EC_MARK", "Token" ]

    RULE_model = 0
    RULE_targetDecl = 1
    RULE_importDecl = 2
    RULE_reactorDecl = 3
    RULE_importedReactor = 4
    RULE_reactor = 5
    RULE_typeParm = 6
    RULE_typeExpr = 7
    RULE_stateVar = 8
    RULE_method = 9
    RULE_methodArgument = 10
    RULE_inputDecl = 11
    RULE_outputDecl = 12
    RULE_timer = 13
    RULE_modeDecl = 14
    RULE_action = 15
    RULE_reaction = 16
    RULE_triggerRef = 17
    RULE_builtinTriggerRef = 18
    RULE_deadline = 19
    RULE_sTP = 20
    RULE_preamble = 21
    RULE_instantiation = 22
    RULE_connection = 23
    RULE_serializer = 24
    RULE_attribute = 25
    RULE_attrParm = 26
    RULE_attrParmValue = 27
    RULE_keyValuePairs = 28
    RULE_keyValuePair = 29
    RULE_array = 30
    RULE_element = 31
    RULE_typedVariable = 32
    RULE_variable = 33
    RULE_varRef = 34
    RULE_varRefOrModeTransition = 35
    RULE_assignment = 36
    RULE_parameter = 37
    RULE_argumentsForm1 = 38
    RULE_argumentsForm2 = 39
    RULE_argumentsForm3 = 40
    RULE_argumentsForm4 = 41
    RULE_expression = 42
    RULE_value = 43
    RULE_valueArray = 44
    RULE_portDecl = 45
    RULE_type = 46
    RULE_arraySpec = 47
    RULE_widthSpec = 48
    RULE_widthTerm = 49
    RULE_ipV4host = 50
    RULE_ipV6host = 51
    RULE_namedHost = 52
    RULE_host = 53
    RULE_hostName = 54
    RULE_code = 55
    RULE_actionOrigin = 56
    RULE_visibility = 57
    RULE_builtinTrigger = 58
    RULE_modeTransition = 59

    ruleNames =  [ "model", "targetDecl", "importDecl", "reactorDecl", "importedReactor", 
                   "reactor", "typeParm", "typeExpr", "stateVar", "method", 
                   "methodArgument", "inputDecl", "outputDecl", "timer", 
                   "modeDecl", "action", "reaction", "triggerRef", "builtinTriggerRef", 
                   "deadline", "sTP", "preamble", "instantiation", "connection", 
                   "serializer", "attribute", "attrParm", "attrParmValue", 
                   "keyValuePairs", "keyValuePair", "array", "element", 
                   "typedVariable", "variable", "varRef", "varRefOrModeTransition", 
                   "assignment", "parameter", "argumentsForm1", "argumentsForm2", 
                   "argumentsForm3", "argumentsForm4", "expression", "value", 
                   "valueArray", "portDecl", "type", "arraySpec", "widthSpec", 
                   "widthTerm", "ipV4host", "ipV6host", "namedHost", "host", 
                   "hostName", "code", "actionOrigin", "visibility", "builtinTrigger", 
                   "modeTransition" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    COMMA=57
    Boolean=58
    DottedName=59
    WS=60
    TRUE=61
    FALSE=62
    ID=63
    INT=64
    NEGINT=65
    FLOAT_EXP_SUFFIX=66
    SL_COMMENT=67
    ML_COMMENT=68
    LT_ANNOT=69
    STRING=70
    CHAR_LIT=71
    ANY_OTHER=72
    Kebab=73
    IPV4Addr=74
    HEXDIG=75
    H16=76
    LS32=77
    IPV6Addr=78
    SignedFloat=79
    FileName=80
    Path=81
    TimeUnit=82
    OPEN_CLOSE_SQ_BR=83
    SC_MARK=84
    EC_MARK=85
    Token=86

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    def model(self):

        localctx = LinguaFrancaParser.ModelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 120
            self.targetDecl()
            self.state = 124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LinguaFrancaParser.T__2:
                self.state = 121
                self.importDecl()
                self.state = 126
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LinguaFrancaParser.T__34) | (1 << LinguaFrancaParser.T__51) | (1 << LinguaFrancaParser.T__52))) != 0):
                self.state = 127
                self.preamble()
                self.state = 132
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 134 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 133
                self.reactor()
                self.state = 136 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LinguaFrancaParser.T__5) | (1 << LinguaFrancaParser.T__6) | (1 << LinguaFrancaParser.T__7) | (1 << LinguaFrancaParser.T__8) | (1 << LinguaFrancaParser.T__41))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def keyValuePairs(self):
            return self.getTypedRuleContext(LinguaFrancaParser.KeyValuePairsContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_targetDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargetDecl" ):
                listener.enterTargetDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargetDecl" ):
                listener.exitTargetDecl(self)




    def targetDecl(self):

        localctx = LinguaFrancaParser.TargetDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_targetDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 138
            self.match(LinguaFrancaParser.T__0)
            self.state = 139
            self.match(LinguaFrancaParser.ID)
            self.state = 141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__13:
                self.state = 140
                self.keyValuePairs()


            self.state = 144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__1:
                self.state = 143
                self.match(LinguaFrancaParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(LinguaFrancaParser.STRING, 0)

        def importedReactor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ImportedReactorContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ImportedReactorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_importDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDecl" ):
                listener.enterImportDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDecl" ):
                listener.exitImportDecl(self)




    def importDecl(self):

        localctx = LinguaFrancaParser.ImportDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 146
            self.match(LinguaFrancaParser.T__2)
            self.state = 148 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 147
                self.importedReactor()
                self.state = 150 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==LinguaFrancaParser.ID):
                    break

            self.state = 160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LinguaFrancaParser.COMMA:
                self.state = 152
                self.match(LinguaFrancaParser.COMMA)
                self.state = 154 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 153
                    self.importedReactor()
                    self.state = 156 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==LinguaFrancaParser.ID):
                        break

                self.state = 162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 163
            self.match(LinguaFrancaParser.T__3)
            self.state = 164
            self.match(LinguaFrancaParser.STRING)
            self.state = 166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__1:
                self.state = 165
                self.match(LinguaFrancaParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReactorDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reactor(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ReactorContext,0)


        def importedReactor(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ImportedReactorContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_reactorDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReactorDecl" ):
                listener.enterReactorDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReactorDecl" ):
                listener.exitReactorDecl(self)




    def reactorDecl(self):

        localctx = LinguaFrancaParser.ReactorDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_reactorDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 170
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LinguaFrancaParser.T__5, LinguaFrancaParser.T__6, LinguaFrancaParser.T__7, LinguaFrancaParser.T__8, LinguaFrancaParser.T__41]:
                self.state = 168
                self.reactor()
                pass
            elif token in [LinguaFrancaParser.ID]:
                self.state = 169
                self.importedReactor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportedReactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.ID)
            else:
                return self.getToken(LinguaFrancaParser.ID, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_importedReactor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportedReactor" ):
                listener.enterImportedReactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportedReactor" ):
                listener.exitImportedReactor(self)




    def importedReactor(self):

        localctx = LinguaFrancaParser.ImportedReactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importedReactor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self.match(LinguaFrancaParser.ID)
            self.state = 175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__4:
                self.state = 173
                self.match(LinguaFrancaParser.T__4)
                self.state = 174
                self.match(LinguaFrancaParser.ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.AttributeContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.AttributeContext,i)


        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def typeParm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.TypeParmContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.TypeParmContext,i)


        def argumentsForm3(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ArgumentsForm3Context,0)


        def host(self):
            return self.getTypedRuleContext(LinguaFrancaParser.HostContext,0)


        def preamble(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.PreambleContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.PreambleContext,i)


        def stateVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.StateVarContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.StateVarContext,i)


        def method(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.MethodContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.MethodContext,i)


        def inputDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.InputDeclContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.InputDeclContext,i)


        def outputDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.OutputDeclContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.OutputDeclContext,i)


        def timer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.TimerContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.TimerContext,i)


        def action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ActionContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ActionContext,i)


        def instantiation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.InstantiationContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.InstantiationContext,i)


        def connection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ConnectionContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ConnectionContext,i)


        def reaction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ReactionContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ReactionContext,i)


        def modeDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ModeDeclContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ModeDeclContext,i)


        def reactorDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ReactorDeclContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ReactorDeclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_reactor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReactor" ):
                listener.enterReactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReactor" ):
                listener.exitReactor(self)




    def reactor(self):

        localctx = LinguaFrancaParser.ReactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_reactor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LinguaFrancaParser.T__41:
                self.state = 177
                self.attribute()
                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__5 or _la==LinguaFrancaParser.T__6:
                self.state = 183
                _la = self._input.LA(1)
                if not(_la==LinguaFrancaParser.T__5 or _la==LinguaFrancaParser.T__6):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__7:
                self.state = 186
                self.match(LinguaFrancaParser.T__7)


            self.state = 189
            self.match(LinguaFrancaParser.T__8)
            self.state = 191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.ID:
                self.state = 190
                self.match(LinguaFrancaParser.ID)


            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__9:
                self.state = 193
                self.match(LinguaFrancaParser.T__9)
                self.state = 194
                self.typeParm()
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.COMMA:
                    self.state = 195
                    self.match(LinguaFrancaParser.COMMA)
                    self.state = 196
                    self.typeParm()
                    self.state = 201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 202
                self.match(LinguaFrancaParser.T__10)


            self.state = 207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__20:
                self.state = 206
                self.argumentsForm3()


            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__11:
                self.state = 209
                self.match(LinguaFrancaParser.T__11)
                self.state = 210
                self.host()


            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__12:
                self.state = 213
                self.match(LinguaFrancaParser.T__12)

                self.state = 214
                self.reactorDecl()
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.COMMA:
                    self.state = 215
                    self.match(LinguaFrancaParser.COMMA)
                    self.state = 216
                    self.reactorDecl()
                    self.state = 221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 224
            self.match(LinguaFrancaParser.T__13)
            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LinguaFrancaParser.T__15) | (1 << LinguaFrancaParser.T__16) | (1 << LinguaFrancaParser.T__18) | (1 << LinguaFrancaParser.T__19) | (1 << LinguaFrancaParser.T__20) | (1 << LinguaFrancaParser.T__22) | (1 << LinguaFrancaParser.T__23) | (1 << LinguaFrancaParser.T__24) | (1 << LinguaFrancaParser.T__25) | (1 << LinguaFrancaParser.T__26) | (1 << LinguaFrancaParser.T__27) | (1 << LinguaFrancaParser.T__28) | (1 << LinguaFrancaParser.T__29) | (1 << LinguaFrancaParser.T__30) | (1 << LinguaFrancaParser.T__34) | (1 << LinguaFrancaParser.T__41) | (1 << LinguaFrancaParser.T__45) | (1 << LinguaFrancaParser.T__49) | (1 << LinguaFrancaParser.T__50) | (1 << LinguaFrancaParser.T__51) | (1 << LinguaFrancaParser.T__52) | (1 << LinguaFrancaParser.DottedName) | (1 << LinguaFrancaParser.ID))) != 0):
                self.state = 236
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 225
                    self.preamble()
                    pass

                elif la_ == 2:
                    self.state = 226
                    self.stateVar()
                    pass

                elif la_ == 3:
                    self.state = 227
                    self.method()
                    pass

                elif la_ == 4:
                    self.state = 228
                    self.inputDecl()
                    pass

                elif la_ == 5:
                    self.state = 229
                    self.outputDecl()
                    pass

                elif la_ == 6:
                    self.state = 230
                    self.timer()
                    pass

                elif la_ == 7:
                    self.state = 231
                    self.action()
                    pass

                elif la_ == 8:
                    self.state = 232
                    self.instantiation()
                    pass

                elif la_ == 9:
                    self.state = 233
                    self.connection()
                    pass

                elif la_ == 10:
                    self.state = 234
                    self.reaction()
                    pass

                elif la_ == 11:
                    self.state = 235
                    self.modeDecl()
                    pass


                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 241
            self.match(LinguaFrancaParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(LinguaFrancaParser.TypeExprContext,0)


        def code(self):
            return self.getTypedRuleContext(LinguaFrancaParser.CodeContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_typeParm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParm" ):
                listener.enterTypeParm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParm" ):
                listener.exitTypeParm(self)




    def typeParm(self):

        localctx = LinguaFrancaParser.TypeParmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_typeParm)
        try:
            self.state = 245
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LinguaFrancaParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 243
                self.typeExpr()
                pass
            elif token in [LinguaFrancaParser.SC_MARK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 244
                self.code()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.ID)
            else:
                return self.getToken(LinguaFrancaParser.ID, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_typeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpr" ):
                listener.enterTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpr" ):
                listener.exitTypeExpr(self)




    def typeExpr(self):

        localctx = LinguaFrancaParser.TypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_typeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 247
                self.match(LinguaFrancaParser.ID)
                self.state = 250 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==LinguaFrancaParser.ID):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.AttributeContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.AttributeContext,i)


        def type_(self):
            return self.getTypedRuleContext(LinguaFrancaParser.TypeContext,0)


        def argumentsForm1(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ArgumentsForm1Context,0)


        def argumentsForm2(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ArgumentsForm2Context,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_stateVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVar" ):
                listener.enterStateVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVar" ):
                listener.exitStateVar(self)




    def stateVar(self):

        localctx = LinguaFrancaParser.StateVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_stateVar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LinguaFrancaParser.T__41:
                self.state = 252
                self.attribute()
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__15:
                self.state = 258
                self.match(LinguaFrancaParser.T__15)


            self.state = 261
            self.match(LinguaFrancaParser.T__16)
            self.state = 262
            self.match(LinguaFrancaParser.ID)
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__17:
                self.state = 263
                self.match(LinguaFrancaParser.T__17)
                self.state = 264
                self.type_()


            self.state = 268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 267
                self.argumentsForm1()


            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__13:
                self.state = 270
                self.argumentsForm2()


            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__1:
                self.state = 273
                self.match(LinguaFrancaParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def code(self):
            return self.getTypedRuleContext(LinguaFrancaParser.CodeContext,0)


        def methodArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.MethodArgumentContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.MethodArgumentContext,i)


        def type_(self):
            return self.getTypedRuleContext(LinguaFrancaParser.TypeContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod" ):
                listener.enterMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod" ):
                listener.exitMethod(self)




    def method(self):

        localctx = LinguaFrancaParser.MethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_method)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__18:
                self.state = 276
                self.match(LinguaFrancaParser.T__18)


            self.state = 279
            self.match(LinguaFrancaParser.T__19)
            self.state = 280
            self.match(LinguaFrancaParser.ID)
            self.state = 281
            self.match(LinguaFrancaParser.T__20)
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.ID:
                self.state = 282
                self.methodArgument()
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.COMMA:
                    self.state = 283
                    self.match(LinguaFrancaParser.COMMA)
                    self.state = 284
                    self.methodArgument()
                    self.state = 289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 292
            self.match(LinguaFrancaParser.T__21)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__17:
                self.state = 293
                self.match(LinguaFrancaParser.T__17)
                self.state = 294
                self.type_()


            self.state = 297
            self.code()
            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__1:
                self.state = 298
                self.match(LinguaFrancaParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def type_(self):
            return self.getTypedRuleContext(LinguaFrancaParser.TypeContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_methodArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodArgument" ):
                listener.enterMethodArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodArgument" ):
                listener.exitMethodArgument(self)




    def methodArgument(self):

        localctx = LinguaFrancaParser.MethodArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_methodArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.match(LinguaFrancaParser.ID)
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__17:
                self.state = 302
                self.match(LinguaFrancaParser.T__17)
                self.state = 303
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.AttributeContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.AttributeContext,i)


        def widthSpec(self):
            return self.getTypedRuleContext(LinguaFrancaParser.WidthSpecContext,0)


        def type_(self):
            return self.getTypedRuleContext(LinguaFrancaParser.TypeContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_inputDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputDecl" ):
                listener.enterInputDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputDecl" ):
                listener.exitInputDecl(self)




    def inputDecl(self):

        localctx = LinguaFrancaParser.InputDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_inputDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LinguaFrancaParser.T__41:
                self.state = 306
                self.attribute()
                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__22:
                self.state = 312
                self.match(LinguaFrancaParser.T__22)


            self.state = 315
            self.match(LinguaFrancaParser.T__23)
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__42 or _la==LinguaFrancaParser.OPEN_CLOSE_SQ_BR:
                self.state = 316
                self.widthSpec()


            self.state = 319
            self.match(LinguaFrancaParser.ID)
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__17:
                self.state = 320
                self.match(LinguaFrancaParser.T__17)
                self.state = 321
                self.type_()


            self.state = 325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 324
                self.match(LinguaFrancaParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.AttributeContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.AttributeContext,i)


        def widthSpec(self):
            return self.getTypedRuleContext(LinguaFrancaParser.WidthSpecContext,0)


        def type_(self):
            return self.getTypedRuleContext(LinguaFrancaParser.TypeContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_outputDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputDecl" ):
                listener.enterOutputDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputDecl" ):
                listener.exitOutputDecl(self)




    def outputDecl(self):

        localctx = LinguaFrancaParser.OutputDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_outputDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LinguaFrancaParser.T__41:
                self.state = 327
                self.attribute()
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 333
            self.match(LinguaFrancaParser.T__24)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__42 or _la==LinguaFrancaParser.OPEN_CLOSE_SQ_BR:
                self.state = 334
                self.widthSpec()


            self.state = 337
            self.match(LinguaFrancaParser.ID)
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__17:
                self.state = 338
                self.match(LinguaFrancaParser.T__17)
                self.state = 339
                self.type_()


            self.state = 343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 342
                self.match(LinguaFrancaParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.AttributeContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.AttributeContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(LinguaFrancaParser.COMMA, 0)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_timer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimer" ):
                listener.enterTimer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimer" ):
                listener.exitTimer(self)




    def timer(self):

        localctx = LinguaFrancaParser.TimerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_timer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LinguaFrancaParser.T__41:
                self.state = 345
                self.attribute()
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 351
            self.match(LinguaFrancaParser.T__25)
            self.state = 352
            self.match(LinguaFrancaParser.ID)
            self.state = 361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 353
                self.match(LinguaFrancaParser.T__20)
                self.state = 354
                self.expression()
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LinguaFrancaParser.COMMA:
                    self.state = 355
                    self.match(LinguaFrancaParser.COMMA)
                    self.state = 356
                    self.expression()


                self.state = 359
                self.match(LinguaFrancaParser.T__21)


            self.state = 364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 363
                self.match(LinguaFrancaParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModeDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def stateVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.StateVarContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.StateVarContext,i)


        def timer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.TimerContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.TimerContext,i)


        def action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ActionContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ActionContext,i)


        def instantiation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.InstantiationContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.InstantiationContext,i)


        def connection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ConnectionContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ConnectionContext,i)


        def reaction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ReactionContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ReactionContext,i)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_modeDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeDecl" ):
                listener.enterModeDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeDecl" ):
                listener.exitModeDecl(self)




    def modeDecl(self):

        localctx = LinguaFrancaParser.ModeDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_modeDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__26:
                self.state = 366
                self.match(LinguaFrancaParser.T__26)


            self.state = 369
            self.match(LinguaFrancaParser.T__27)
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.ID:
                self.state = 370
                self.match(LinguaFrancaParser.ID)


            self.state = 373
            self.match(LinguaFrancaParser.T__13)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LinguaFrancaParser.T__15) | (1 << LinguaFrancaParser.T__16) | (1 << LinguaFrancaParser.T__20) | (1 << LinguaFrancaParser.T__22) | (1 << LinguaFrancaParser.T__23) | (1 << LinguaFrancaParser.T__24) | (1 << LinguaFrancaParser.T__25) | (1 << LinguaFrancaParser.T__26) | (1 << LinguaFrancaParser.T__27) | (1 << LinguaFrancaParser.T__28) | (1 << LinguaFrancaParser.T__29) | (1 << LinguaFrancaParser.T__30) | (1 << LinguaFrancaParser.T__41) | (1 << LinguaFrancaParser.T__45) | (1 << LinguaFrancaParser.T__49) | (1 << LinguaFrancaParser.T__50) | (1 << LinguaFrancaParser.DottedName) | (1 << LinguaFrancaParser.ID))) != 0):
                self.state = 380
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 374
                    self.stateVar()
                    pass

                elif la_ == 2:
                    self.state = 375
                    self.timer()
                    pass

                elif la_ == 3:
                    self.state = 376
                    self.action()
                    pass

                elif la_ == 4:
                    self.state = 377
                    self.instantiation()
                    pass

                elif la_ == 5:
                    self.state = 378
                    self.connection()
                    pass

                elif la_ == 6:
                    self.state = 379
                    self.reaction()
                    pass


                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 385
            self.match(LinguaFrancaParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.AttributeContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.AttributeContext,i)


        def actionOrigin(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ActionOriginContext,0)


        def argumentsForm1(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ArgumentsForm1Context,0)


        def type_(self):
            return self.getTypedRuleContext(LinguaFrancaParser.TypeContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction" ):
                listener.enterAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction" ):
                listener.exitAction(self)




    def action(self):

        localctx = LinguaFrancaParser.ActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_action)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LinguaFrancaParser.T__41:
                self.state = 387
                self.attribute()
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__49 or _la==LinguaFrancaParser.T__50:
                self.state = 393
                self.actionOrigin()


            self.state = 396
            self.match(LinguaFrancaParser.T__28)
            self.state = 397
            self.match(LinguaFrancaParser.ID)
            self.state = 399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 398
                self.argumentsForm1()


            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__17:
                self.state = 401
                self.match(LinguaFrancaParser.T__17)
                self.state = 402
                self.type_()


            self.state = 406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 405
                self.match(LinguaFrancaParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code(self):
            return self.getTypedRuleContext(LinguaFrancaParser.CodeContext,0)


        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.AttributeContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.AttributeContext,i)


        def varRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.VarRefContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.VarRefContext,i)


        def varRefOrModeTransition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.VarRefOrModeTransitionContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.VarRefOrModeTransitionContext,i)


        def sTP(self):
            return self.getTypedRuleContext(LinguaFrancaParser.STPContext,0)


        def deadline(self):
            return self.getTypedRuleContext(LinguaFrancaParser.DeadlineContext,0)


        def triggerRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.TriggerRefContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.TriggerRefContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_reaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReaction" ):
                listener.enterReaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReaction" ):
                listener.exitReaction(self)




    def reaction(self):

        localctx = LinguaFrancaParser.ReactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_reaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LinguaFrancaParser.T__41:
                self.state = 408
                self.attribute()
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 414
            _la = self._input.LA(1)
            if not(_la==LinguaFrancaParser.T__29 or _la==LinguaFrancaParser.T__30):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__20:
                self.state = 415
                self.match(LinguaFrancaParser.T__20)
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LinguaFrancaParser.T__15) | (1 << LinguaFrancaParser.T__22) | (1 << LinguaFrancaParser.T__23) | (1 << LinguaFrancaParser.T__24) | (1 << LinguaFrancaParser.T__25) | (1 << LinguaFrancaParser.T__26) | (1 << LinguaFrancaParser.T__27) | (1 << LinguaFrancaParser.T__28) | (1 << LinguaFrancaParser.T__41) | (1 << LinguaFrancaParser.T__45) | (1 << LinguaFrancaParser.T__49) | (1 << LinguaFrancaParser.T__50) | (1 << LinguaFrancaParser.T__53) | (1 << LinguaFrancaParser.T__54) | (1 << LinguaFrancaParser.DottedName) | (1 << LinguaFrancaParser.ID))) != 0):
                    self.state = 416
                    self.triggerRef()
                    self.state = 421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==LinguaFrancaParser.COMMA:
                        self.state = 417
                        self.match(LinguaFrancaParser.COMMA)
                        self.state = 418
                        self.triggerRef()
                        self.state = 423
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 426
                self.match(LinguaFrancaParser.T__21)


            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LinguaFrancaParser.T__22) | (1 << LinguaFrancaParser.T__23) | (1 << LinguaFrancaParser.T__24) | (1 << LinguaFrancaParser.T__25) | (1 << LinguaFrancaParser.T__26) | (1 << LinguaFrancaParser.T__27) | (1 << LinguaFrancaParser.T__28) | (1 << LinguaFrancaParser.T__41) | (1 << LinguaFrancaParser.T__45) | (1 << LinguaFrancaParser.T__49) | (1 << LinguaFrancaParser.T__50) | (1 << LinguaFrancaParser.DottedName) | (1 << LinguaFrancaParser.ID))) != 0):
                self.state = 429
                self.varRef()
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.COMMA:
                    self.state = 430
                    self.match(LinguaFrancaParser.COMMA)
                    self.state = 431
                    self.varRef()
                    self.state = 436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__31:
                self.state = 439
                self.match(LinguaFrancaParser.T__31)
                self.state = 440
                self.varRefOrModeTransition()
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.COMMA:
                    self.state = 441
                    self.match(LinguaFrancaParser.COMMA)
                    self.state = 442
                    self.varRefOrModeTransition()
                    self.state = 447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 450
            self.code()
            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__33:
                self.state = 451
                self.sTP()


            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__32:
                self.state = 454
                self.deadline()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def builtinTriggerRef(self):
            return self.getTypedRuleContext(LinguaFrancaParser.BuiltinTriggerRefContext,0)


        def varRef(self):
            return self.getTypedRuleContext(LinguaFrancaParser.VarRefContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_triggerRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerRef" ):
                listener.enterTriggerRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerRef" ):
                listener.exitTriggerRef(self)




    def triggerRef(self):

        localctx = LinguaFrancaParser.TriggerRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_triggerRef)
        try:
            self.state = 459
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LinguaFrancaParser.T__15, LinguaFrancaParser.T__53, LinguaFrancaParser.T__54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 457
                self.builtinTriggerRef()
                pass
            elif token in [LinguaFrancaParser.T__22, LinguaFrancaParser.T__23, LinguaFrancaParser.T__24, LinguaFrancaParser.T__25, LinguaFrancaParser.T__26, LinguaFrancaParser.T__27, LinguaFrancaParser.T__28, LinguaFrancaParser.T__41, LinguaFrancaParser.T__45, LinguaFrancaParser.T__49, LinguaFrancaParser.T__50, LinguaFrancaParser.DottedName, LinguaFrancaParser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 458
                self.varRef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltinTriggerRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def builtinTrigger(self):
            return self.getTypedRuleContext(LinguaFrancaParser.BuiltinTriggerContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_builtinTriggerRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltinTriggerRef" ):
                listener.enterBuiltinTriggerRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltinTriggerRef" ):
                listener.exitBuiltinTriggerRef(self)




    def builtinTriggerRef(self):

        localctx = LinguaFrancaParser.BuiltinTriggerRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_builtinTriggerRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.builtinTrigger()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeadlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ExpressionContext,0)


        def code(self):
            return self.getTypedRuleContext(LinguaFrancaParser.CodeContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_deadline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeadline" ):
                listener.enterDeadline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeadline" ):
                listener.exitDeadline(self)




    def deadline(self):

        localctx = LinguaFrancaParser.DeadlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_deadline)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.match(LinguaFrancaParser.T__32)
            self.state = 464
            self.match(LinguaFrancaParser.T__20)
            self.state = 465
            self.expression()
            self.state = 466
            self.match(LinguaFrancaParser.T__21)
            self.state = 467
            self.code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class STPContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ExpressionContext,0)


        def code(self):
            return self.getTypedRuleContext(LinguaFrancaParser.CodeContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_sTP

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSTP" ):
                listener.enterSTP(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSTP" ):
                listener.exitSTP(self)




    def sTP(self):

        localctx = LinguaFrancaParser.STPContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_sTP)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(LinguaFrancaParser.T__33)
            self.state = 470
            self.match(LinguaFrancaParser.T__20)
            self.state = 471
            self.expression()
            self.state = 472
            self.match(LinguaFrancaParser.T__21)
            self.state = 473
            self.code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreambleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code(self):
            return self.getTypedRuleContext(LinguaFrancaParser.CodeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(LinguaFrancaParser.VisibilityContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_preamble

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreamble" ):
                listener.enterPreamble(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreamble" ):
                listener.exitPreamble(self)




    def preamble(self):

        localctx = LinguaFrancaParser.PreambleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_preamble)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__51 or _la==LinguaFrancaParser.T__52:
                self.state = 475
                self.visibility()


            self.state = 478
            self.match(LinguaFrancaParser.T__34)
            self.state = 479
            self.code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstantiationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.ID)
            else:
                return self.getToken(LinguaFrancaParser.ID, i)

        def widthSpec(self):
            return self.getTypedRuleContext(LinguaFrancaParser.WidthSpecContext,0)


        def typeParm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.TypeParmContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.TypeParmContext,i)


        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.AssignmentContext,i)


        def host(self):
            return self.getTypedRuleContext(LinguaFrancaParser.HostContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_instantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstantiation" ):
                listener.enterInstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstantiation" ):
                listener.exitInstantiation(self)




    def instantiation(self):

        localctx = LinguaFrancaParser.InstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_instantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.match(LinguaFrancaParser.ID)
            self.state = 482
            self.match(LinguaFrancaParser.T__35)
            self.state = 483
            self.match(LinguaFrancaParser.T__36)
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__42 or _la==LinguaFrancaParser.OPEN_CLOSE_SQ_BR:
                self.state = 484
                self.widthSpec()


            self.state = 487
            self.match(LinguaFrancaParser.ID)
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__9:
                self.state = 488
                self.match(LinguaFrancaParser.T__9)
                self.state = 489
                self.typeParm()
                self.state = 494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.COMMA:
                    self.state = 490
                    self.match(LinguaFrancaParser.COMMA)
                    self.state = 491
                    self.typeParm()
                    self.state = 496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 497
                self.match(LinguaFrancaParser.T__10)


            self.state = 501
            self.match(LinguaFrancaParser.T__20)
            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__41 or _la==LinguaFrancaParser.ID:
                self.state = 502
                self.assignment()
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.COMMA:
                    self.state = 503
                    self.match(LinguaFrancaParser.COMMA)
                    self.state = 504
                    self.assignment()
                    self.state = 509
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 512
            self.match(LinguaFrancaParser.T__21)
            self.state = 518
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LinguaFrancaParser.T__11]:
                self.state = 513
                self.match(LinguaFrancaParser.T__11)
                self.state = 514
                self.host()
                self.state = 515
                self.match(LinguaFrancaParser.T__1)
                pass
            elif token in [LinguaFrancaParser.T__1]:
                self.state = 517
                self.match(LinguaFrancaParser.T__1)
                pass
            elif token in [LinguaFrancaParser.T__14, LinguaFrancaParser.T__15, LinguaFrancaParser.T__16, LinguaFrancaParser.T__18, LinguaFrancaParser.T__19, LinguaFrancaParser.T__20, LinguaFrancaParser.T__22, LinguaFrancaParser.T__23, LinguaFrancaParser.T__24, LinguaFrancaParser.T__25, LinguaFrancaParser.T__26, LinguaFrancaParser.T__27, LinguaFrancaParser.T__28, LinguaFrancaParser.T__29, LinguaFrancaParser.T__30, LinguaFrancaParser.T__34, LinguaFrancaParser.T__41, LinguaFrancaParser.T__44, LinguaFrancaParser.T__45, LinguaFrancaParser.T__49, LinguaFrancaParser.T__50, LinguaFrancaParser.T__51, LinguaFrancaParser.T__52, LinguaFrancaParser.DottedName, LinguaFrancaParser.ID]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.VarRefContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.VarRefContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def expression(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ExpressionContext,0)


        def serializer(self):
            return self.getTypedRuleContext(LinguaFrancaParser.SerializerContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_connection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnection" ):
                listener.enterConnection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnection" ):
                listener.exitConnection(self)




    def connection(self):

        localctx = LinguaFrancaParser.ConnectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_connection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LinguaFrancaParser.T__22, LinguaFrancaParser.T__23, LinguaFrancaParser.T__24, LinguaFrancaParser.T__25, LinguaFrancaParser.T__26, LinguaFrancaParser.T__27, LinguaFrancaParser.T__28, LinguaFrancaParser.T__41, LinguaFrancaParser.T__45, LinguaFrancaParser.T__49, LinguaFrancaParser.T__50, LinguaFrancaParser.DottedName, LinguaFrancaParser.ID]:
                self.state = 520
                self.varRef()
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.COMMA:
                    self.state = 521
                    self.match(LinguaFrancaParser.COMMA)
                    self.state = 522
                    self.varRef()
                    self.state = 527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [LinguaFrancaParser.T__20]:
                self.state = 528
                self.match(LinguaFrancaParser.T__20)
                self.state = 529
                self.varRef()
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.COMMA:
                    self.state = 530
                    self.match(LinguaFrancaParser.COMMA)
                    self.state = 531
                    self.varRef()
                    self.state = 536
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 537
                self.match(LinguaFrancaParser.T__21)
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LinguaFrancaParser.T__37:
                    self.state = 538
                    self.match(LinguaFrancaParser.T__37)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 543
            _la = self._input.LA(1)
            if not(_la==LinguaFrancaParser.T__31 or _la==LinguaFrancaParser.T__38):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 544
            self.varRef()
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LinguaFrancaParser.COMMA:
                self.state = 545
                self.match(LinguaFrancaParser.COMMA)
                self.state = 546
                self.varRef()
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__39:
                self.state = 552
                self.match(LinguaFrancaParser.T__39)
                self.state = 553
                self.expression()


            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__40:
                self.state = 556
                self.serializer()


            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__1:
                self.state = 559
                self.match(LinguaFrancaParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SerializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(LinguaFrancaParser.STRING, 0)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_serializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerializer" ):
                listener.enterSerializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerializer" ):
                listener.exitSerializer(self)




    def serializer(self):

        localctx = LinguaFrancaParser.SerializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_serializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(LinguaFrancaParser.T__40)
            self.state = 563
            self.match(LinguaFrancaParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def attrParm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.AttrParmContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.AttrParmContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = LinguaFrancaParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(LinguaFrancaParser.T__41)
            self.state = 566
            self.match(LinguaFrancaParser.ID)
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__20:
                self.state = 567
                self.match(LinguaFrancaParser.T__20)
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (LinguaFrancaParser.Boolean - 58)) | (1 << (LinguaFrancaParser.ID - 58)) | (1 << (LinguaFrancaParser.INT - 58)) | (1 << (LinguaFrancaParser.NEGINT - 58)) | (1 << (LinguaFrancaParser.STRING - 58)) | (1 << (LinguaFrancaParser.SignedFloat - 58)))) != 0):
                    self.state = 568
                    self.attrParm()
                    self.state = 573
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 569
                            self.match(LinguaFrancaParser.COMMA)
                            self.state = 570
                            self.attrParm() 
                        self.state = 575
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                    self.state = 577
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==LinguaFrancaParser.COMMA:
                        self.state = 576
                        self.match(LinguaFrancaParser.COMMA)




                self.state = 581
                self.match(LinguaFrancaParser.T__21)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrParmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrParmValue(self):
            return self.getTypedRuleContext(LinguaFrancaParser.AttrParmValueContext,0)


        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_attrParm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrParm" ):
                listener.enterAttrParm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrParm" ):
                listener.exitAttrParm(self)




    def attrParm(self):

        localctx = LinguaFrancaParser.AttrParmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_attrParm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.ID:
                self.state = 584
                self.match(LinguaFrancaParser.ID)
                self.state = 585
                self.match(LinguaFrancaParser.T__35)


            self.state = 588
            self.attrParmValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrParmValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(LinguaFrancaParser.STRING, 0)

        def INT(self):
            return self.getToken(LinguaFrancaParser.INT, 0)

        def NEGINT(self):
            return self.getToken(LinguaFrancaParser.NEGINT, 0)

        def Boolean(self):
            return self.getToken(LinguaFrancaParser.Boolean, 0)

        def SignedFloat(self):
            return self.getToken(LinguaFrancaParser.SignedFloat, 0)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_attrParmValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrParmValue" ):
                listener.enterAttrParmValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrParmValue" ):
                listener.exitAttrParmValue(self)




    def attrParmValue(self):

        localctx = LinguaFrancaParser.AttrParmValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_attrParmValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (LinguaFrancaParser.Boolean - 58)) | (1 << (LinguaFrancaParser.INT - 58)) | (1 << (LinguaFrancaParser.NEGINT - 58)) | (1 << (LinguaFrancaParser.STRING - 58)) | (1 << (LinguaFrancaParser.SignedFloat - 58)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValuePairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.KeyValuePairContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.KeyValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def TimeUnit(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.TimeUnit)
            else:
                return self.getToken(LinguaFrancaParser.TimeUnit, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_keyValuePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValuePairs" ):
                listener.enterKeyValuePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValuePairs" ):
                listener.exitKeyValuePairs(self)




    def keyValuePairs(self):

        localctx = LinguaFrancaParser.KeyValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_keyValuePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(LinguaFrancaParser.T__13)
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.ID:
                self.state = 593
                self.keyValuePair()
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.COMMA or _la==LinguaFrancaParser.TimeUnit:
                    self.state = 594
                    _la = self._input.LA(1)
                    if not(_la==LinguaFrancaParser.COMMA or _la==LinguaFrancaParser.TimeUnit):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                    self.state = 595
                    self.keyValuePair()
                    self.state = 600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 603
            self.match(LinguaFrancaParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def value(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ValueContext,0)


        def valueArray(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ValueArrayContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_keyValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValuePair" ):
                listener.enterKeyValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValuePair" ):
                listener.exitKeyValuePair(self)




    def keyValuePair(self):

        localctx = LinguaFrancaParser.KeyValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_keyValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(LinguaFrancaParser.ID)
            self.state = 606
            self.match(LinguaFrancaParser.T__17)
            self.state = 609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LinguaFrancaParser.Boolean, LinguaFrancaParser.INT, LinguaFrancaParser.NEGINT, LinguaFrancaParser.STRING, LinguaFrancaParser.SignedFloat]:
                self.state = 607
                self.value()
                pass
            elif token in [LinguaFrancaParser.T__42]:
                self.state = 608
                self.valueArray()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ElementContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)




    def array(self):

        localctx = LinguaFrancaParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.match(LinguaFrancaParser.T__42)
            self.state = 612
            self.element()
            self.state = 617
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 613
                    self.match(LinguaFrancaParser.COMMA)

                    self.state = 614
                    self.element() 
                self.state = 619
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.COMMA:
                self.state = 620
                self.match(LinguaFrancaParser.COMMA)


            self.state = 623
            self.match(LinguaFrancaParser.T__43)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ValueContext,0)


        def INT(self):
            return self.getToken(LinguaFrancaParser.INT, 0)

        def NEGINT(self):
            return self.getToken(LinguaFrancaParser.NEGINT, 0)

        def Boolean(self):
            return self.getToken(LinguaFrancaParser.Boolean, 0)

        def SignedFloat(self):
            return self.getToken(LinguaFrancaParser.SignedFloat, 0)

        def Path(self):
            return self.getToken(LinguaFrancaParser.Path, 0)

        def array(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ArrayContext,0)


        def STRING(self):
            return self.getToken(LinguaFrancaParser.STRING, 0)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)




    def element(self):

        localctx = LinguaFrancaParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_element)
        try:
            self.state = 633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 625
                self.value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 626
                self.match(LinguaFrancaParser.INT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 627
                self.match(LinguaFrancaParser.NEGINT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 628
                self.match(LinguaFrancaParser.Boolean)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 629
                self.match(LinguaFrancaParser.SignedFloat)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 630
                self.match(LinguaFrancaParser.Path)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 631
                self.array()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 632
                self.match(LinguaFrancaParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def portDecl(self):
            return self.getTypedRuleContext(LinguaFrancaParser.PortDeclContext,0)


        def action(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ActionContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_typedVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedVariable" ):
                listener.enterTypedVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedVariable" ):
                listener.exitTypedVariable(self)




    def typedVariable(self):

        localctx = LinguaFrancaParser.TypedVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_typedVariable)
        try:
            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 635
                self.portDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 636
                self.action()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedVariable(self):
            return self.getTypedRuleContext(LinguaFrancaParser.TypedVariableContext,0)


        def timer(self):
            return self.getTypedRuleContext(LinguaFrancaParser.TimerContext,0)


        def modeDecl(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ModeDeclContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = LinguaFrancaParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_variable)
        try:
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 639
                self.typedVariable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 640
                self.timer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 641
                self.modeDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarRefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def variable(self):
            return self.getTypedRuleContext(LinguaFrancaParser.VariableContext,0)


        def DottedName(self):
            return self.getToken(LinguaFrancaParser.DottedName, 0)

        def instantiation(self):
            return self.getTypedRuleContext(LinguaFrancaParser.InstantiationContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_varRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarRef" ):
                listener.enterVarRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarRef" ):
                listener.exitVarRef(self)




    def varRef(self):

        localctx = LinguaFrancaParser.VarRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_varRef)
        try:
            self.state = 662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 644
                self.match(LinguaFrancaParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 645
                self.variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 646
                self.match(LinguaFrancaParser.DottedName)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 647
                self.instantiation()
                self.state = 648
                self.match(LinguaFrancaParser.T__44)
                self.state = 649
                self.variable()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 651
                self.match(LinguaFrancaParser.T__45)
                self.state = 652
                self.match(LinguaFrancaParser.T__20)
                self.state = 658
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [LinguaFrancaParser.T__22, LinguaFrancaParser.T__23, LinguaFrancaParser.T__24, LinguaFrancaParser.T__25, LinguaFrancaParser.T__26, LinguaFrancaParser.T__27, LinguaFrancaParser.T__28, LinguaFrancaParser.T__41, LinguaFrancaParser.T__49, LinguaFrancaParser.T__50]:
                    self.state = 653
                    self.variable()
                    pass
                elif token in [LinguaFrancaParser.ID]:
                    self.state = 654
                    self.instantiation()
                    self.state = 655
                    self.match(LinguaFrancaParser.T__44)
                    self.state = 656
                    self.variable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 660
                self.match(LinguaFrancaParser.T__21)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarRefOrModeTransitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varRef(self):
            return self.getTypedRuleContext(LinguaFrancaParser.VarRefContext,0)


        def modeTransition(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ModeTransitionContext,0)


        def modeDecl(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ModeDeclContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_varRefOrModeTransition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarRefOrModeTransition" ):
                listener.enterVarRefOrModeTransition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarRefOrModeTransition" ):
                listener.exitVarRefOrModeTransition(self)




    def varRefOrModeTransition(self):

        localctx = LinguaFrancaParser.VarRefOrModeTransitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_varRefOrModeTransition)
        try:
            self.state = 670
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LinguaFrancaParser.T__22, LinguaFrancaParser.T__23, LinguaFrancaParser.T__24, LinguaFrancaParser.T__25, LinguaFrancaParser.T__26, LinguaFrancaParser.T__27, LinguaFrancaParser.T__28, LinguaFrancaParser.T__41, LinguaFrancaParser.T__45, LinguaFrancaParser.T__49, LinguaFrancaParser.T__50, LinguaFrancaParser.DottedName, LinguaFrancaParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 664
                self.varRef()
                pass
            elif token in [LinguaFrancaParser.T__15, LinguaFrancaParser.T__55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 665
                self.modeTransition()
                self.state = 666
                self.match(LinguaFrancaParser.T__20)
                self.state = 667
                self.modeDecl()
                self.state = 668
                self.match(LinguaFrancaParser.T__21)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ParameterContext,0)


        def expression(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ExpressionContext,0)


        def argumentsForm1(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ArgumentsForm1Context,0)


        def argumentsForm2(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ArgumentsForm2Context,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = LinguaFrancaParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assignment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.parameter()
            self.state = 682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 673
                self.match(LinguaFrancaParser.T__35)
                self.state = 674
                self.expression()
                pass

            elif la_ == 2:
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LinguaFrancaParser.T__35:
                    self.state = 675
                    self.match(LinguaFrancaParser.T__35)


                self.state = 680
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [LinguaFrancaParser.T__20]:
                    self.state = 678
                    self.argumentsForm1()
                    pass
                elif token in [LinguaFrancaParser.T__13]:
                    self.state = 679
                    self.argumentsForm2()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(LinguaFrancaParser.ID, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.AttributeContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.AttributeContext,i)


        def type_(self):
            return self.getTypedRuleContext(LinguaFrancaParser.TypeContext,0)


        def argumentsForm1(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ArgumentsForm1Context,0)


        def argumentsForm2(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ArgumentsForm2Context,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = LinguaFrancaParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LinguaFrancaParser.T__41:
                self.state = 684
                self.attribute()
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 690
            self.match(LinguaFrancaParser.ID)
            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__17:
                self.state = 691
                self.match(LinguaFrancaParser.T__17)
                self.state = 692
                self.type_()


            self.state = 697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 695
                self.argumentsForm1()

            elif la_ == 2:
                self.state = 696
                self.argumentsForm2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsForm1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_argumentsForm1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentsForm1" ):
                listener.enterArgumentsForm1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentsForm1" ):
                listener.exitArgumentsForm1(self)




    def argumentsForm1(self):

        localctx = LinguaFrancaParser.ArgumentsForm1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_argumentsForm1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(LinguaFrancaParser.T__20)
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 42)) & ~0x3f) == 0 and ((1 << (_la - 42)) & ((1 << (LinguaFrancaParser.T__41 - 42)) | (1 << (LinguaFrancaParser.Boolean - 42)) | (1 << (LinguaFrancaParser.ID - 42)) | (1 << (LinguaFrancaParser.INT - 42)) | (1 << (LinguaFrancaParser.NEGINT - 42)) | (1 << (LinguaFrancaParser.STRING - 42)) | (1 << (LinguaFrancaParser.SignedFloat - 42)) | (1 << (LinguaFrancaParser.SC_MARK - 42)))) != 0):
                self.state = 700
                self.expression()
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.COMMA:
                    self.state = 701
                    self.match(LinguaFrancaParser.COMMA)
                    self.state = 702
                    self.expression()
                    self.state = 707
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 710
            self.match(LinguaFrancaParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsForm2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_argumentsForm2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentsForm2" ):
                listener.enterArgumentsForm2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentsForm2" ):
                listener.exitArgumentsForm2(self)




    def argumentsForm2(self):

        localctx = LinguaFrancaParser.ArgumentsForm2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_argumentsForm2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(LinguaFrancaParser.T__13)
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 42)) & ~0x3f) == 0 and ((1 << (_la - 42)) & ((1 << (LinguaFrancaParser.T__41 - 42)) | (1 << (LinguaFrancaParser.Boolean - 42)) | (1 << (LinguaFrancaParser.ID - 42)) | (1 << (LinguaFrancaParser.INT - 42)) | (1 << (LinguaFrancaParser.NEGINT - 42)) | (1 << (LinguaFrancaParser.STRING - 42)) | (1 << (LinguaFrancaParser.SignedFloat - 42)) | (1 << (LinguaFrancaParser.SC_MARK - 42)))) != 0):
                self.state = 713
                self.expression()
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.COMMA:
                    self.state = 714
                    self.match(LinguaFrancaParser.COMMA)
                    self.state = 715
                    self.expression()
                    self.state = 720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 723
            self.match(LinguaFrancaParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsForm3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ParameterContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_argumentsForm3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentsForm3" ):
                listener.enterArgumentsForm3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentsForm3" ):
                listener.exitArgumentsForm3(self)




    def argumentsForm3(self):

        localctx = LinguaFrancaParser.ArgumentsForm3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_argumentsForm3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(LinguaFrancaParser.T__20)
            self.state = 726
            self.parameter()
            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LinguaFrancaParser.COMMA:
                self.state = 727
                self.match(LinguaFrancaParser.COMMA)
                self.state = 728
                self.parameter()
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 734
            self.match(LinguaFrancaParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsForm4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ParameterContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_argumentsForm4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentsForm4" ):
                listener.enterArgumentsForm4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentsForm4" ):
                listener.exitArgumentsForm4(self)




    def argumentsForm4(self):

        localctx = LinguaFrancaParser.ArgumentsForm4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_argumentsForm4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(LinguaFrancaParser.T__20)
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__41 or _la==LinguaFrancaParser.ID:
                self.state = 737
                self.parameter()
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.COMMA:
                    self.state = 738
                    self.match(LinguaFrancaParser.COMMA)
                    self.state = 739
                    self.parameter()
                    self.state = 744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 747
            self.match(LinguaFrancaParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ParameterContext,0)


        def value(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ValueContext,0)


        def code(self):
            return self.getTypedRuleContext(LinguaFrancaParser.CodeContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = LinguaFrancaParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_expression)
        try:
            self.state = 752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LinguaFrancaParser.T__41, LinguaFrancaParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self.parameter()
                pass
            elif token in [LinguaFrancaParser.Boolean, LinguaFrancaParser.INT, LinguaFrancaParser.NEGINT, LinguaFrancaParser.STRING, LinguaFrancaParser.SignedFloat]:
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                self.value()
                pass
            elif token in [LinguaFrancaParser.SC_MARK]:
                self.enterOuterAlt(localctx, 3)
                self.state = 751
                self.code()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SignedFloat(self):
            return self.getToken(LinguaFrancaParser.SignedFloat, 0)

        def INT(self):
            return self.getToken(LinguaFrancaParser.INT, 0)

        def NEGINT(self):
            return self.getToken(LinguaFrancaParser.NEGINT, 0)

        def TimeUnit(self):
            return self.getToken(LinguaFrancaParser.TimeUnit, 0)

        def STRING(self):
            return self.getToken(LinguaFrancaParser.STRING, 0)

        def Boolean(self):
            return self.getToken(LinguaFrancaParser.Boolean, 0)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)




    def value(self):

        localctx = LinguaFrancaParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_value)
        self._la = 0 # Token type
        try:
            self.state = 760
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LinguaFrancaParser.INT, LinguaFrancaParser.NEGINT, LinguaFrancaParser.SignedFloat]:
                self.enterOuterAlt(localctx, 1)
                self.state = 754
                _la = self._input.LA(1)
                if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (LinguaFrancaParser.INT - 64)) | (1 << (LinguaFrancaParser.NEGINT - 64)) | (1 << (LinguaFrancaParser.SignedFloat - 64)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 756
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 755
                    self.match(LinguaFrancaParser.TimeUnit)


                pass
            elif token in [LinguaFrancaParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 758
                self.match(LinguaFrancaParser.STRING)
                pass
            elif token in [LinguaFrancaParser.Boolean]:
                self.enterOuterAlt(localctx, 3)
                self.state = 759
                self.match(LinguaFrancaParser.Boolean)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.ValueContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.ValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_valueArray

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArray" ):
                listener.enterValueArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArray" ):
                listener.exitValueArray(self)




    def valueArray(self):

        localctx = LinguaFrancaParser.ValueArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_valueArray)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(LinguaFrancaParser.T__42)
            self.state = 763
            self.value()
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LinguaFrancaParser.COMMA:
                self.state = 764
                self.match(LinguaFrancaParser.COMMA)
                self.state = 765
                self.value()
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 771
            self.match(LinguaFrancaParser.T__43)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PortDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inputDecl(self):
            return self.getTypedRuleContext(LinguaFrancaParser.InputDeclContext,0)


        def outputDecl(self):
            return self.getTypedRuleContext(LinguaFrancaParser.OutputDeclContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_portDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPortDecl" ):
                listener.enterPortDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPortDecl" ):
                listener.exitPortDecl(self)




    def portDecl(self):

        localctx = LinguaFrancaParser.PortDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_portDecl)
        try:
            self.state = 775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 773
                self.inputDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 774
                self.outputDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arraySpec(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ArraySpecContext,0)


        def DottedName(self):
            return self.getToken(LinguaFrancaParser.DottedName, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.TypeContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.TypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.COMMA)
            else:
                return self.getToken(LinguaFrancaParser.COMMA, i)

        def code(self):
            return self.getTypedRuleContext(LinguaFrancaParser.CodeContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = LinguaFrancaParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_type)
        self._la = 0 # Token type
        try:
            self.state = 805
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LinguaFrancaParser.T__46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 777
                self.match(LinguaFrancaParser.T__46)
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LinguaFrancaParser.T__42 or _la==LinguaFrancaParser.OPEN_CLOSE_SQ_BR:
                    self.state = 778
                    self.arraySpec()


                pass
            elif token in [LinguaFrancaParser.DottedName]:
                self.enterOuterAlt(localctx, 2)
                self.state = 781
                self.match(LinguaFrancaParser.DottedName)
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LinguaFrancaParser.T__9:
                    self.state = 782
                    self.match(LinguaFrancaParser.T__9)
                    self.state = 783
                    self.type_()
                    self.state = 788
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==LinguaFrancaParser.COMMA:
                        self.state = 784
                        self.match(LinguaFrancaParser.COMMA)
                        self.state = 785
                        self.type_()
                        self.state = 790
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 791
                    self.match(LinguaFrancaParser.T__10)


                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.T__47:
                    self.state = 795
                    self.match(LinguaFrancaParser.T__47)
                    self.state = 800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==LinguaFrancaParser.T__42 or _la==LinguaFrancaParser.OPEN_CLOSE_SQ_BR:
                    self.state = 801
                    self.arraySpec()


                pass
            elif token in [LinguaFrancaParser.SC_MARK]:
                self.enterOuterAlt(localctx, 3)
                self.state = 804
                self.code()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArraySpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CLOSE_SQ_BR(self):
            return self.getToken(LinguaFrancaParser.OPEN_CLOSE_SQ_BR, 0)

        def INT(self):
            return self.getToken(LinguaFrancaParser.INT, 0)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_arraySpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArraySpec" ):
                listener.enterArraySpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArraySpec" ):
                listener.exitArraySpec(self)




    def arraySpec(self):

        localctx = LinguaFrancaParser.ArraySpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_arraySpec)
        try:
            self.state = 811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LinguaFrancaParser.OPEN_CLOSE_SQ_BR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 807
                self.match(LinguaFrancaParser.OPEN_CLOSE_SQ_BR)
                pass
            elif token in [LinguaFrancaParser.T__42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 808
                self.match(LinguaFrancaParser.T__42)
                self.state = 809
                self.match(LinguaFrancaParser.INT)
                self.state = 810
                self.match(LinguaFrancaParser.T__43)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WidthSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CLOSE_SQ_BR(self):
            return self.getToken(LinguaFrancaParser.OPEN_CLOSE_SQ_BR, 0)

        def widthTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LinguaFrancaParser.WidthTermContext)
            else:
                return self.getTypedRuleContext(LinguaFrancaParser.WidthTermContext,i)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_widthSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWidthSpec" ):
                listener.enterWidthSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWidthSpec" ):
                listener.exitWidthSpec(self)




    def widthSpec(self):

        localctx = LinguaFrancaParser.WidthSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_widthSpec)
        self._la = 0 # Token type
        try:
            self.state = 825
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LinguaFrancaParser.OPEN_CLOSE_SQ_BR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 813
                self.match(LinguaFrancaParser.OPEN_CLOSE_SQ_BR)
                pass
            elif token in [LinguaFrancaParser.T__42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 814
                self.match(LinguaFrancaParser.T__42)
                self.state = 815
                self.widthTerm()
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==LinguaFrancaParser.T__37:
                    self.state = 816
                    self.match(LinguaFrancaParser.T__37)
                    self.state = 817
                    self.widthTerm()
                    self.state = 822
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 823
                self.match(LinguaFrancaParser.T__43)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WidthTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(LinguaFrancaParser.INT, 0)

        def parameter(self):
            return self.getTypedRuleContext(LinguaFrancaParser.ParameterContext,0)


        def varRef(self):
            return self.getTypedRuleContext(LinguaFrancaParser.VarRefContext,0)


        def code(self):
            return self.getTypedRuleContext(LinguaFrancaParser.CodeContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_widthTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWidthTerm" ):
                listener.enterWidthTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWidthTerm" ):
                listener.exitWidthTerm(self)




    def widthTerm(self):

        localctx = LinguaFrancaParser.WidthTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_widthTerm)
        try:
            self.state = 834
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LinguaFrancaParser.INT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 827
                self.match(LinguaFrancaParser.INT)
                pass
            elif token in [LinguaFrancaParser.T__41, LinguaFrancaParser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 828
                self.parameter()
                pass
            elif token in [LinguaFrancaParser.T__48]:
                self.enterOuterAlt(localctx, 3)
                self.state = 829
                self.match(LinguaFrancaParser.T__48)
                self.state = 830
                self.varRef()
                self.state = 831
                self.match(LinguaFrancaParser.T__21)
                pass
            elif token in [LinguaFrancaParser.SC_MARK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 833
                self.code()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IpV4hostContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IPV4Addr(self):
            return self.getToken(LinguaFrancaParser.IPV4Addr, 0)

        def Kebab(self):
            return self.getToken(LinguaFrancaParser.Kebab, 0)

        def INT(self):
            return self.getToken(LinguaFrancaParser.INT, 0)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_ipV4host

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIpV4host" ):
                listener.enterIpV4host(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIpV4host" ):
                listener.exitIpV4host(self)




    def ipV4host(self):

        localctx = LinguaFrancaParser.IpV4hostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ipV4host)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.Kebab:
                self.state = 836
                self.match(LinguaFrancaParser.Kebab)
                self.state = 837
                self.match(LinguaFrancaParser.T__41)


            self.state = 840
            self.match(LinguaFrancaParser.IPV4Addr)
            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__17:
                self.state = 841
                self.match(LinguaFrancaParser.T__17)
                self.state = 842
                self.match(LinguaFrancaParser.INT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IpV6hostContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IPV6Addr(self):
            return self.getToken(LinguaFrancaParser.IPV6Addr, 0)

        def Kebab(self):
            return self.getToken(LinguaFrancaParser.Kebab, 0)

        def INT(self):
            return self.getToken(LinguaFrancaParser.INT, 0)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_ipV6host

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIpV6host" ):
                listener.enterIpV6host(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIpV6host" ):
                listener.exitIpV6host(self)




    def ipV6host(self):

        localctx = LinguaFrancaParser.IpV6hostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_ipV6host)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(LinguaFrancaParser.T__42)
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.Kebab:
                self.state = 846
                self.match(LinguaFrancaParser.Kebab)
                self.state = 847
                self.match(LinguaFrancaParser.T__41)


            self.state = 850
            self.match(LinguaFrancaParser.IPV6Addr)
            self.state = 851
            self.match(LinguaFrancaParser.T__43)
            self.state = 854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__17:
                self.state = 852
                self.match(LinguaFrancaParser.T__17)
                self.state = 853
                self.match(LinguaFrancaParser.INT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedHostContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hostName(self):
            return self.getTypedRuleContext(LinguaFrancaParser.HostNameContext,0)


        def Kebab(self):
            return self.getToken(LinguaFrancaParser.Kebab, 0)

        def INT(self):
            return self.getToken(LinguaFrancaParser.INT, 0)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_namedHost

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedHost" ):
                listener.enterNamedHost(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedHost" ):
                listener.exitNamedHost(self)




    def namedHost(self):

        localctx = LinguaFrancaParser.NamedHostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_namedHost)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 856
                self.match(LinguaFrancaParser.Kebab)
                self.state = 857
                self.match(LinguaFrancaParser.T__41)


            self.state = 860
            self.hostName()
            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==LinguaFrancaParser.T__17:
                self.state = 861
                self.match(LinguaFrancaParser.T__17)
                self.state = 862
                self.match(LinguaFrancaParser.INT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ipV4host(self):
            return self.getTypedRuleContext(LinguaFrancaParser.IpV4hostContext,0)


        def ipV6host(self):
            return self.getTypedRuleContext(LinguaFrancaParser.IpV6hostContext,0)


        def namedHost(self):
            return self.getTypedRuleContext(LinguaFrancaParser.NamedHostContext,0)


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_host

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHost" ):
                listener.enterHost(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHost" ):
                listener.exitHost(self)




    def host(self):

        localctx = LinguaFrancaParser.HostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_host)
        try:
            self.state = 868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 865
                self.ipV4host()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 866
                self.ipV6host()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 867
                self.namedHost()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Kebab(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.Kebab)
            else:
                return self.getToken(LinguaFrancaParser.Kebab, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_hostName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHostName" ):
                listener.enterHostName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHostName" ):
                listener.exitHostName(self)




    def hostName(self):

        localctx = LinguaFrancaParser.HostNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_hostName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.match(LinguaFrancaParser.Kebab)
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==LinguaFrancaParser.T__44:
                self.state = 871
                self.match(LinguaFrancaParser.T__44)
                self.state = 872
                self.match(LinguaFrancaParser.Kebab)
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SC_MARK(self):
            return self.getToken(LinguaFrancaParser.SC_MARK, 0)

        def EC_MARK(self, i:int=None):
            if i is None:
                return self.getTokens(LinguaFrancaParser.EC_MARK)
            else:
                return self.getToken(LinguaFrancaParser.EC_MARK, i)

        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_code

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode" ):
                listener.enterCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode" ):
                listener.exitCode(self)




    def code(self):

        localctx = LinguaFrancaParser.CodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_code)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(LinguaFrancaParser.SC_MARK)
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LinguaFrancaParser.T__0) | (1 << LinguaFrancaParser.T__1) | (1 << LinguaFrancaParser.T__2) | (1 << LinguaFrancaParser.T__3) | (1 << LinguaFrancaParser.T__4) | (1 << LinguaFrancaParser.T__5) | (1 << LinguaFrancaParser.T__6) | (1 << LinguaFrancaParser.T__7) | (1 << LinguaFrancaParser.T__8) | (1 << LinguaFrancaParser.T__9) | (1 << LinguaFrancaParser.T__10) | (1 << LinguaFrancaParser.T__11) | (1 << LinguaFrancaParser.T__12) | (1 << LinguaFrancaParser.T__13) | (1 << LinguaFrancaParser.T__14) | (1 << LinguaFrancaParser.T__15) | (1 << LinguaFrancaParser.T__16) | (1 << LinguaFrancaParser.T__17) | (1 << LinguaFrancaParser.T__18) | (1 << LinguaFrancaParser.T__19) | (1 << LinguaFrancaParser.T__20) | (1 << LinguaFrancaParser.T__21) | (1 << LinguaFrancaParser.T__22) | (1 << LinguaFrancaParser.T__23) | (1 << LinguaFrancaParser.T__24) | (1 << LinguaFrancaParser.T__25) | (1 << LinguaFrancaParser.T__26) | (1 << LinguaFrancaParser.T__27) | (1 << LinguaFrancaParser.T__28) | (1 << LinguaFrancaParser.T__29) | (1 << LinguaFrancaParser.T__30) | (1 << LinguaFrancaParser.T__31) | (1 << LinguaFrancaParser.T__32) | (1 << LinguaFrancaParser.T__33) | (1 << LinguaFrancaParser.T__34) | (1 << LinguaFrancaParser.T__35) | (1 << LinguaFrancaParser.T__36) | (1 << LinguaFrancaParser.T__37) | (1 << LinguaFrancaParser.T__38) | (1 << LinguaFrancaParser.T__39) | (1 << LinguaFrancaParser.T__40) | (1 << LinguaFrancaParser.T__41) | (1 << LinguaFrancaParser.T__42) | (1 << LinguaFrancaParser.T__43) | (1 << LinguaFrancaParser.T__44) | (1 << LinguaFrancaParser.T__45) | (1 << LinguaFrancaParser.T__46) | (1 << LinguaFrancaParser.T__47) | (1 << LinguaFrancaParser.T__48) | (1 << LinguaFrancaParser.T__49) | (1 << LinguaFrancaParser.T__50) | (1 << LinguaFrancaParser.T__51) | (1 << LinguaFrancaParser.T__52) | (1 << LinguaFrancaParser.T__53) | (1 << LinguaFrancaParser.T__54) | (1 << LinguaFrancaParser.T__55) | (1 << LinguaFrancaParser.COMMA) | (1 << LinguaFrancaParser.Boolean) | (1 << LinguaFrancaParser.DottedName) | (1 << LinguaFrancaParser.WS) | (1 << LinguaFrancaParser.TRUE) | (1 << LinguaFrancaParser.FALSE) | (1 << LinguaFrancaParser.ID))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (LinguaFrancaParser.INT - 64)) | (1 << (LinguaFrancaParser.NEGINT - 64)) | (1 << (LinguaFrancaParser.FLOAT_EXP_SUFFIX - 64)) | (1 << (LinguaFrancaParser.SL_COMMENT - 64)) | (1 << (LinguaFrancaParser.ML_COMMENT - 64)) | (1 << (LinguaFrancaParser.LT_ANNOT - 64)) | (1 << (LinguaFrancaParser.STRING - 64)) | (1 << (LinguaFrancaParser.CHAR_LIT - 64)) | (1 << (LinguaFrancaParser.ANY_OTHER - 64)) | (1 << (LinguaFrancaParser.Kebab - 64)) | (1 << (LinguaFrancaParser.IPV4Addr - 64)) | (1 << (LinguaFrancaParser.HEXDIG - 64)) | (1 << (LinguaFrancaParser.H16 - 64)) | (1 << (LinguaFrancaParser.LS32 - 64)) | (1 << (LinguaFrancaParser.IPV6Addr - 64)) | (1 << (LinguaFrancaParser.SignedFloat - 64)) | (1 << (LinguaFrancaParser.FileName - 64)) | (1 << (LinguaFrancaParser.Path - 64)) | (1 << (LinguaFrancaParser.TimeUnit - 64)) | (1 << (LinguaFrancaParser.OPEN_CLOSE_SQ_BR - 64)) | (1 << (LinguaFrancaParser.SC_MARK - 64)) | (1 << (LinguaFrancaParser.Token - 64)))) != 0):
                self.state = 879
                _la = self._input.LA(1)
                if _la <= 0 or _la==LinguaFrancaParser.EC_MARK:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 885
            self.match(LinguaFrancaParser.EC_MARK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActionOriginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_actionOrigin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActionOrigin" ):
                listener.enterActionOrigin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActionOrigin" ):
                listener.exitActionOrigin(self)




    def actionOrigin(self):

        localctx = LinguaFrancaParser.ActionOriginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_actionOrigin)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            _la = self._input.LA(1)
            if not(_la==LinguaFrancaParser.T__49 or _la==LinguaFrancaParser.T__50):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)




    def visibility(self):

        localctx = LinguaFrancaParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            _la = self._input.LA(1)
            if not(_la==LinguaFrancaParser.T__51 or _la==LinguaFrancaParser.T__52):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltinTriggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_builtinTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltinTrigger" ):
                listener.enterBuiltinTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltinTrigger" ):
                listener.exitBuiltinTrigger(self)




    def builtinTrigger(self):

        localctx = LinguaFrancaParser.BuiltinTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_builtinTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << LinguaFrancaParser.T__15) | (1 << LinguaFrancaParser.T__53) | (1 << LinguaFrancaParser.T__54))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModeTransitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LinguaFrancaParser.RULE_modeTransition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModeTransition" ):
                listener.enterModeTransition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModeTransition" ):
                listener.exitModeTransition(self)




    def modeTransition(self):

        localctx = LinguaFrancaParser.ModeTransitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_modeTransition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            _la = self._input.LA(1)
            if not(_la==LinguaFrancaParser.T__15 or _la==LinguaFrancaParser.T__55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





