/*
 * generated by Xtext 2.28.0
 */
grammar DebugInternalLF;

// Rule Model
ruleModel:
	ruleTargetDecl
	ruleImport
	*
	rulePreamble
	*
	ruleReactor
	+
;

// Rule Import
ruleImport:
	'import'
	ruleImportedReactor
	(
		','
		ruleImportedReactor
	)*
	'from'
	RULE_STRING
	';'?
;

// Rule ImportedReactor
ruleImportedReactor:
	RULE_ID
	(
		'as'
		RULE_ID
	)?
;

// Rule Reactor
ruleReactor:
	ruleAttribute
	*
	((
		'federated'
		    |
		'main'
	)?
	    |
	'realtime'
	?
	)*
	'reactor'
	RULE_ID
	?
	(
		'<'
		ruleTypeParm
		(
			','
			ruleTypeParm
		)*
		'>'
	)?
	(
		'('
		ruleParameter
		(
			','
			ruleParameter
		)*
		')'
	)?
	(
		'at'
		ruleHost
	)?
	(
		'extends'
		RULE_ID
		(
			','
			RULE_ID
		)*
	)?
	'{'
	(
		rulePreamble
		    |
		ruleStateVar
		    |
		ruleMethod
		    |
		ruleInput
		    |
		ruleOutput
		    |
		ruleTimer
		    |
		ruleAction
		    |
		ruleInstantiation
		    |
		ruleConnection
		    |
		ruleReaction
		    |
		ruleMode
	)*
	'}'
;

// Rule TypeParm
ruleTypeParm:
	(
		ruleTypeExpr
		    |
		ruleCode
	)
;

// Rule TypeExpr
ruleTypeExpr:
	RULE_ID+
;

// Rule TargetDecl
ruleTargetDecl:
	'target'
	RULE_ID
	ruleKeyValuePairs
	?
	';'?
;

// Rule StateVar
ruleStateVar:
	ruleAttribute
	*
	'reset'
	?
	'state'
	RULE_ID
	(
		':'
		ruleType
	)?
	(
		'('
		(
			ruleExpression
			(
				','
				ruleExpression
			)*
		)?
		')'
		    |
		'{'
		(
			ruleExpression
			(
				','
				ruleExpression
			)*
		)?
		'}'
	)?
	';'?
;

// Rule Method
ruleMethod:
	'const'
	?
	'method'
	RULE_ID
	'('
	(
		ruleMethodArgument
		(
			','
			ruleMethodArgument
		)*
	)?
	')'
	(
		':'
		ruleType
	)?
	ruleCode
	';'?
;

// Rule MethodArgument
ruleMethodArgument:
	RULE_ID
	(
		':'
		ruleType
	)?
;

// Rule Input
ruleInput:
	ruleAttribute
	*
	'mutable'
	?
	'input'
	ruleWidthSpec
	?
	RULE_ID
	(
		':'
		ruleType
	)?
	';'?
;

// Rule Output
ruleOutput:
	ruleAttribute
	*
	'output'
	ruleWidthSpec
	?
	RULE_ID
	(
		':'
		ruleType
	)?
	';'?
;

// Rule Timer
ruleTimer:
	ruleAttribute
	*
	'timer'
	RULE_ID
	(
		'('
		ruleExpression
		(
			','
			ruleExpression
		)?
		')'
	)?
	';'?
;

// Rule Boolean
ruleBoolean:
	(
		RULE_TRUE
		    |
		RULE_FALSE
	)
;

// Rule Mode
ruleMode:
	'initial'
	?
	'mode'
	RULE_ID
	?
	'{'
	(
		ruleStateVar
		    |
		ruleTimer
		    |
		ruleAction
		    |
		ruleInstantiation
		    |
		ruleConnection
		    |
		ruleReaction
	)*
	'}'
;

// Rule Action
ruleAction:
	ruleAttribute
	*
	ruleActionOrigin
	?
	'action'
	RULE_ID
	(
		'('
		ruleExpression
		(
			','
			ruleExpression
			(
				','
				RULE_STRING
			)?
		)?
		')'
	)?
	(
		':'
		ruleType
	)?
	';'?
;

// Rule Reaction
ruleReaction:
	ruleAttribute
	*
	(
		'reaction'
		    |
		'mutation'
	)
	(
		'('
		(
			ruleTriggerRef
			(
				','
				ruleTriggerRef
			)*
		)?
		')'
	)?
	(
		ruleVarRef
		(
			','
			ruleVarRef
		)*
	)?
	(
		'->'
		ruleVarRefOrModeTransition
		(
			','
			ruleVarRefOrModeTransition
		)*
	)?
	ruleCode
	ruleSTP
	?
	ruleDeadline
	?
;

// Rule TriggerRef
ruleTriggerRef:
	(
		ruleBuiltinTriggerRef
		    |
		ruleVarRef
	)
;

// Rule BuiltinTriggerRef
ruleBuiltinTriggerRef:
	ruleBuiltinTrigger
;

// Rule Deadline
ruleDeadline:
	'deadline'
	'('
	ruleExpression
	')'
	ruleCode
;

// Rule STP
ruleSTP:
	'STP'
	'('
	ruleExpression
	')'
	ruleCode
;

// Rule Preamble
rulePreamble:
	ruleVisibility
	?
	'preamble'
	ruleCode
;

// Rule Instantiation
ruleInstantiation:
	RULE_ID
	'='
	'new'
	ruleWidthSpec
	?
	RULE_ID
	(
		'<'
		ruleTypeParm
		(
			','
			ruleTypeParm
		)*
		'>'
	)?
	'('
	(
		ruleAssignment
		(
			','
			ruleAssignment
		)*
	)?
	')'
	(
		'at'
		ruleHost
		';'
		    |
		';'?
	)
;

// Rule Connection
ruleConnection:
	(
		ruleVarRef
		(
			','
			ruleVarRef
		)*
		    |
		'('
		ruleVarRef
		(
			','
			ruleVarRef
		)*
		')'
		'+'
		?
	)
	(
		'->'
		    |
		'~>'
	)
	ruleVarRef
	(
		','
		ruleVarRef
	)*
	(
		'after'
		ruleExpression
	)?
	ruleSerializer
	?
	';'?
;

// Rule Serializer
ruleSerializer:
	'serializer'
	RULE_STRING
;

// Rule Attribute
ruleAttribute:
	'@'
	RULE_ID
	(
		'('
		(
			ruleAttrParm
			(
				','
				ruleAttrParm
			)*
			','?
		)?
		')'
	)?
;

// Rule AttrParm
ruleAttrParm:
	(
		RULE_ID
		'='
	)?
	ruleAttrParmValue
;

// Rule AttrParmValue
ruleAttrParmValue:
	(
		RULE_STRING
		    |
		ruleSignedInt
		    |
		ruleBoolean
		    |
		ruleSignedFloat
	)
;

// Rule KeyValuePairs
ruleKeyValuePairs:
	'{'
	(
		ruleKeyValuePair
		(
			','
			ruleKeyValuePair
		)*
		','?
	)?
	'}'
;

// Rule KeyValuePair
ruleKeyValuePair:
	ruleKebab
	':'
	ruleElement
;

// Rule Array
ruleArray:
	'['
	ruleElement
	(
		','
		ruleElement
	)*
	','?
	']'
;

// Rule Element
ruleElement:
	(
		ruleKeyValuePairs
		    |
		ruleArray
		    |
		ruleLiteral
		    |
		RULE_INT
		ruleTimeUnit
		    |
		rulePath
	)
;

// Rule TypedVariable
ruleTypedVariable:
	(
		rulePort
		    |
		ruleAction
	)
;

// Rule VarRef
ruleVarRef:
	(
		RULE_ID
		    |
		RULE_ID
		'.'
		RULE_ID
		    |
		'interleaved'
		'('
		(
			RULE_ID
			    |
			RULE_ID
			'.'
			RULE_ID
		)
		')'
	)
;

// Rule VarRefOrModeTransition
ruleVarRefOrModeTransition:
	(
		ruleVarRef
		    |
		ruleModeTransition
		'('
		RULE_ID
		')'
	)
;

// Rule Assignment
ruleAssignment:
	RULE_ID
	(
		'='
		ruleExpression
		    |
		'='
		?
		(
			'('
			(
				ruleExpression
				(
					','
					ruleExpression
				)*
			)?
			')'
			    |
			'{'
			(
				ruleExpression
				(
					','
					ruleExpression
				)*
			)?
			'}'
		)
	)
;

// Rule Parameter
ruleParameter:
	ruleAttribute
	*
	RULE_ID
	(
		':'
		ruleType
	)?
	(
		'('
		(
			ruleExpression
			(
				','
				ruleExpression
			)*
		)?
		')'
		    |
		'{'
		(
			ruleExpression
			(
				','
				ruleExpression
			)*
		)?
		'}'
	)?
;

// Rule Expression
ruleExpression:
	(
		ruleLiteral
		    |
		ruleTime
		    |
		ruleParameterReference
		    |
		ruleCode
	)
;

// Rule ParameterReference
ruleParameterReference:
	RULE_ID
;

// Rule Time
ruleTime:
	RULE_INT
	ruleTimeUnit
;

// Rule Port
rulePort:
	(
		ruleInput
		    |
		ruleOutput
	)
;

// Rule Type
ruleType:
	(
		'time'
		ruleArraySpec
		?
		    |
		ruleDottedName
		(
			'<'
			ruleType
			(
				','
				ruleType
			)*
			'>'
		)?
		'*'
		*
		ruleArraySpec
		?
		    |
		ruleCode
	)
;

// Rule ArraySpec
ruleArraySpec:
	'['
	(
		']'
		    |
		RULE_INT
		']'
	)
;

// Rule WidthSpec
ruleWidthSpec:
	'['
	(
		']'
		    |
		ruleWidthTerm
		(
			'+'
			ruleWidthTerm
		)*
		']'
	)
;

// Rule WidthTerm
ruleWidthTerm:
	(
		RULE_INT
		    |
		RULE_ID
		    |
		'widthof('
		ruleVarRef
		')'
		    |
		ruleCode
	)
;

// Rule IPV4Host
ruleIPV4Host:
	(
		ruleKebab
		'@'
	)?
	ruleIPV4Addr
	(
		':'
		RULE_INT
	)?
;

// Rule IPV6Host
ruleIPV6Host:
	'['
	(
		ruleKebab
		'@'
	)?
	ruleIPV6Addr
	']'
	(
		':'
		RULE_INT
	)?
;

// Rule NamedHost
ruleNamedHost:
	(
		ruleKebab
		'@'
	)?
	ruleHostName
	(
		':'
		RULE_INT
	)?
;

// Rule Host
ruleHost:
	(
		ruleIPV4Host
		    |
		ruleIPV6Host
		    |
		ruleNamedHost
	)
;

// Rule HostName
ruleHostName:
	ruleKebab
	(
		'.'
		ruleKebab
	)*
;

// Rule DottedName
ruleDottedName:
	RULE_ID
	(
		(
			'.'
			    |
			'::'
		)
		RULE_ID
	)*
;

// Rule SignedInt
ruleSignedInt:
	(
		RULE_INT
		    |
		RULE_NEGINT
	)
;

// Rule Literal
ruleLiteral:
	(
		RULE_STRING
		    |
		RULE_CHAR_LIT
		    |
		ruleSignedFloat
		    |
		ruleSignedInt
		    |
		ruleBoolean
	)
;

// Rule Kebab
ruleKebab:
	(
		RULE_ID
		    |
		'physical'
	)
	(
		'-'
		RULE_ID
	)*
;

// Rule IPV4Addr
ruleIPV4Addr:
	RULE_INT
	'.'
	RULE_INT
	'.'
	RULE_INT
	'.'
	RULE_INT
;

// Rule IPV6Seg
ruleIPV6Seg:
	(
		RULE_INT
		    |
		RULE_INT?
		RULE_ID
	)
;

// Rule IPV6Addr
ruleIPV6Addr:
	(
		'::'
		    |
		'::'
		(
			ruleIPV6Seg
			':'
		)*
		ruleIPV6Seg
		    |
		(
			ruleIPV6Seg
			(
				':'
				    |
				'::'
			)
		)+
		ruleIPV6Seg?
		    |
		RULE_ID
		'::'
		ruleIPV6Seg
		(
			':'
			ruleIPV6Seg
		)*
		'%'
		(
			RULE_INT
			    |
			RULE_ID
		)+
		    |
		'::'
		ruleIPV4Addr
		    |
		'::'
		RULE_ID
		':'
		(
			RULE_INT
			':'
		)?
		ruleIPV4Addr
		    |
		(
			ruleIPV6Seg
			(
				':'
				ruleIPV6Seg
			)*
			'::'
			    |
			ruleIPV6Seg
			(
				':'
				ruleIPV6Seg
			)*
			':'
		)
		ruleIPV4Addr
	)
;

// Rule SignedFloat
ruleSignedFloat:
	(
		ruleSignedInt
		    |
		'-'
	)?
	'.'
	(
		RULE_INT
		    |
		RULE_FLOAT_EXP_SUFFIX
	)
;

// Rule Code
ruleCode:
	'{='
	ruleBody
	'=}'
;

// Rule FSName
ruleFSName:
	(
		RULE_ID
		    |
		'.'
		    |
		'_'
	)+
;

// Rule Path
rulePath:
	(
		ruleFSName
		':\\'
	)?
	(
		'\\'
		    |
		'/'
	)?
	ruleFSName
	(
		(
			'\\'
			    |
			'/'
		)
		ruleFSName
	)*
;

// Rule TimeUnit
ruleTimeUnit:
	RULE_ID
;

// Rule Body
ruleBody:
	ruleToken*
;

// Rule Token
ruleToken:
	(
		RULE_ID
		    |
		RULE_INT
		    |
		RULE_FLOAT_EXP_SUFFIX
		    |
		RULE_LT_ANNOT
		    |
		RULE_STRING
		    |
		RULE_CHAR_LIT
		    |
		RULE_ML_COMMENT
		    |
		RULE_SL_COMMENT
		    |
		RULE_WS
		    |
		RULE_ANY_OTHER
		    |
		'target'
		    |
		'import'
		    |
		'main'
		    |
		'realtime'
		    |
		'reactor'
		    |
		'state'
		    |
		'time'
		    |
		'mutable'
		    |
		'input'
		    |
		'output'
		    |
		'timer'
		    |
		'action'
		    |
		'reaction'
		    |
		'startup'
		    |
		'shutdown'
		    |
		'after'
		    |
		'deadline'
		    |
		'mutation'
		    |
		'preamble'
		    |
		'new'
		    |
		'federated'
		    |
		'at'
		    |
		'as'
		    |
		'from'
		    |
		'widthof'
		    |
		'const'
		    |
		'method'
		    |
		'interleaved'
		    |
		'mode'
		    |
		'initial'
		    |
		'reset'
		    |
		'history'
		    |
		RULE_NEGINT
		    |
		RULE_TRUE
		    |
		RULE_FALSE
		    |
		'logical'
		    |
		'physical'
		    |
		'private'
		    |
		'public'
		    |
		'('
		    |
		')'
		    |
		'{'
		    |
		'}'
		    |
		'['
		    |
		']'
		    |
		'<'
		    |
		'>'
		    |
		':'
		    |
		';'
		    |
		','
		    |
		'.'
		    |
		'::'
		    |
		':\\'
		    |
		'\\'
		    |
		'+'
		    |
		'-'
		    |
		'*'
		    |
		'/'
		    |
		'_'
		    |
		'->'
		    |
		'='
		    |
		'%'
		    |
		'@'
		    |
		'\''
	)
;

// Rule ActionOrigin
ruleActionOrigin:
	(
		'NONE'
		    |
		'logical'
		    |
		'physical'
	)
;

// Rule Visibility
ruleVisibility:
	(
		'NONE'
		    |
		'private'
		    |
		'public'
	)
;

// Rule BuiltinTrigger
ruleBuiltinTrigger:
	(
		'startup'
		    |
		'shutdown'
		    |
		'reset'
	)
;

// Rule ModeTransition
ruleModeTransition:
	(
		'reset'
		    |
		'history'
	)
;

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

RULE_TRUE : ('true'|'True');

RULE_FALSE : ('false'|'False');

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_NEGINT : '-' ('0'..'9')+;

RULE_FLOAT_EXP_SUFFIX : RULE_INT ('e'|'E') ('+'|'-')? RULE_INT;

RULE_SL_COMMENT : ('//'|'#') ~(('\n'|'\r'))* ('\r'? '\n')? {skip();};

RULE_ML_COMMENT : ('/*' ( options {greedy=false;} : . )*'*/'|'\'\'\'' ( options {greedy=false;} : . )*'\'\'\'') {skip();};

RULE_LT_ANNOT : '\'' RULE_ID?;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"'|'\t'|'\r'|'\n')))* '"'|'"""' ( options {greedy=false;} : . )*'"""');

RULE_CHAR_LIT : '\'' ('\\' .|~(('\\'|'\''|'\t'|'\r'|'\n'))) '\'';

RULE_ANY_OTHER : .;
