/*
 * generated by Xtext 2.28.0
 */
grammar InternalLF;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.lflang.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.lflang.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.lflang.services.LFGrammarAccess;

}

@parser::members {

 	private LFGrammarAccess grammarAccess;

    public InternalLFParser(TokenStream input, LFGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected LFGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTargetTargetDeclParserRuleCall_0_0());
				}
				lv_target_0_0=ruleTargetDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"target",
						lv_target_0_0,
						"org.lflang.LF.TargetDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_1_0());
				}
				lv_imports_1_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"imports",
						lv_imports_1_0,
						"org.lflang.LF.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getPreamblesPreambleParserRuleCall_2_0());
				}
				lv_preambles_2_0=rulePreamble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"preambles",
						lv_preambles_2_0,
						"org.lflang.LF.Preamble");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getReactorsReactorParserRuleCall_3_0());
				}
				lv_reactors_3_0=ruleReactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"reactors",
						lv_reactors_3_0,
						"org.lflang.LF.Reactor");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getReactorClassesImportedReactorParserRuleCall_1_0());
				}
				lv_reactorClasses_1_0=ruleImportedReactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					add(
						$current,
						"reactorClasses",
						lv_reactorClasses_1_0,
						"org.lflang.LF.ImportedReactor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getImportAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImportAccess().getReactorClassesImportedReactorParserRuleCall_2_1_0());
					}
					lv_reactorClasses_3_0=ruleImportedReactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportRule());
						}
						add(
							$current,
							"reactorClasses",
							lv_reactorClasses_3_0,
							"org.lflang.LF.ImportedReactor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='from'
		{
			newLeafNode(otherlv_4, grammarAccess.getImportAccess().getFromKeyword_3());
		}
		(
			(
				lv_importURI_5_0=RULE_STRING
				{
					newLeafNode(lv_importURI_5_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_5_0,
						"org.lflang.LF.STRING");
				}
			)
		)
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getImportAccess().getSemicolonKeyword_5());
			}
		)?
	)
;

// Entry rule entryRuleImportedReactor
entryRuleImportedReactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportedReactorRule()); }
	iv_ruleImportedReactor=ruleImportedReactor
	{ $current=$iv_ruleImportedReactor.current; }
	EOF;

// Rule ImportedReactor
ruleImportedReactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportedReactorRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getImportedReactorAccess().getReactorClassReactorCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='as'
			{
				newLeafNode(otherlv_1, grammarAccess.getImportedReactorAccess().getAsKeyword_1_0());
			}
			(
				(
					lv_name_2_0=RULE_ID
					{
						newLeafNode(lv_name_2_0, grammarAccess.getImportedReactorAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportedReactorRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"org.lflang.LF.ID");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleReactor
entryRuleReactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReactorRule()); }
	iv_ruleReactor=ruleReactor
	{ $current=$iv_ruleReactor.current; }
	EOF;

// Rule Reactor
ruleReactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReactorAccess().getReactorAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getReactorAccess().getAttributesAttributeParserRuleCall_1_0());
				}
				lv_attributes_1_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReactorRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_1_0,
						"org.lflang.LF.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getReactorAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getReactorAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getReactorAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>((
									(
										lv_federated_3_0='federated'
										{
											newLeafNode(lv_federated_3_0, grammarAccess.getReactorAccess().getFederatedFederatedKeyword_2_0_0_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getReactorRule());
											}
											setWithLastConsumed($current, "federated", lv_federated_3_0 != null, "federated");
										}
									)
								)
								    |
								(
									(
										lv_main_4_0='main'
										{
											newLeafNode(lv_main_4_0, grammarAccess.getReactorAccess().getMainMainKeyword_2_0_1_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getReactorRule());
											}
											setWithLastConsumed($current, "main", lv_main_4_0 != null, "main");
										}
									)
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReactorAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getReactorAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getReactorAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>((
									lv_realtime_5_0='realtime'
									{
										newLeafNode(lv_realtime_5_0, grammarAccess.getReactorAccess().getRealtimeRealtimeKeyword_2_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getReactorRule());
										}
										setWithLastConsumed($current, "realtime", lv_realtime_5_0 != null, "realtime");
									}
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReactorAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getReactorAccess().getUnorderedGroup_2());
				}
		)
		otherlv_6='reactor'
		{
			newLeafNode(otherlv_6, grammarAccess.getReactorAccess().getReactorKeyword_3());
		}
		(
			(
				lv_name_7_0=RULE_ID
				{
					newLeafNode(lv_name_7_0, grammarAccess.getReactorAccess().getNameIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReactorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_7_0,
						"org.lflang.LF.ID");
				}
			)
		)?
		(
			otherlv_8='<'
			{
				newLeafNode(otherlv_8, grammarAccess.getReactorAccess().getLessThanSignKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReactorAccess().getTypeParmsTypeParmParserRuleCall_5_1_0());
					}
					lv_typeParms_9_0=ruleTypeParm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactorRule());
						}
						add(
							$current,
							"typeParms",
							lv_typeParms_9_0,
							"org.lflang.LF.TypeParm");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_10=','
				{
					newLeafNode(otherlv_10, grammarAccess.getReactorAccess().getCommaKeyword_5_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getReactorAccess().getTypeParmsTypeParmParserRuleCall_5_2_1_0());
						}
						lv_typeParms_11_0=ruleTypeParm
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getReactorRule());
							}
							add(
								$current,
								"typeParms",
								lv_typeParms_11_0,
								"org.lflang.LF.TypeParm");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_12='>'
			{
				newLeafNode(otherlv_12, grammarAccess.getReactorAccess().getGreaterThanSignKeyword_5_3());
			}
		)?
		(
			otherlv_13='('
			{
				newLeafNode(otherlv_13, grammarAccess.getReactorAccess().getLeftParenthesisKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReactorAccess().getParametersParameterParserRuleCall_6_1_0());
					}
					lv_parameters_14_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactorRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_14_0,
							"org.lflang.LF.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_15=','
				{
					newLeafNode(otherlv_15, grammarAccess.getReactorAccess().getCommaKeyword_6_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getReactorAccess().getParametersParameterParserRuleCall_6_2_1_0());
						}
						lv_parameters_16_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getReactorRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_16_0,
								"org.lflang.LF.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_17=')'
			{
				newLeafNode(otherlv_17, grammarAccess.getReactorAccess().getRightParenthesisKeyword_6_3());
			}
		)?
		(
			otherlv_18='at'
			{
				newLeafNode(otherlv_18, grammarAccess.getReactorAccess().getAtKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReactorAccess().getHostHostParserRuleCall_7_1_0());
					}
					lv_host_19_0=ruleHost
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactorRule());
						}
						set(
							$current,
							"host",
							lv_host_19_0,
							"org.lflang.LF.Host");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_20='extends'
			{
				newLeafNode(otherlv_20, grammarAccess.getReactorAccess().getExtendsKeyword_8_0());
			}
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getReactorRule());
							}
						}
						otherlv_21=RULE_ID
						{
							newLeafNode(otherlv_21, grammarAccess.getReactorAccess().getSuperClassesReactorDeclCrossReference_8_1_0_0());
						}
					)
				)
				(
					otherlv_22=','
					{
						newLeafNode(otherlv_22, grammarAccess.getReactorAccess().getCommaKeyword_8_1_1_0());
					}
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getReactorRule());
								}
							}
							otherlv_23=RULE_ID
							{
								newLeafNode(otherlv_23, grammarAccess.getReactorAccess().getSuperClassesReactorDeclCrossReference_8_1_1_1_0());
							}
						)
					)
				)*
			)
		)?
		otherlv_24='{'
		{
			newLeafNode(otherlv_24, grammarAccess.getReactorAccess().getLeftCurlyBracketKeyword_9());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getReactorAccess().getPreamblesPreambleParserRuleCall_10_0_0());
					}
					lv_preambles_25_0=rulePreamble
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactorRule());
						}
						add(
							$current,
							"preambles",
							lv_preambles_25_0,
							"org.lflang.LF.Preamble");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReactorAccess().getStateVarsStateVarParserRuleCall_10_1_0());
					}
					lv_stateVars_26_0=ruleStateVar
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactorRule());
						}
						add(
							$current,
							"stateVars",
							lv_stateVars_26_0,
							"org.lflang.LF.StateVar");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReactorAccess().getMethodsMethodParserRuleCall_10_2_0());
					}
					lv_methods_27_0=ruleMethod
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactorRule());
						}
						add(
							$current,
							"methods",
							lv_methods_27_0,
							"org.lflang.LF.Method");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReactorAccess().getInputsInputParserRuleCall_10_3_0());
					}
					lv_inputs_28_0=ruleInput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactorRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_28_0,
							"org.lflang.LF.Input");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReactorAccess().getOutputsOutputParserRuleCall_10_4_0());
					}
					lv_outputs_29_0=ruleOutput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactorRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_29_0,
							"org.lflang.LF.Output");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReactorAccess().getTimersTimerParserRuleCall_10_5_0());
					}
					lv_timers_30_0=ruleTimer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactorRule());
						}
						add(
							$current,
							"timers",
							lv_timers_30_0,
							"org.lflang.LF.Timer");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReactorAccess().getActionsActionParserRuleCall_10_6_0());
					}
					lv_actions_31_0=ruleAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactorRule());
						}
						add(
							$current,
							"actions",
							lv_actions_31_0,
							"org.lflang.LF.Action");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReactorAccess().getInstantiationsInstantiationParserRuleCall_10_7_0());
					}
					lv_instantiations_32_0=ruleInstantiation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactorRule());
						}
						add(
							$current,
							"instantiations",
							lv_instantiations_32_0,
							"org.lflang.LF.Instantiation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReactorAccess().getConnectionsConnectionParserRuleCall_10_8_0());
					}
					lv_connections_33_0=ruleConnection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactorRule());
						}
						add(
							$current,
							"connections",
							lv_connections_33_0,
							"org.lflang.LF.Connection");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReactorAccess().getReactionsReactionParserRuleCall_10_9_0());
					}
					lv_reactions_34_0=ruleReaction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactorRule());
						}
						add(
							$current,
							"reactions",
							lv_reactions_34_0,
							"org.lflang.LF.Reaction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getReactorAccess().getModesModeParserRuleCall_10_10_0());
					}
					lv_modes_35_0=ruleMode
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactorRule());
						}
						add(
							$current,
							"modes",
							lv_modes_35_0,
							"org.lflang.LF.Mode");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_36='}'
		{
			newLeafNode(otherlv_36, grammarAccess.getReactorAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleTypeParm
entryRuleTypeParm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeParmRule()); }
	iv_ruleTypeParm=ruleTypeParm
	{ $current=$iv_ruleTypeParm.current; }
	EOF;

// Rule TypeParm
ruleTypeParm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeParmAccess().getLiteralTypeExprParserRuleCall_0_0());
				}
				lv_literal_0_0=ruleTypeExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeParmRule());
					}
					set(
						$current,
						"literal",
						lv_literal_0_0,
						"org.lflang.LF.TypeExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeParmAccess().getCodeCodeParserRuleCall_1_0());
				}
				lv_code_1_0=ruleCode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeParmRule());
					}
					set(
						$current,
						"code",
						lv_code_1_0,
						"org.lflang.LF.Code");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypeExpr
entryRuleTypeExpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeExprRule()); }
	iv_ruleTypeExpr=ruleTypeExpr
	{ $current=$iv_ruleTypeExpr.current.getText(); }
	EOF;

// Rule TypeExpr
ruleTypeExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getTypeExprAccess().getIDTerminalRuleCall());
		}
	)+
;

// Entry rule entryRuleTargetDecl
entryRuleTargetDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTargetDeclRule()); }
	iv_ruleTargetDecl=ruleTargetDecl
	{ $current=$iv_ruleTargetDecl.current; }
	EOF;

// Rule TargetDecl
ruleTargetDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='target'
		{
			newLeafNode(otherlv_0, grammarAccess.getTargetDeclAccess().getTargetKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTargetDeclAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTargetDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.lflang.LF.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTargetDeclAccess().getConfigKeyValuePairsParserRuleCall_2_0());
				}
				lv_config_2_0=ruleKeyValuePairs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTargetDeclRule());
					}
					set(
						$current,
						"config",
						lv_config_2_0,
						"org.lflang.LF.KeyValuePairs");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getTargetDeclAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleStateVar
entryRuleStateVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateVarRule()); }
	iv_ruleStateVar=ruleStateVar
	{ $current=$iv_ruleStateVar.current; }
	EOF;

// Rule StateVar
ruleStateVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStateVarAccess().getAttributesAttributeParserRuleCall_0_0());
				}
				lv_attributes_0_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateVarRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_0_0,
						"org.lflang.LF.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				lv_reset_1_0='reset'
				{
					newLeafNode(lv_reset_1_0, grammarAccess.getStateVarAccess().getResetResetKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateVarRule());
					}
					setWithLastConsumed($current, "reset", lv_reset_1_0 != null, "reset");
				}
			)
		)?
		otherlv_2='state'
		{
			newLeafNode(otherlv_2, grammarAccess.getStateVarAccess().getStateKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getStateVarAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateVarRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.lflang.LF.ID");
				}
			)
		)
		(
			(
				otherlv_4=':'
				{
					newLeafNode(otherlv_4, grammarAccess.getStateVarAccess().getColonKeyword_4_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStateVarAccess().getTypeTypeParserRuleCall_4_0_1_0());
						}
						lv_type_5_0=ruleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStateVarRule());
							}
							set(
								$current,
								"type",
								lv_type_5_0,
								"org.lflang.LF.Type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			(
				(
					(
						(
							lv_parens_6_0='('
							{
								newLeafNode(lv_parens_6_0, grammarAccess.getStateVarAccess().getParensLeftParenthesisKeyword_4_1_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getStateVarRule());
								}
								addWithLastConsumed($current, "parens", lv_parens_6_0, "(");
							}
						)
					)
					(
						(
							(
								{
									newCompositeNode(grammarAccess.getStateVarAccess().getInitExpressionParserRuleCall_4_1_0_1_0_0());
								}
								lv_init_7_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getStateVarRule());
									}
									add(
										$current,
										"init",
										lv_init_7_0,
										"org.lflang.LF.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
						(
							otherlv_8=','
							{
								newLeafNode(otherlv_8, grammarAccess.getStateVarAccess().getCommaKeyword_4_1_0_1_1_0());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getStateVarAccess().getInitExpressionParserRuleCall_4_1_0_1_1_1_0());
									}
									lv_init_9_0=ruleExpression
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getStateVarRule());
										}
										add(
											$current,
											"init",
											lv_init_9_0,
											"org.lflang.LF.Expression");
										afterParserOrEnumRuleCall();
									}
								)
							)
						)*
					)?
					(
						(
							lv_parens_10_0=')'
							{
								newLeafNode(lv_parens_10_0, grammarAccess.getStateVarAccess().getParensRightParenthesisKeyword_4_1_0_2_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getStateVarRule());
								}
								addWithLastConsumed($current, "parens", lv_parens_10_0, ")");
							}
						)
					)
				)
				    |
				(
					(
						(
							lv_braces_11_0='{'
							{
								newLeafNode(lv_braces_11_0, grammarAccess.getStateVarAccess().getBracesLeftCurlyBracketKeyword_4_1_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getStateVarRule());
								}
								addWithLastConsumed($current, "braces", lv_braces_11_0, "{");
							}
						)
					)
					(
						(
							(
								{
									newCompositeNode(grammarAccess.getStateVarAccess().getInitExpressionParserRuleCall_4_1_1_1_0_0());
								}
								lv_init_12_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getStateVarRule());
									}
									add(
										$current,
										"init",
										lv_init_12_0,
										"org.lflang.LF.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
						(
							otherlv_13=','
							{
								newLeafNode(otherlv_13, grammarAccess.getStateVarAccess().getCommaKeyword_4_1_1_1_1_0());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getStateVarAccess().getInitExpressionParserRuleCall_4_1_1_1_1_1_0());
									}
									lv_init_14_0=ruleExpression
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getStateVarRule());
										}
										add(
											$current,
											"init",
											lv_init_14_0,
											"org.lflang.LF.Expression");
										afterParserOrEnumRuleCall();
									}
								)
							)
						)*
					)?
					(
						(
							lv_braces_15_0='}'
							{
								newLeafNode(lv_braces_15_0, grammarAccess.getStateVarAccess().getBracesRightCurlyBracketKeyword_4_1_1_2_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getStateVarRule());
								}
								addWithLastConsumed($current, "braces", lv_braces_15_0, "}");
							}
						)
					)
				)
			)?
		)
		(
			otherlv_16=';'
			{
				newLeafNode(otherlv_16, grammarAccess.getStateVarAccess().getSemicolonKeyword_5());
			}
		)?
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_const_0_0='const'
				{
					newLeafNode(lv_const_0_0, grammarAccess.getMethodAccess().getConstConstKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
					setWithLastConsumed($current, "const", lv_const_0_0 != null, "const");
				}
			)
		)?
		otherlv_1='method'
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodAccess().getMethodKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.lflang.LF.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getArgumentsMethodArgumentParserRuleCall_4_0_0());
					}
					lv_arguments_4_0=ruleMethodArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_4_0,
							"org.lflang.LF.MethodArgument");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodAccess().getArgumentsMethodArgumentParserRuleCall_4_1_1_0());
						}
						lv_arguments_6_0=ruleMethodArgument
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_6_0,
								"org.lflang.LF.MethodArgument");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getMethodAccess().getRightParenthesisKeyword_5());
		}
		(
			otherlv_8=':'
			{
				newLeafNode(otherlv_8, grammarAccess.getMethodAccess().getColonKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getReturnTypeParserRuleCall_6_1_0());
					}
					lv_return_9_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						set(
							$current,
							"return",
							lv_return_9_0,
							"org.lflang.LF.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getCodeCodeParserRuleCall_7_0());
				}
				lv_code_10_0=ruleCode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"code",
						lv_code_10_0,
						"org.lflang.LF.Code");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getMethodAccess().getSemicolonKeyword_8());
			}
		)?
	)
;

// Entry rule entryRuleMethodArgument
entryRuleMethodArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodArgumentRule()); }
	iv_ruleMethodArgument=ruleMethodArgument
	{ $current=$iv_ruleMethodArgument.current; }
	EOF;

// Rule MethodArgument
ruleMethodArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getMethodArgumentAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodArgumentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.lflang.LF.ID");
				}
			)
		)
		(
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getMethodArgumentAccess().getColonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodArgumentAccess().getTypeTypeParserRuleCall_1_1_0());
					}
					lv_type_2_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodArgumentRule());
						}
						set(
							$current,
							"type",
							lv_type_2_0,
							"org.lflang.LF.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current; }
	EOF;

// Rule Input
ruleInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInputAccess().getAttributesAttributeParserRuleCall_0_0());
				}
				lv_attributes_0_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_0_0,
						"org.lflang.LF.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				lv_mutable_1_0='mutable'
				{
					newLeafNode(lv_mutable_1_0, grammarAccess.getInputAccess().getMutableMutableKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputRule());
					}
					setWithLastConsumed($current, "mutable", lv_mutable_1_0 != null, "mutable");
				}
			)
		)?
		otherlv_2='input'
		{
			newLeafNode(otherlv_2, grammarAccess.getInputAccess().getInputKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInputAccess().getWidthSpecWidthSpecParserRuleCall_3_0());
				}
				lv_widthSpec_3_0=ruleWidthSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputRule());
					}
					set(
						$current,
						"widthSpec",
						lv_widthSpec_3_0,
						"org.lflang.LF.WidthSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getInputAccess().getNameIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.lflang.LF.ID");
				}
			)
		)
		(
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getInputAccess().getColonKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInputAccess().getTypeTypeParserRuleCall_5_1_0());
					}
					lv_type_6_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInputRule());
						}
						set(
							$current,
							"type",
							lv_type_6_0,
							"org.lflang.LF.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_7=';'
			{
				newLeafNode(otherlv_7, grammarAccess.getInputAccess().getSemicolonKeyword_6());
			}
		)?
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current; }
	EOF;

// Rule Output
ruleOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputAccess().getAttributesAttributeParserRuleCall_0_0());
				}
				lv_attributes_0_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_0_0,
						"org.lflang.LF.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1='output'
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getOutputKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputAccess().getWidthSpecWidthSpecParserRuleCall_2_0());
				}
				lv_widthSpec_2_0=ruleWidthSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputRule());
					}
					set(
						$current,
						"widthSpec",
						lv_widthSpec_2_0,
						"org.lflang.LF.WidthSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getOutputAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.lflang.LF.ID");
				}
			)
		)
		(
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getOutputAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOutputAccess().getTypeTypeParserRuleCall_4_1_0());
					}
					lv_type_5_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOutputRule());
						}
						set(
							$current,
							"type",
							lv_type_5_0,
							"org.lflang.LF.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getOutputAccess().getSemicolonKeyword_5());
			}
		)?
	)
;

// Entry rule entryRuleTimer
entryRuleTimer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimerRule()); }
	iv_ruleTimer=ruleTimer
	{ $current=$iv_ruleTimer.current; }
	EOF;

// Rule Timer
ruleTimer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTimerAccess().getAttributesAttributeParserRuleCall_0_0());
				}
				lv_attributes_0_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimerRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_0_0,
						"org.lflang.LF.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1='timer'
		{
			newLeafNode(otherlv_1, grammarAccess.getTimerAccess().getTimerKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getTimerAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.lflang.LF.ID");
				}
			)
		)
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getTimerAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTimerAccess().getOffsetExpressionParserRuleCall_3_1_0());
					}
					lv_offset_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTimerRule());
						}
						set(
							$current,
							"offset",
							lv_offset_4_0,
							"org.lflang.LF.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getTimerAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTimerAccess().getPeriodExpressionParserRuleCall_3_2_1_0());
						}
						lv_period_6_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTimerRule());
							}
							set(
								$current,
								"period",
								lv_period_6_0,
								"org.lflang.LF.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getTimerAccess().getRightParenthesisKeyword_3_3());
			}
		)?
		(
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getTimerAccess().getSemicolonKeyword_4());
			}
		)?
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current.getText(); }
	EOF;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_TRUE_0=RULE_TRUE
		{
			$current.merge(this_TRUE_0);
		}
		{
			newLeafNode(this_TRUE_0, grammarAccess.getBooleanAccess().getTRUETerminalRuleCall_0());
		}
		    |
		this_FALSE_1=RULE_FALSE
		{
			$current.merge(this_FALSE_1);
		}
		{
			newLeafNode(this_FALSE_1, grammarAccess.getBooleanAccess().getFALSETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleMode
entryRuleMode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModeRule()); }
	iv_ruleMode=ruleMode
	{ $current=$iv_ruleMode.current; }
	EOF;

// Rule Mode
ruleMode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModeAccess().getModeAction_0(),
					$current);
			}
		)
		(
			(
				lv_initial_1_0='initial'
				{
					newLeafNode(lv_initial_1_0, grammarAccess.getModeAccess().getInitialInitialKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModeRule());
					}
					setWithLastConsumed($current, "initial", lv_initial_1_0 != null, "initial");
				}
			)
		)?
		otherlv_2='mode'
		{
			newLeafNode(otherlv_2, grammarAccess.getModeAccess().getModeKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getModeAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.lflang.LF.ID");
				}
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getModeAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModeAccess().getStateVarsStateVarParserRuleCall_5_0_0());
					}
					lv_stateVars_5_0=ruleStateVar
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModeRule());
						}
						add(
							$current,
							"stateVars",
							lv_stateVars_5_0,
							"org.lflang.LF.StateVar");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getModeAccess().getTimersTimerParserRuleCall_5_1_0());
					}
					lv_timers_6_0=ruleTimer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModeRule());
						}
						add(
							$current,
							"timers",
							lv_timers_6_0,
							"org.lflang.LF.Timer");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getModeAccess().getActionsActionParserRuleCall_5_2_0());
					}
					lv_actions_7_0=ruleAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModeRule());
						}
						add(
							$current,
							"actions",
							lv_actions_7_0,
							"org.lflang.LF.Action");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getModeAccess().getInstantiationsInstantiationParserRuleCall_5_3_0());
					}
					lv_instantiations_8_0=ruleInstantiation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModeRule());
						}
						add(
							$current,
							"instantiations",
							lv_instantiations_8_0,
							"org.lflang.LF.Instantiation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getModeAccess().getConnectionsConnectionParserRuleCall_5_4_0());
					}
					lv_connections_9_0=ruleConnection
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModeRule());
						}
						add(
							$current,
							"connections",
							lv_connections_9_0,
							"org.lflang.LF.Connection");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getModeAccess().getReactionsReactionParserRuleCall_5_5_0());
					}
					lv_reactions_10_0=ruleReaction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModeRule());
						}
						add(
							$current,
							"reactions",
							lv_reactions_10_0,
							"org.lflang.LF.Reaction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getModeAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getAttributesAttributeParserRuleCall_0_0());
				}
				lv_attributes_0_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_0_0,
						"org.lflang.LF.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getOriginActionOriginEnumRuleCall_1_0());
				}
				lv_origin_1_0=ruleActionOrigin
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"origin",
						lv_origin_1_0,
						"org.lflang.LF.ActionOrigin");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2='action'
		{
			newLeafNode(otherlv_2, grammarAccess.getActionAccess().getActionKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getActionAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.lflang.LF.ID");
				}
			)
		)
		(
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getActionAccess().getLeftParenthesisKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getMinDelayExpressionParserRuleCall_4_1_0());
					}
					lv_minDelay_5_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						set(
							$current,
							"minDelay",
							lv_minDelay_5_0,
							"org.lflang.LF.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getActionAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getActionAccess().getMinSpacingExpressionParserRuleCall_4_2_1_0());
						}
						lv_minSpacing_7_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getActionRule());
							}
							set(
								$current,
								"minSpacing",
								lv_minSpacing_7_0,
								"org.lflang.LF.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_8=','
					{
						newLeafNode(otherlv_8, grammarAccess.getActionAccess().getCommaKeyword_4_2_2_0());
					}
					(
						(
							lv_policy_9_0=RULE_STRING
							{
								newLeafNode(lv_policy_9_0, grammarAccess.getActionAccess().getPolicySTRINGTerminalRuleCall_4_2_2_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getActionRule());
								}
								setWithLastConsumed(
									$current,
									"policy",
									lv_policy_9_0,
									"org.lflang.LF.STRING");
							}
						)
					)
				)?
			)?
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getActionAccess().getRightParenthesisKeyword_4_3());
			}
		)?
		(
			otherlv_11=':'
			{
				newLeafNode(otherlv_11, grammarAccess.getActionAccess().getColonKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getTypeTypeParserRuleCall_5_1_0());
					}
					lv_type_12_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						set(
							$current,
							"type",
							lv_type_12_0,
							"org.lflang.LF.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_13=';'
			{
				newLeafNode(otherlv_13, grammarAccess.getActionAccess().getSemicolonKeyword_6());
			}
		)?
	)
;

// Entry rule entryRuleReaction
entryRuleReaction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReactionRule()); }
	iv_ruleReaction=ruleReaction
	{ $current=$iv_ruleReaction.current; }
	EOF;

// Rule Reaction
ruleReaction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getReactionAccess().getAttributesAttributeParserRuleCall_0_0());
				}
				lv_attributes_0_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReactionRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_0_0,
						"org.lflang.LF.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_1='reaction'
			{
				newLeafNode(otherlv_1, grammarAccess.getReactionAccess().getReactionKeyword_1_0());
			}
			    |
			(
				(
					lv_mutation_2_0='mutation'
					{
						newLeafNode(lv_mutation_2_0, grammarAccess.getReactionAccess().getMutationMutationKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReactionRule());
						}
						setWithLastConsumed($current, "mutation", lv_mutation_2_0 != null, "mutation");
					}
				)
			)
		)
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getReactionAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getReactionAccess().getTriggersTriggerRefParserRuleCall_2_1_0_0());
						}
						lv_triggers_4_0=ruleTriggerRef
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getReactionRule());
							}
							add(
								$current,
								"triggers",
								lv_triggers_4_0,
								"org.lflang.LF.TriggerRef");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_5=','
					{
						newLeafNode(otherlv_5, grammarAccess.getReactionAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getReactionAccess().getTriggersTriggerRefParserRuleCall_2_1_1_1_0());
							}
							lv_triggers_6_0=ruleTriggerRef
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getReactionRule());
								}
								add(
									$current,
									"triggers",
									lv_triggers_6_0,
									"org.lflang.LF.TriggerRef");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getReactionAccess().getRightParenthesisKeyword_2_2());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getReactionAccess().getSourcesVarRefParserRuleCall_3_0_0());
					}
					lv_sources_8_0=ruleVarRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactionRule());
						}
						add(
							$current,
							"sources",
							lv_sources_8_0,
							"org.lflang.LF.VarRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getReactionAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getReactionAccess().getSourcesVarRefParserRuleCall_3_1_1_0());
						}
						lv_sources_10_0=ruleVarRef
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getReactionRule());
							}
							add(
								$current,
								"sources",
								lv_sources_10_0,
								"org.lflang.LF.VarRef");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_11='->'
			{
				newLeafNode(otherlv_11, grammarAccess.getReactionAccess().getHyphenMinusGreaterThanSignKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReactionAccess().getEffectsVarRefOrModeTransitionParserRuleCall_4_1_0());
					}
					lv_effects_12_0=ruleVarRefOrModeTransition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReactionRule());
						}
						add(
							$current,
							"effects",
							lv_effects_12_0,
							"org.lflang.LF.VarRefOrModeTransition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getReactionAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getReactionAccess().getEffectsVarRefOrModeTransitionParserRuleCall_4_2_1_0());
						}
						lv_effects_14_0=ruleVarRefOrModeTransition
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getReactionRule());
							}
							add(
								$current,
								"effects",
								lv_effects_14_0,
								"org.lflang.LF.VarRefOrModeTransition");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getReactionAccess().getCodeCodeParserRuleCall_5_0());
				}
				lv_code_15_0=ruleCode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReactionRule());
					}
					set(
						$current,
						"code",
						lv_code_15_0,
						"org.lflang.LF.Code");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getReactionAccess().getStpSTPParserRuleCall_6_0());
				}
				lv_stp_16_0=ruleSTP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReactionRule());
					}
					set(
						$current,
						"stp",
						lv_stp_16_0,
						"org.lflang.LF.STP");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getReactionAccess().getDeadlineDeadlineParserRuleCall_7_0());
				}
				lv_deadline_17_0=ruleDeadline
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReactionRule());
					}
					set(
						$current,
						"deadline",
						lv_deadline_17_0,
						"org.lflang.LF.Deadline");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleTriggerRef
entryRuleTriggerRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTriggerRefRule()); }
	iv_ruleTriggerRef=ruleTriggerRef
	{ $current=$iv_ruleTriggerRef.current; }
	EOF;

// Rule TriggerRef
ruleTriggerRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTriggerRefAccess().getBuiltinTriggerRefParserRuleCall_0());
		}
		this_BuiltinTriggerRef_0=ruleBuiltinTriggerRef
		{
			$current = $this_BuiltinTriggerRef_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTriggerRefAccess().getVarRefParserRuleCall_1());
		}
		this_VarRef_1=ruleVarRef
		{
			$current = $this_VarRef_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBuiltinTriggerRef
entryRuleBuiltinTriggerRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBuiltinTriggerRefRule()); }
	iv_ruleBuiltinTriggerRef=ruleBuiltinTriggerRef
	{ $current=$iv_ruleBuiltinTriggerRef.current; }
	EOF;

// Rule BuiltinTriggerRef
ruleBuiltinTriggerRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBuiltinTriggerRefAccess().getTypeBuiltinTriggerEnumRuleCall_0());
			}
			lv_type_0_0=ruleBuiltinTrigger
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBuiltinTriggerRefRule());
				}
				set(
					$current,
					"type",
					lv_type_0_0,
					"org.lflang.LF.BuiltinTrigger");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleDeadline
entryRuleDeadline returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeadlineRule()); }
	iv_ruleDeadline=ruleDeadline
	{ $current=$iv_ruleDeadline.current; }
	EOF;

// Rule Deadline
ruleDeadline returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='deadline'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeadlineAccess().getDeadlineKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getDeadlineAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeadlineAccess().getDelayExpressionParserRuleCall_2_0());
				}
				lv_delay_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeadlineRule());
					}
					set(
						$current,
						"delay",
						lv_delay_2_0,
						"org.lflang.LF.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getDeadlineAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeadlineAccess().getCodeCodeParserRuleCall_4_0());
				}
				lv_code_4_0=ruleCode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeadlineRule());
					}
					set(
						$current,
						"code",
						lv_code_4_0,
						"org.lflang.LF.Code");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSTP
entryRuleSTP returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTPRule()); }
	iv_ruleSTP=ruleSTP
	{ $current=$iv_ruleSTP.current; }
	EOF;

// Rule STP
ruleSTP returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='STP'
		{
			newLeafNode(otherlv_0, grammarAccess.getSTPAccess().getSTPKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSTPAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTPAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTPRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.lflang.LF.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSTPAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSTPAccess().getCodeCodeParserRuleCall_4_0());
				}
				lv_code_4_0=ruleCode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSTPRule());
					}
					set(
						$current,
						"code",
						lv_code_4_0,
						"org.lflang.LF.Code");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePreamble
entryRulePreamble returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPreambleRule()); }
	iv_rulePreamble=rulePreamble
	{ $current=$iv_rulePreamble.current; }
	EOF;

// Rule Preamble
rulePreamble returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPreambleAccess().getVisibilityVisibilityEnumRuleCall_0_0());
				}
				lv_visibility_0_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreambleRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"org.lflang.LF.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='preamble'
		{
			newLeafNode(otherlv_1, grammarAccess.getPreambleAccess().getPreambleKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPreambleAccess().getCodeCodeParserRuleCall_2_0());
				}
				lv_code_2_0=ruleCode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreambleRule());
					}
					set(
						$current,
						"code",
						lv_code_2_0,
						"org.lflang.LF.Code");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInstantiation
entryRuleInstantiation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstantiationRule()); }
	iv_ruleInstantiation=ruleInstantiation
	{ $current=$iv_ruleInstantiation.current; }
	EOF;

// Rule Instantiation
ruleInstantiation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getInstantiationAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInstantiationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.lflang.LF.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getInstantiationAccess().getEqualsSignKeyword_1());
		}
		otherlv_2='new'
		{
			newLeafNode(otherlv_2, grammarAccess.getInstantiationAccess().getNewKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInstantiationAccess().getWidthSpecWidthSpecParserRuleCall_3_0());
				}
				lv_widthSpec_3_0=ruleWidthSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstantiationRule());
					}
					set(
						$current,
						"widthSpec",
						lv_widthSpec_3_0,
						"org.lflang.LF.WidthSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInstantiationRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getInstantiationAccess().getReactorClassReactorDeclCrossReference_4_0());
				}
			)
		)
		(
			otherlv_5='<'
			{
				newLeafNode(otherlv_5, grammarAccess.getInstantiationAccess().getLessThanSignKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInstantiationAccess().getTypeParmsTypeParmParserRuleCall_5_1_0());
					}
					lv_typeParms_6_0=ruleTypeParm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstantiationRule());
						}
						add(
							$current,
							"typeParms",
							lv_typeParms_6_0,
							"org.lflang.LF.TypeParm");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getInstantiationAccess().getCommaKeyword_5_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getInstantiationAccess().getTypeParmsTypeParmParserRuleCall_5_2_1_0());
						}
						lv_typeParms_8_0=ruleTypeParm
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInstantiationRule());
							}
							add(
								$current,
								"typeParms",
								lv_typeParms_8_0,
								"org.lflang.LF.TypeParm");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_9='>'
			{
				newLeafNode(otherlv_9, grammarAccess.getInstantiationAccess().getGreaterThanSignKeyword_5_3());
			}
		)?
		otherlv_10='('
		{
			newLeafNode(otherlv_10, grammarAccess.getInstantiationAccess().getLeftParenthesisKeyword_6());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getInstantiationAccess().getParametersAssignmentParserRuleCall_7_0_0());
					}
					lv_parameters_11_0=ruleAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstantiationRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_11_0,
							"org.lflang.LF.Assignment");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_12=','
				{
					newLeafNode(otherlv_12, grammarAccess.getInstantiationAccess().getCommaKeyword_7_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getInstantiationAccess().getParametersAssignmentParserRuleCall_7_1_1_0());
						}
						lv_parameters_13_0=ruleAssignment
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInstantiationRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_13_0,
								"org.lflang.LF.Assignment");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_14=')'
		{
			newLeafNode(otherlv_14, grammarAccess.getInstantiationAccess().getRightParenthesisKeyword_8());
		}
		(
			(
				otherlv_15='at'
				{
					newLeafNode(otherlv_15, grammarAccess.getInstantiationAccess().getAtKeyword_9_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getInstantiationAccess().getHostHostParserRuleCall_9_0_1_0());
						}
						lv_host_16_0=ruleHost
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInstantiationRule());
							}
							set(
								$current,
								"host",
								lv_host_16_0,
								"org.lflang.LF.Host");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_17=';'
				{
					newLeafNode(otherlv_17, grammarAccess.getInstantiationAccess().getSemicolonKeyword_9_0_2());
				}
			)
			    |
			(
				otherlv_18=';'
				{
					newLeafNode(otherlv_18, grammarAccess.getInstantiationAccess().getSemicolonKeyword_9_1());
				}
			)?
		)
	)
;

// Entry rule entryRuleConnection
entryRuleConnection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectionRule()); }
	iv_ruleConnection=ruleConnection
	{ $current=$iv_ruleConnection.current; }
	EOF;

// Rule Connection
ruleConnection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getConnectionAccess().getLeftPortsVarRefParserRuleCall_0_0_0_0());
						}
						lv_leftPorts_0_0=ruleVarRef
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConnectionRule());
							}
							add(
								$current,
								"leftPorts",
								lv_leftPorts_0_0,
								"org.lflang.LF.VarRef");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_1=','
					{
						newLeafNode(otherlv_1, grammarAccess.getConnectionAccess().getCommaKeyword_0_0_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getConnectionAccess().getLeftPortsVarRefParserRuleCall_0_0_1_1_0());
							}
							lv_leftPorts_2_0=ruleVarRef
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getConnectionRule());
								}
								add(
									$current,
									"leftPorts",
									lv_leftPorts_2_0,
									"org.lflang.LF.VarRef");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				otherlv_3='('
				{
					newLeafNode(otherlv_3, grammarAccess.getConnectionAccess().getLeftParenthesisKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getConnectionAccess().getLeftPortsVarRefParserRuleCall_0_1_1_0());
						}
						lv_leftPorts_4_0=ruleVarRef
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConnectionRule());
							}
							add(
								$current,
								"leftPorts",
								lv_leftPorts_4_0,
								"org.lflang.LF.VarRef");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_5=','
					{
						newLeafNode(otherlv_5, grammarAccess.getConnectionAccess().getCommaKeyword_0_1_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getConnectionAccess().getLeftPortsVarRefParserRuleCall_0_1_2_1_0());
							}
							lv_leftPorts_6_0=ruleVarRef
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getConnectionRule());
								}
								add(
									$current,
									"leftPorts",
									lv_leftPorts_6_0,
									"org.lflang.LF.VarRef");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_7=')'
				{
					newLeafNode(otherlv_7, grammarAccess.getConnectionAccess().getRightParenthesisKeyword_0_1_3());
				}
				(
					(
						lv_iterated_8_0='+'
						{
							newLeafNode(lv_iterated_8_0, grammarAccess.getConnectionAccess().getIteratedPlusSignKeyword_0_1_4_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConnectionRule());
							}
							setWithLastConsumed($current, "iterated", lv_iterated_8_0 != null, "+");
						}
					)
				)?
			)
		)
		(
			otherlv_9='->'
			{
				newLeafNode(otherlv_9, grammarAccess.getConnectionAccess().getHyphenMinusGreaterThanSignKeyword_1_0());
			}
			    |
			(
				(
					lv_physical_10_0='~>'
					{
						newLeafNode(lv_physical_10_0, grammarAccess.getConnectionAccess().getPhysicalTildeGreaterThanSignKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConnectionRule());
						}
						setWithLastConsumed($current, "physical", lv_physical_10_0 != null, "~>");
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectionAccess().getRightPortsVarRefParserRuleCall_2_0());
				}
				lv_rightPorts_11_0=ruleVarRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectionRule());
					}
					add(
						$current,
						"rightPorts",
						lv_rightPorts_11_0,
						"org.lflang.LF.VarRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_12=','
			{
				newLeafNode(otherlv_12, grammarAccess.getConnectionAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConnectionAccess().getRightPortsVarRefParserRuleCall_3_1_0());
					}
					lv_rightPorts_13_0=ruleVarRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConnectionRule());
						}
						add(
							$current,
							"rightPorts",
							lv_rightPorts_13_0,
							"org.lflang.LF.VarRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_14='after'
			{
				newLeafNode(otherlv_14, grammarAccess.getConnectionAccess().getAfterKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConnectionAccess().getDelayExpressionParserRuleCall_4_1_0());
					}
					lv_delay_15_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConnectionRule());
						}
						set(
							$current,
							"delay",
							lv_delay_15_0,
							"org.lflang.LF.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getConnectionAccess().getSerializerSerializerParserRuleCall_5_0());
				}
				lv_serializer_16_0=ruleSerializer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConnectionRule());
					}
					set(
						$current,
						"serializer",
						lv_serializer_16_0,
						"org.lflang.LF.Serializer");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_17=';'
			{
				newLeafNode(otherlv_17, grammarAccess.getConnectionAccess().getSemicolonKeyword_6());
			}
		)?
	)
;

// Entry rule entryRuleSerializer
entryRuleSerializer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSerializerRule()); }
	iv_ruleSerializer=ruleSerializer
	{ $current=$iv_ruleSerializer.current; }
	EOF;

// Rule Serializer
ruleSerializer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='serializer'
		{
			newLeafNode(otherlv_0, grammarAccess.getSerializerAccess().getSerializerKeyword_0());
		}
		(
			(
				lv_type_1_0=RULE_STRING
				{
					newLeafNode(lv_type_1_0, grammarAccess.getSerializerAccess().getTypeSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSerializerRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_1_0,
						"org.lflang.LF.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getCommercialAtKeyword_0());
		}
		(
			(
				lv_attrName_1_0=RULE_ID
				{
					newLeafNode(lv_attrName_1_0, grammarAccess.getAttributeAccess().getAttrNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"attrName",
						lv_attrName_1_0,
						"org.lflang.LF.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getAttributeAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAttributeAccess().getAttrParmsAttrParmParserRuleCall_2_1_0_0());
						}
						lv_attrParms_3_0=ruleAttrParm
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAttributeRule());
							}
							add(
								$current,
								"attrParms",
								lv_attrParms_3_0,
								"org.lflang.LF.AttrParm");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getAttributeAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAttributeAccess().getAttrParmsAttrParmParserRuleCall_2_1_1_1_0());
							}
							lv_attrParms_5_0=ruleAttrParm
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAttributeRule());
								}
								add(
									$current,
									"attrParms",
									lv_attrParms_5_0,
									"org.lflang.LF.AttrParm");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				(
					otherlv_6=','
					{
						newLeafNode(otherlv_6, grammarAccess.getAttributeAccess().getCommaKeyword_2_1_2());
					}
				)?
			)?
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getAttributeAccess().getRightParenthesisKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleAttrParm
entryRuleAttrParm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttrParmRule()); }
	iv_ruleAttrParm=ruleAttrParm
	{ $current=$iv_ruleAttrParm.current; }
	EOF;

// Rule AttrParm
ruleAttrParm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_ID
					{
						newLeafNode(lv_name_0_0, grammarAccess.getAttrParmAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttrParmRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.lflang.LF.ID");
					}
				)
			)
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getAttrParmAccess().getEqualsSignKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAttrParmAccess().getValueAttrParmValueParserRuleCall_1_0());
				}
				lv_value_2_0=ruleAttrParmValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttrParmRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.lflang.LF.AttrParmValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAttrParmValue
entryRuleAttrParmValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttrParmValueRule()); }
	iv_ruleAttrParmValue=ruleAttrParmValue
	{ $current=$iv_ruleAttrParmValue.current; }
	EOF;

// Rule AttrParmValue
ruleAttrParmValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_str_0_0=RULE_STRING
				{
					newLeafNode(lv_str_0_0, grammarAccess.getAttrParmValueAccess().getStrSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttrParmValueRule());
					}
					setWithLastConsumed(
						$current,
						"str",
						lv_str_0_0,
						"org.lflang.LF.STRING");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAttrParmValueAccess().getIntSignedIntParserRuleCall_1_0());
				}
				lv_int_1_0=ruleSignedInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttrParmValueRule());
					}
					set(
						$current,
						"int",
						lv_int_1_0,
						"org.lflang.LF.SignedInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAttrParmValueAccess().getBoolBooleanParserRuleCall_2_0());
				}
				lv_bool_2_0=ruleBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttrParmValueRule());
					}
					set(
						$current,
						"bool",
						lv_bool_2_0,
						"org.lflang.LF.Boolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAttrParmValueAccess().getFloatSignedFloatParserRuleCall_3_0());
				}
				lv_float_3_0=ruleSignedFloat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttrParmValueRule());
					}
					set(
						$current,
						"float",
						lv_float_3_0,
						"org.lflang.LF.SignedFloat");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleKeyValuePairs
entryRuleKeyValuePairs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyValuePairsRule()); }
	iv_ruleKeyValuePairs=ruleKeyValuePairs
	{ $current=$iv_ruleKeyValuePairs.current; }
	EOF;

// Rule KeyValuePairs
ruleKeyValuePairs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getKeyValuePairsAccess().getKeyValuePairsAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getKeyValuePairsAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getKeyValuePairsAccess().getPairsKeyValuePairParserRuleCall_2_0_0());
					}
					lv_pairs_2_0=ruleKeyValuePair
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getKeyValuePairsRule());
						}
						add(
							$current,
							"pairs",
							lv_pairs_2_0,
							"org.lflang.LF.KeyValuePair");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getKeyValuePairsAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getKeyValuePairsAccess().getPairsKeyValuePairParserRuleCall_2_1_1_0());
						}
						lv_pairs_4_0=ruleKeyValuePair
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getKeyValuePairsRule());
							}
							add(
								$current,
								"pairs",
								lv_pairs_4_0,
								"org.lflang.LF.KeyValuePair");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getKeyValuePairsAccess().getCommaKeyword_2_2());
				}
			)?
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getKeyValuePairsAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleKeyValuePair
entryRuleKeyValuePair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyValuePairRule()); }
	iv_ruleKeyValuePair=ruleKeyValuePair
	{ $current=$iv_ruleKeyValuePair.current; }
	EOF;

// Rule KeyValuePair
ruleKeyValuePair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyValuePairAccess().getNameKebabParserRuleCall_0_0());
				}
				lv_name_0_0=ruleKebab
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyValuePairRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.lflang.LF.Kebab");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getKeyValuePairAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyValuePairAccess().getValueElementParserRuleCall_2_0());
				}
				lv_value_2_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyValuePairRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.lflang.LF.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArray
entryRuleArray returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	iv_ruleArray=ruleArray
	{ $current=$iv_ruleArray.current; }
	EOF;

// Rule Array
ruleArray returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayAccess().getElementsElementParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayRule());
					}
					add(
						$current,
						"elements",
						lv_elements_1_0,
						"org.lflang.LF.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getArrayAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayAccess().getElementsElementParserRuleCall_2_1_0());
					}
					lv_elements_3_0=ruleElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_0,
							"org.lflang.LF.Element");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getArrayAccess().getCommaKeyword_3());
			}
		)?
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getArrayAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getKeyvalueKeyValuePairsParserRuleCall_0_0());
				}
				lv_keyvalue_0_0=ruleKeyValuePairs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					set(
						$current,
						"keyvalue",
						lv_keyvalue_0_0,
						"org.lflang.LF.KeyValuePairs");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getArrayArrayParserRuleCall_1_0());
				}
				lv_array_1_0=ruleArray
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					set(
						$current,
						"array",
						lv_array_1_0,
						"org.lflang.LF.Array");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getLiteralLiteralParserRuleCall_2_0());
				}
				lv_literal_2_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					set(
						$current,
						"literal",
						lv_literal_2_0,
						"org.lflang.LF.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					lv_time_3_0=RULE_INT
					{
						newLeafNode(lv_time_3_0, grammarAccess.getElementAccess().getTimeINTTerminalRuleCall_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getElementRule());
						}
						setWithLastConsumed(
							$current,
							"time",
							lv_time_3_0,
							"org.lflang.LF.INT");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getElementAccess().getUnitTimeUnitParserRuleCall_3_1_0());
					}
					lv_unit_4_0=ruleTimeUnit
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementRule());
						}
						set(
							$current,
							"unit",
							lv_unit_4_0,
							"org.lflang.LF.TimeUnit");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getIdPathParserRuleCall_4_0());
				}
				lv_id_5_0=rulePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					set(
						$current,
						"id",
						lv_id_5_0,
						"org.lflang.LF.Path");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypedVariable
entryRuleTypedVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedVariableRule()); }
	iv_ruleTypedVariable=ruleTypedVariable
	{ $current=$iv_ruleTypedVariable.current; }
	EOF;

// Rule TypedVariable
ruleTypedVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypedVariableAccess().getPortParserRuleCall_0());
		}
		this_Port_0=rulePort
		{
			$current = $this_Port_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypedVariableAccess().getActionParserRuleCall_1());
		}
		this_Action_1=ruleAction
		{
			$current = $this_Action_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVarRef
entryRuleVarRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRefRule()); }
	iv_ruleVarRef=ruleVarRef
	{ $current=$iv_ruleVarRef.current; }
	EOF;

// Rule VarRef
ruleVarRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarRefRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getVarRefAccess().getVariableVariableCrossReference_0_0());
				}
			)
		)
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarRefRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getVarRefAccess().getContainerInstantiationCrossReference_1_0_0());
					}
				)
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getVarRefAccess().getFullStopKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarRefRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getVarRefAccess().getVariableVariableCrossReference_1_2_0());
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_interleaved_4_0='interleaved'
					{
						newLeafNode(lv_interleaved_4_0, grammarAccess.getVarRefAccess().getInterleavedInterleavedKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarRefRule());
						}
						setWithLastConsumed($current, "interleaved", lv_interleaved_4_0 != null, "interleaved");
					}
				)
			)
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getVarRefAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVarRefRule());
							}
						}
						otherlv_6=RULE_ID
						{
							newLeafNode(otherlv_6, grammarAccess.getVarRefAccess().getVariableVariableCrossReference_2_2_0_0());
						}
					)
				)
				    |
				(
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVarRefRule());
								}
							}
							otherlv_7=RULE_ID
							{
								newLeafNode(otherlv_7, grammarAccess.getVarRefAccess().getContainerInstantiationCrossReference_2_2_1_0_0());
							}
						)
					)
					otherlv_8='.'
					{
						newLeafNode(otherlv_8, grammarAccess.getVarRefAccess().getFullStopKeyword_2_2_1_1());
					}
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getVarRefRule());
								}
							}
							otherlv_9=RULE_ID
							{
								newLeafNode(otherlv_9, grammarAccess.getVarRefAccess().getVariableVariableCrossReference_2_2_1_2_0());
							}
						)
					)
				)
			)
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getVarRefAccess().getRightParenthesisKeyword_2_3());
			}
		)
	)
;

// Entry rule entryRuleVarRefOrModeTransition
entryRuleVarRefOrModeTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRefOrModeTransitionRule()); }
	iv_ruleVarRefOrModeTransition=ruleVarRefOrModeTransition
	{ $current=$iv_ruleVarRefOrModeTransition.current; }
	EOF;

// Rule VarRefOrModeTransition
ruleVarRefOrModeTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVarRefOrModeTransitionAccess().getVarRefParserRuleCall_0());
		}
		this_VarRef_0=ruleVarRef
		{
			$current = $this_VarRef_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVarRefOrModeTransitionAccess().getTransitionModeTransitionEnumRuleCall_1_0_0());
					}
					lv_transition_1_0=ruleModeTransition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarRefOrModeTransitionRule());
						}
						set(
							$current,
							"transition",
							lv_transition_1_0,
							"org.lflang.LF.ModeTransition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getVarRefOrModeTransitionAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarRefOrModeTransitionRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getVarRefOrModeTransitionAccess().getVariableModeCrossReference_1_2_0());
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getVarRefOrModeTransitionAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignmentRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAssignmentAccess().getLhsParameterCrossReference_0_0());
				}
			)
		)
		(
			(
				(
					(
						lv_equals_1_0='='
						{
							newLeafNode(lv_equals_1_0, grammarAccess.getAssignmentAccess().getEqualsEqualsSignKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAssignmentRule());
							}
							setWithLastConsumed($current, "equals", lv_equals_1_0, "=");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAssignmentAccess().getRhsExpressionParserRuleCall_1_0_1_0());
						}
						lv_rhs_2_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssignmentRule());
							}
							add(
								$current,
								"rhs",
								lv_rhs_2_0,
								"org.lflang.LF.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_equals_3_0='='
						{
							newLeafNode(lv_equals_3_0, grammarAccess.getAssignmentAccess().getEqualsEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAssignmentRule());
							}
							setWithLastConsumed($current, "equals", lv_equals_3_0, "=");
						}
					)
				)?
				(
					(
						(
							(
								lv_parens_4_0='('
								{
									newLeafNode(lv_parens_4_0, grammarAccess.getAssignmentAccess().getParensLeftParenthesisKeyword_1_1_1_0_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getAssignmentRule());
									}
									addWithLastConsumed($current, "parens", lv_parens_4_0, "(");
								}
							)
						)
						(
							(
								(
									{
										newCompositeNode(grammarAccess.getAssignmentAccess().getRhsExpressionParserRuleCall_1_1_1_0_1_0_0());
									}
									lv_rhs_5_0=ruleExpression
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getAssignmentRule());
										}
										add(
											$current,
											"rhs",
											lv_rhs_5_0,
											"org.lflang.LF.Expression");
										afterParserOrEnumRuleCall();
									}
								)
							)
							(
								otherlv_6=','
								{
									newLeafNode(otherlv_6, grammarAccess.getAssignmentAccess().getCommaKeyword_1_1_1_0_1_1_0());
								}
								(
									(
										{
											newCompositeNode(grammarAccess.getAssignmentAccess().getRhsExpressionParserRuleCall_1_1_1_0_1_1_1_0());
										}
										lv_rhs_7_0=ruleExpression
										{
											if ($current==null) {
												$current = createModelElementForParent(grammarAccess.getAssignmentRule());
											}
											add(
												$current,
												"rhs",
												lv_rhs_7_0,
												"org.lflang.LF.Expression");
											afterParserOrEnumRuleCall();
										}
									)
								)
							)*
						)?
						(
							(
								lv_parens_8_0=')'
								{
									newLeafNode(lv_parens_8_0, grammarAccess.getAssignmentAccess().getParensRightParenthesisKeyword_1_1_1_0_2_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getAssignmentRule());
									}
									addWithLastConsumed($current, "parens", lv_parens_8_0, ")");
								}
							)
						)
					)
					    |
					(
						(
							(
								lv_braces_9_0='{'
								{
									newLeafNode(lv_braces_9_0, grammarAccess.getAssignmentAccess().getBracesLeftCurlyBracketKeyword_1_1_1_1_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getAssignmentRule());
									}
									addWithLastConsumed($current, "braces", lv_braces_9_0, "{");
								}
							)
						)
						(
							(
								(
									{
										newCompositeNode(grammarAccess.getAssignmentAccess().getRhsExpressionParserRuleCall_1_1_1_1_1_0_0());
									}
									lv_rhs_10_0=ruleExpression
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getAssignmentRule());
										}
										add(
											$current,
											"rhs",
											lv_rhs_10_0,
											"org.lflang.LF.Expression");
										afterParserOrEnumRuleCall();
									}
								)
							)
							(
								otherlv_11=','
								{
									newLeafNode(otherlv_11, grammarAccess.getAssignmentAccess().getCommaKeyword_1_1_1_1_1_1_0());
								}
								(
									(
										{
											newCompositeNode(grammarAccess.getAssignmentAccess().getRhsExpressionParserRuleCall_1_1_1_1_1_1_1_0());
										}
										lv_rhs_12_0=ruleExpression
										{
											if ($current==null) {
												$current = createModelElementForParent(grammarAccess.getAssignmentRule());
											}
											add(
												$current,
												"rhs",
												lv_rhs_12_0,
												"org.lflang.LF.Expression");
											afterParserOrEnumRuleCall();
										}
									)
								)
							)*
						)?
						(
							(
								lv_braces_13_0='}'
								{
									newLeafNode(lv_braces_13_0, grammarAccess.getAssignmentAccess().getBracesRightCurlyBracketKeyword_1_1_1_1_2_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getAssignmentRule());
									}
									addWithLastConsumed($current, "braces", lv_braces_13_0, "}");
								}
							)
						)
					)
				)
			)
		)
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getAttributesAttributeParserRuleCall_0_0());
				}
				lv_attributes_0_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_0_0,
						"org.lflang.LF.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.lflang.LF.ID");
				}
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_2_1_0());
					}
					lv_type_3_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"org.lflang.LF.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				(
					(
						lv_parens_4_0='('
						{
							newLeafNode(lv_parens_4_0, grammarAccess.getParameterAccess().getParensLeftParenthesisKeyword_3_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getParameterRule());
							}
							addWithLastConsumed($current, "parens", lv_parens_4_0, "(");
						}
					)
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getParameterAccess().getInitExpressionParserRuleCall_3_0_1_0_0());
							}
							lv_init_5_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getParameterRule());
								}
								add(
									$current,
									"init",
									lv_init_5_0,
									"org.lflang.LF.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_6=','
						{
							newLeafNode(otherlv_6, grammarAccess.getParameterAccess().getCommaKeyword_3_0_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getParameterAccess().getInitExpressionParserRuleCall_3_0_1_1_1_0());
								}
								lv_init_7_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getParameterRule());
									}
									add(
										$current,
										"init",
										lv_init_7_0,
										"org.lflang.LF.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				(
					(
						lv_parens_8_0=')'
						{
							newLeafNode(lv_parens_8_0, grammarAccess.getParameterAccess().getParensRightParenthesisKeyword_3_0_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getParameterRule());
							}
							addWithLastConsumed($current, "parens", lv_parens_8_0, ")");
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_braces_9_0='{'
						{
							newLeafNode(lv_braces_9_0, grammarAccess.getParameterAccess().getBracesLeftCurlyBracketKeyword_3_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getParameterRule());
							}
							addWithLastConsumed($current, "braces", lv_braces_9_0, "{");
						}
					)
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getParameterAccess().getInitExpressionParserRuleCall_3_1_1_0_0());
							}
							lv_init_10_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getParameterRule());
								}
								add(
									$current,
									"init",
									lv_init_10_0,
									"org.lflang.LF.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_11=','
						{
							newLeafNode(otherlv_11, grammarAccess.getParameterAccess().getCommaKeyword_3_1_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getParameterAccess().getInitExpressionParserRuleCall_3_1_1_1_1_0());
								}
								lv_init_12_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getParameterRule());
									}
									add(
										$current,
										"init",
										lv_init_12_0,
										"org.lflang.LF.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				(
					(
						lv_braces_13_0='}'
						{
							newLeafNode(lv_braces_13_0, grammarAccess.getParameterAccess().getBracesRightCurlyBracketKeyword_3_1_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getParameterRule());
							}
							addWithLastConsumed($current, "braces", lv_braces_13_0, "}");
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpressionAccess().getLiteralAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getLiteralLiteralParserRuleCall_0_1_0());
					}
					lv_literal_1_0=ruleLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"literal",
							lv_literal_1_0,
							"org.lflang.LF.Literal");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getTimeParserRuleCall_1());
		}
		this_Time_2=ruleTime
		{
			$current = $this_Time_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getParameterReferenceParserRuleCall_2());
		}
		this_ParameterReference_3=ruleParameterReference
		{
			$current = $this_ParameterReference_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getCodeParserRuleCall_3());
		}
		this_Code_4=ruleCode
		{
			$current = $this_Code_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParameterReference
entryRuleParameterReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterReferenceRule()); }
	iv_ruleParameterReference=ruleParameterReference
	{ $current=$iv_ruleParameterReference.current; }
	EOF;

// Rule ParameterReference
ruleParameterReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParameterReferenceRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getParameterReferenceAccess().getParameterParameterCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleTime
entryRuleTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	iv_ruleTime=ruleTime
	{ $current=$iv_ruleTime.current; }
	EOF;

// Rule Time
ruleTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_interval_0_0=RULE_INT
				{
					newLeafNode(lv_interval_0_0, grammarAccess.getTimeAccess().getIntervalINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeRule());
					}
					setWithLastConsumed(
						$current,
						"interval",
						lv_interval_0_0,
						"org.lflang.LF.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeAccess().getUnitTimeUnitParserRuleCall_1_0());
				}
				lv_unit_1_0=ruleTimeUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeRule());
					}
					set(
						$current,
						"unit",
						lv_unit_1_0,
						"org.lflang.LF.TimeUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePort
entryRulePort returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPortRule()); }
	iv_rulePort=rulePort
	{ $current=$iv_rulePort.current; }
	EOF;

// Rule Port
rulePort returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPortAccess().getInputParserRuleCall_0());
		}
		this_Input_0=ruleInput
		{
			$current = $this_Input_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPortAccess().getOutputParserRuleCall_1());
		}
		this_Output_1=ruleOutput
		{
			$current = $this_Output_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_time_0_0='time'
					{
						newLeafNode(lv_time_0_0, grammarAccess.getTypeAccess().getTimeTimeKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed($current, "time", lv_time_0_0 != null, "time");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getArraySpecArraySpecParserRuleCall_0_1_0());
					}
					lv_arraySpec_1_0=ruleArraySpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						set(
							$current,
							"arraySpec",
							lv_arraySpec_1_0,
							"org.lflang.LF.ArraySpec");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getIdDottedNameParserRuleCall_1_0_0());
					}
					lv_id_2_0=ruleDottedName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						set(
							$current,
							"id",
							lv_id_2_0,
							"org.lflang.LF.DottedName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3='<'
				{
					newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getLessThanSignKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTypeAccess().getTypeParmsTypeParserRuleCall_1_1_1_0());
						}
						lv_typeParms_4_0=ruleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypeRule());
							}
							add(
								$current,
								"typeParms",
								lv_typeParms_4_0,
								"org.lflang.LF.Type");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_5=','
					{
						newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getCommaKeyword_1_1_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getTypeAccess().getTypeParmsTypeParserRuleCall_1_1_2_1_0());
							}
							lv_typeParms_6_0=ruleType
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTypeRule());
								}
								add(
									$current,
									"typeParms",
									lv_typeParms_6_0,
									"org.lflang.LF.Type");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_7='>'
				{
					newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getGreaterThanSignKeyword_1_1_3());
				}
			)?
			(
				(
					lv_stars_8_0='*'
					{
						newLeafNode(lv_stars_8_0, grammarAccess.getTypeAccess().getStarsAsteriskKeyword_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						addWithLastConsumed($current, "stars", lv_stars_8_0, "*");
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getArraySpecArraySpecParserRuleCall_1_3_0());
					}
					lv_arraySpec_9_0=ruleArraySpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						set(
							$current,
							"arraySpec",
							lv_arraySpec_9_0,
							"org.lflang.LF.ArraySpec");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getCodeCodeParserRuleCall_2_0());
				}
				lv_code_10_0=ruleCode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"code",
						lv_code_10_0,
						"org.lflang.LF.Code");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArraySpec
entryRuleArraySpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArraySpecRule()); }
	iv_ruleArraySpec=ruleArraySpec
	{ $current=$iv_ruleArraySpec.current; }
	EOF;

// Rule ArraySpec
ruleArraySpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getArraySpecAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				(
					lv_ofVariableLength_1_0=']'
					{
						newLeafNode(lv_ofVariableLength_1_0, grammarAccess.getArraySpecAccess().getOfVariableLengthRightSquareBracketKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArraySpecRule());
						}
						setWithLastConsumed($current, "ofVariableLength", lv_ofVariableLength_1_0 != null, "]");
					}
				)
			)
			    |
			(
				(
					(
						lv_length_2_0=RULE_INT
						{
							newLeafNode(lv_length_2_0, grammarAccess.getArraySpecAccess().getLengthINTTerminalRuleCall_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getArraySpecRule());
							}
							setWithLastConsumed(
								$current,
								"length",
								lv_length_2_0,
								"org.lflang.LF.INT");
						}
					)
				)
				otherlv_3=']'
				{
					newLeafNode(otherlv_3, grammarAccess.getArraySpecAccess().getRightSquareBracketKeyword_1_1_1());
				}
			)
		)
	)
;

// Entry rule entryRuleWidthSpec
entryRuleWidthSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWidthSpecRule()); }
	iv_ruleWidthSpec=ruleWidthSpec
	{ $current=$iv_ruleWidthSpec.current; }
	EOF;

// Rule WidthSpec
ruleWidthSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getWidthSpecAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				(
					lv_ofVariableLength_1_0=']'
					{
						newLeafNode(lv_ofVariableLength_1_0, grammarAccess.getWidthSpecAccess().getOfVariableLengthRightSquareBracketKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWidthSpecRule());
						}
						setWithLastConsumed($current, "ofVariableLength", lv_ofVariableLength_1_0 != null, "]");
					}
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getWidthSpecAccess().getTermsWidthTermParserRuleCall_1_1_0_0());
						}
						lv_terms_2_0=ruleWidthTerm
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getWidthSpecRule());
							}
							add(
								$current,
								"terms",
								lv_terms_2_0,
								"org.lflang.LF.WidthTerm");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3='+'
					{
						newLeafNode(otherlv_3, grammarAccess.getWidthSpecAccess().getPlusSignKeyword_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getWidthSpecAccess().getTermsWidthTermParserRuleCall_1_1_1_1_0());
							}
							lv_terms_4_0=ruleWidthTerm
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getWidthSpecRule());
								}
								add(
									$current,
									"terms",
									lv_terms_4_0,
									"org.lflang.LF.WidthTerm");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_5=']'
				{
					newLeafNode(otherlv_5, grammarAccess.getWidthSpecAccess().getRightSquareBracketKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleWidthTerm
entryRuleWidthTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWidthTermRule()); }
	iv_ruleWidthTerm=ruleWidthTerm
	{ $current=$iv_ruleWidthTerm.current; }
	EOF;

// Rule WidthTerm
ruleWidthTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_width_0_0=RULE_INT
				{
					newLeafNode(lv_width_0_0, grammarAccess.getWidthTermAccess().getWidthINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWidthTermRule());
					}
					setWithLastConsumed(
						$current,
						"width",
						lv_width_0_0,
						"org.lflang.LF.INT");
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWidthTermRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getWidthTermAccess().getParameterParameterCrossReference_1_0());
				}
			)
		)
		    |
		(
			otherlv_2='widthof('
			{
				newLeafNode(otherlv_2, grammarAccess.getWidthTermAccess().getWidthofKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getWidthTermAccess().getPortVarRefParserRuleCall_2_1_0());
					}
					lv_port_3_0=ruleVarRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWidthTermRule());
						}
						set(
							$current,
							"port",
							lv_port_3_0,
							"org.lflang.LF.VarRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getWidthTermAccess().getRightParenthesisKeyword_2_2());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getWidthTermAccess().getCodeCodeParserRuleCall_3_0());
				}
				lv_code_5_0=ruleCode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWidthTermRule());
					}
					set(
						$current,
						"code",
						lv_code_5_0,
						"org.lflang.LF.Code");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIPV4Host
entryRuleIPV4Host returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIPV4HostRule()); }
	iv_ruleIPV4Host=ruleIPV4Host
	{ $current=$iv_ruleIPV4Host.current; }
	EOF;

// Rule IPV4Host
ruleIPV4Host returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getIPV4HostAccess().getUserKebabParserRuleCall_0_0_0());
					}
					lv_user_0_0=ruleKebab
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIPV4HostRule());
						}
						set(
							$current,
							"user",
							lv_user_0_0,
							"org.lflang.LF.Kebab");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='@'
			{
				newLeafNode(otherlv_1, grammarAccess.getIPV4HostAccess().getCommercialAtKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getIPV4HostAccess().getAddrIPV4AddrParserRuleCall_1_0());
				}
				lv_addr_2_0=ruleIPV4Addr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIPV4HostRule());
					}
					set(
						$current,
						"addr",
						lv_addr_2_0,
						"org.lflang.LF.IPV4Addr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getIPV4HostAccess().getColonKeyword_2_0());
			}
			(
				(
					lv_port_4_0=RULE_INT
					{
						newLeafNode(lv_port_4_0, grammarAccess.getIPV4HostAccess().getPortINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIPV4HostRule());
						}
						setWithLastConsumed(
							$current,
							"port",
							lv_port_4_0,
							"org.lflang.LF.INT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleIPV6Host
entryRuleIPV6Host returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIPV6HostRule()); }
	iv_ruleIPV6Host=ruleIPV6Host
	{ $current=$iv_ruleIPV6Host.current; }
	EOF;

// Rule IPV6Host
ruleIPV6Host returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getIPV6HostAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getIPV6HostAccess().getUserKebabParserRuleCall_1_0_0());
					}
					lv_user_1_0=ruleKebab
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIPV6HostRule());
						}
						set(
							$current,
							"user",
							lv_user_1_0,
							"org.lflang.LF.Kebab");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='@'
			{
				newLeafNode(otherlv_2, grammarAccess.getIPV6HostAccess().getCommercialAtKeyword_1_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getIPV6HostAccess().getAddrIPV6AddrParserRuleCall_2_0());
				}
				lv_addr_3_0=ruleIPV6Addr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIPV6HostRule());
					}
					set(
						$current,
						"addr",
						lv_addr_3_0,
						"org.lflang.LF.IPV6Addr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getIPV6HostAccess().getRightSquareBracketKeyword_3());
		}
		(
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getIPV6HostAccess().getColonKeyword_4_0());
			}
			(
				(
					lv_port_6_0=RULE_INT
					{
						newLeafNode(lv_port_6_0, grammarAccess.getIPV6HostAccess().getPortINTTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIPV6HostRule());
						}
						setWithLastConsumed(
							$current,
							"port",
							lv_port_6_0,
							"org.lflang.LF.INT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleNamedHost
entryRuleNamedHost returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamedHostRule()); }
	iv_ruleNamedHost=ruleNamedHost
	{ $current=$iv_ruleNamedHost.current; }
	EOF;

// Rule NamedHost
ruleNamedHost returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNamedHostAccess().getUserKebabParserRuleCall_0_0_0());
					}
					lv_user_0_0=ruleKebab
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNamedHostRule());
						}
						set(
							$current,
							"user",
							lv_user_0_0,
							"org.lflang.LF.Kebab");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='@'
			{
				newLeafNode(otherlv_1, grammarAccess.getNamedHostAccess().getCommercialAtKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getNamedHostAccess().getAddrHostNameParserRuleCall_1_0());
				}
				lv_addr_2_0=ruleHostName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNamedHostRule());
					}
					set(
						$current,
						"addr",
						lv_addr_2_0,
						"org.lflang.LF.HostName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getNamedHostAccess().getColonKeyword_2_0());
			}
			(
				(
					lv_port_4_0=RULE_INT
					{
						newLeafNode(lv_port_4_0, grammarAccess.getNamedHostAccess().getPortINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNamedHostRule());
						}
						setWithLastConsumed(
							$current,
							"port",
							lv_port_4_0,
							"org.lflang.LF.INT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleHost
entryRuleHost returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHostRule()); }
	iv_ruleHost=ruleHost
	{ $current=$iv_ruleHost.current; }
	EOF;

// Rule Host
ruleHost returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHostAccess().getIPV4HostParserRuleCall_0());
		}
		this_IPV4Host_0=ruleIPV4Host
		{
			$current = $this_IPV4Host_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getHostAccess().getIPV6HostParserRuleCall_1());
		}
		this_IPV6Host_1=ruleIPV6Host
		{
			$current = $this_IPV6Host_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getHostAccess().getNamedHostParserRuleCall_2());
		}
		this_NamedHost_2=ruleNamedHost
		{
			$current = $this_NamedHost_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleHostName
entryRuleHostName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getHostNameRule()); }
	iv_ruleHostName=ruleHostName
	{ $current=$iv_ruleHostName.current.getText(); }
	EOF;

// Rule HostName
ruleHostName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHostNameAccess().getKebabParserRuleCall_0());
		}
		this_Kebab_0=ruleKebab
		{
			$current.merge(this_Kebab_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getHostNameAccess().getFullStopKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getHostNameAccess().getKebabParserRuleCall_1_1());
			}
			this_Kebab_2=ruleKebab
			{
				$current.merge(this_Kebab_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleDottedName
entryRuleDottedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDottedNameRule()); }
	iv_ruleDottedName=ruleDottedName
	{ $current=$iv_ruleDottedName.current.getText(); }
	EOF;

// Rule DottedName
ruleDottedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getDottedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			(
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getDottedNameAccess().getFullStopKeyword_1_0_0());
				}
				    |
				kw='::'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getDottedNameAccess().getColonColonKeyword_1_0_1());
				}
			)
			this_ID_3=RULE_ID
			{
				$current.merge(this_ID_3);
			}
			{
				newLeafNode(this_ID_3, grammarAccess.getDottedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleSignedInt
entryRuleSignedInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignedIntRule()); }
	iv_ruleSignedInt=ruleSignedInt
	{ $current=$iv_ruleSignedInt.current.getText(); }
	EOF;

// Rule SignedInt
ruleSignedInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getSignedIntAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_NEGINT_1=RULE_NEGINT
		{
			$current.merge(this_NEGINT_1);
		}
		{
			newLeafNode(this_NEGINT_1, grammarAccess.getSignedIntAccess().getNEGINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current.getText(); }
	EOF;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_CHAR_LIT_1=RULE_CHAR_LIT
		{
			$current.merge(this_CHAR_LIT_1);
		}
		{
			newLeafNode(this_CHAR_LIT_1, grammarAccess.getLiteralAccess().getCHAR_LITTerminalRuleCall_1());
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getSignedFloatParserRuleCall_2());
		}
		this_SignedFloat_2=ruleSignedFloat
		{
			$current.merge(this_SignedFloat_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getSignedIntParserRuleCall_3());
		}
		this_SignedInt_3=ruleSignedInt
		{
			$current.merge(this_SignedInt_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanParserRuleCall_4());
		}
		this_Boolean_4=ruleBoolean
		{
			$current.merge(this_Boolean_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleKebab
entryRuleKebab returns [String current=null]:
	{ newCompositeNode(grammarAccess.getKebabRule()); }
	iv_ruleKebab=ruleKebab
	{ $current=$iv_ruleKebab.current.getText(); }
	EOF;

// Rule Kebab
ruleKebab returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getKebabAccess().getIDTerminalRuleCall_0_0());
			}
			    |
			kw='physical'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getKebabAccess().getPhysicalKeyword_0_1());
			}
		)
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getKebabAccess().getHyphenMinusKeyword_1_0());
			}
			this_ID_3=RULE_ID
			{
				$current.merge(this_ID_3);
			}
			{
				newLeafNode(this_ID_3, grammarAccess.getKebabAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleIPV4Addr
entryRuleIPV4Addr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIPV4AddrRule()); }
	iv_ruleIPV4Addr=ruleIPV4Addr
	{ $current=$iv_ruleIPV4Addr.current.getText(); }
	EOF;

// Rule IPV4Addr
ruleIPV4Addr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getIPV4AddrAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIPV4AddrAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getIPV4AddrAccess().getINTTerminalRuleCall_2());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIPV4AddrAccess().getFullStopKeyword_3());
		}
		this_INT_4=RULE_INT
		{
			$current.merge(this_INT_4);
		}
		{
			newLeafNode(this_INT_4, grammarAccess.getIPV4AddrAccess().getINTTerminalRuleCall_4());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIPV4AddrAccess().getFullStopKeyword_5());
		}
		this_INT_6=RULE_INT
		{
			$current.merge(this_INT_6);
		}
		{
			newLeafNode(this_INT_6, grammarAccess.getIPV4AddrAccess().getINTTerminalRuleCall_6());
		}
	)
;

// Entry rule entryRuleIPV6Seg
entryRuleIPV6Seg returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIPV6SegRule()); }
	iv_ruleIPV6Seg=ruleIPV6Seg
	{ $current=$iv_ruleIPV6Seg.current.getText(); }
	EOF;

// Rule IPV6Seg
ruleIPV6Seg returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getIPV6SegAccess().getINTTerminalRuleCall_0());
		}
		    |
		(
			(
				this_INT_1=RULE_INT
				{
					$current.merge(this_INT_1);
				}
				{
					newLeafNode(this_INT_1, grammarAccess.getIPV6SegAccess().getINTTerminalRuleCall_1_0());
				}
			)?
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getIPV6SegAccess().getIDTerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRuleIPV6Addr
entryRuleIPV6Addr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIPV6AddrRule()); }
	iv_ruleIPV6Addr=ruleIPV6Addr
	{ $current=$iv_ruleIPV6Addr.current.getText(); }
	EOF;

// Rule IPV6Addr
ruleIPV6Addr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='::'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonColonKeyword_0());
		}
		    |
		(
			kw='::'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonColonKeyword_1_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getIPV6AddrAccess().getIPV6SegParserRuleCall_1_1_0());
				}
				this_IPV6Seg_2=ruleIPV6Seg
				{
					$current.merge(this_IPV6Seg_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
				kw=':'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonKeyword_1_1_1());
				}
			)*
			{
				newCompositeNode(grammarAccess.getIPV6AddrAccess().getIPV6SegParserRuleCall_1_2());
			}
			this_IPV6Seg_4=ruleIPV6Seg
			{
				$current.merge(this_IPV6Seg_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIPV6AddrAccess().getIPV6SegParserRuleCall_2_0_0());
				}
				this_IPV6Seg_5=ruleIPV6Seg
				{
					$current.merge(this_IPV6Seg_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
				(
					kw=':'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonKeyword_2_0_1_0());
					}
					    |
					kw='::'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonColonKeyword_2_0_1_1());
					}
				)
			)+
			(
				{
					newCompositeNode(grammarAccess.getIPV6AddrAccess().getIPV6SegParserRuleCall_2_1());
				}
				this_IPV6Seg_8=ruleIPV6Seg
				{
					$current.merge(this_IPV6Seg_8);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
		    |
		(
			this_ID_9=RULE_ID
			{
				$current.merge(this_ID_9);
			}
			{
				newLeafNode(this_ID_9, grammarAccess.getIPV6AddrAccess().getIDTerminalRuleCall_3_0());
			}
			kw='::'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonColonKeyword_3_1());
			}
			{
				newCompositeNode(grammarAccess.getIPV6AddrAccess().getIPV6SegParserRuleCall_3_2());
			}
			this_IPV6Seg_11=ruleIPV6Seg
			{
				$current.merge(this_IPV6Seg_11);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=':'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonKeyword_3_3_0());
				}
				{
					newCompositeNode(grammarAccess.getIPV6AddrAccess().getIPV6SegParserRuleCall_3_3_1());
				}
				this_IPV6Seg_13=ruleIPV6Seg
				{
					$current.merge(this_IPV6Seg_13);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
			kw='%'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getPercentSignKeyword_3_4());
			}
			(
				this_INT_15=RULE_INT
				{
					$current.merge(this_INT_15);
				}
				{
					newLeafNode(this_INT_15, grammarAccess.getIPV6AddrAccess().getINTTerminalRuleCall_3_5_0());
				}
				    |
				this_ID_16=RULE_ID
				{
					$current.merge(this_ID_16);
				}
				{
					newLeafNode(this_ID_16, grammarAccess.getIPV6AddrAccess().getIDTerminalRuleCall_3_5_1());
				}
			)+
		)
		    |
		(
			kw='::'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonColonKeyword_4_0());
			}
			{
				newCompositeNode(grammarAccess.getIPV6AddrAccess().getIPV4AddrParserRuleCall_4_1());
			}
			this_IPV4Addr_18=ruleIPV4Addr
			{
				$current.merge(this_IPV4Addr_18);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='::'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonColonKeyword_5_0());
			}
			this_ID_20=RULE_ID
			{
				$current.merge(this_ID_20);
			}
			{
				newLeafNode(this_ID_20, grammarAccess.getIPV6AddrAccess().getIDTerminalRuleCall_5_1());
			}
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonKeyword_5_2());
			}
			(
				this_INT_22=RULE_INT
				{
					$current.merge(this_INT_22);
				}
				{
					newLeafNode(this_INT_22, grammarAccess.getIPV6AddrAccess().getINTTerminalRuleCall_5_3_0());
				}
				kw=':'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonKeyword_5_3_1());
				}
			)?
			{
				newCompositeNode(grammarAccess.getIPV6AddrAccess().getIPV4AddrParserRuleCall_5_4());
			}
			this_IPV4Addr_24=ruleIPV4Addr
			{
				$current.merge(this_IPV4Addr_24);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getIPV6AddrAccess().getIPV6SegParserRuleCall_6_0_0_0());
					}
					this_IPV6Seg_25=ruleIPV6Seg
					{
						$current.merge(this_IPV6Seg_25);
					}
					{
						afterParserOrEnumRuleCall();
					}
					(
						kw=':'
						{
							$current.merge(kw);
							newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonKeyword_6_0_0_1_0());
						}
						{
							newCompositeNode(grammarAccess.getIPV6AddrAccess().getIPV6SegParserRuleCall_6_0_0_1_1());
						}
						this_IPV6Seg_27=ruleIPV6Seg
						{
							$current.merge(this_IPV6Seg_27);
						}
						{
							afterParserOrEnumRuleCall();
						}
					)*
					kw='::'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonColonKeyword_6_0_0_2());
					}
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getIPV6AddrAccess().getIPV6SegParserRuleCall_6_0_1_0_0());
						}
						this_IPV6Seg_29=ruleIPV6Seg
						{
							$current.merge(this_IPV6Seg_29);
						}
						{
							afterParserOrEnumRuleCall();
						}
						(
							kw=':'
							{
								$current.merge(kw);
								newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonKeyword_6_0_1_0_1_0());
							}
							{
								newCompositeNode(grammarAccess.getIPV6AddrAccess().getIPV6SegParserRuleCall_6_0_1_0_1_1());
							}
							this_IPV6Seg_31=ruleIPV6Seg
							{
								$current.merge(this_IPV6Seg_31);
							}
							{
								afterParserOrEnumRuleCall();
							}
						)*
					)
					kw=':'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getIPV6AddrAccess().getColonKeyword_6_0_1_1());
					}
				)
			)
			{
				newCompositeNode(grammarAccess.getIPV6AddrAccess().getIPV4AddrParserRuleCall_6_1());
			}
			this_IPV4Addr_33=ruleIPV4Addr
			{
				$current.merge(this_IPV4Addr_33);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSignedFloat
entryRuleSignedFloat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignedFloatRule()); }
	iv_ruleSignedFloat=ruleSignedFloat
	{ $current=$iv_ruleSignedFloat.current.getText(); }
	EOF;

// Rule SignedFloat
ruleSignedFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSignedFloatAccess().getSignedIntParserRuleCall_0_0());
			}
			this_SignedInt_0=ruleSignedInt
			{
				$current.merge(this_SignedInt_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSignedFloatAccess().getHyphenMinusKeyword_0_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignedFloatAccess().getFullStopKeyword_1());
		}
		(
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getSignedFloatAccess().getINTTerminalRuleCall_2_0());
			}
			    |
			this_FLOAT_EXP_SUFFIX_4=RULE_FLOAT_EXP_SUFFIX
			{
				$current.merge(this_FLOAT_EXP_SUFFIX_4);
			}
			{
				newLeafNode(this_FLOAT_EXP_SUFFIX_4, grammarAccess.getSignedFloatAccess().getFLOAT_EXP_SUFFIXTerminalRuleCall_2_1());
			}
		)
	)
;

// Entry rule entryRuleCode
entryRuleCode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCodeRule()); }
	iv_ruleCode=ruleCode
	{ $current=$iv_ruleCode.current; }
	EOF;

// Rule Code
ruleCode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCodeAccess().getCodeAction_0(),
					$current);
			}
		)
		otherlv_1='{='
		{
			newLeafNode(otherlv_1, grammarAccess.getCodeAccess().getLeftCurlyBracketEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCodeAccess().getBodyBodyParserRuleCall_2_0());
				}
				lv_body_2_0=ruleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCodeRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"org.lflang.LF.Body");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='=}'
		{
			newLeafNode(otherlv_3, grammarAccess.getCodeAccess().getEqualsSignRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleFSName
entryRuleFSName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFSNameRule()); }
	iv_ruleFSName=ruleFSName
	{ $current=$iv_ruleFSName.current.getText(); }
	EOF;

// Rule FSName
ruleFSName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getFSNameAccess().getIDTerminalRuleCall_0());
		}
		    |
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFSNameAccess().getFullStopKeyword_1());
		}
		    |
		kw='_'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFSNameAccess().get_Keyword_2());
		}
	)+
;

// Entry rule entryRulePath
entryRulePath returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPathRule()); }
	iv_rulePath=rulePath
	{ $current=$iv_rulePath.current.getText(); }
	EOF;

// Rule Path
rulePath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPathAccess().getFSNameParserRuleCall_0_0());
			}
			this_FSName_0=ruleFSName
			{
				$current.merge(this_FSName_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=':\\'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPathAccess().getColonReverseSolidusKeyword_0_1());
			}
		)?
		(
			kw='\\'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPathAccess().getBackslashKeyword_1_0());
			}
			    |
			kw='/'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPathAccess().getSolidusKeyword_1_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getPathAccess().getFSNameParserRuleCall_2());
		}
		this_FSName_4=ruleFSName
		{
			$current.merge(this_FSName_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				kw='\\'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getPathAccess().getBackslashKeyword_3_0_0());
				}
				    |
				kw='/'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getPathAccess().getSolidusKeyword_3_0_1());
				}
			)
			{
				newCompositeNode(grammarAccess.getPathAccess().getFSNameParserRuleCall_3_1());
			}
			this_FSName_7=ruleFSName
			{
				$current.merge(this_FSName_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleTimeUnit
entryRuleTimeUnit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTimeUnitRule()); }
	iv_ruleTimeUnit=ruleTimeUnit
	{ $current=$iv_ruleTimeUnit.current.getText(); }
	EOF;

// Rule TimeUnit
ruleTimeUnit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getTimeUnitAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleBody
entryRuleBody returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	iv_ruleBody=ruleBody
	{ $current=$iv_ruleBody.current.getText(); }
	EOF;

// Rule Body
ruleBody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBodyAccess().getTokenParserRuleCall());
		}
		this_Token_0=ruleToken
		{
			$current.merge(this_Token_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)*
;

// Entry rule entryRuleToken
entryRuleToken returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTokenRule()); }
	iv_ruleToken=ruleToken
	{ $current=$iv_ruleToken.current.getText(); }
	EOF;

// Rule Token
ruleToken returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getTokenAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getTokenAccess().getINTTerminalRuleCall_1());
		}
		    |
		this_FLOAT_EXP_SUFFIX_2=RULE_FLOAT_EXP_SUFFIX
		{
			$current.merge(this_FLOAT_EXP_SUFFIX_2);
		}
		{
			newLeafNode(this_FLOAT_EXP_SUFFIX_2, grammarAccess.getTokenAccess().getFLOAT_EXP_SUFFIXTerminalRuleCall_2());
		}
		    |
		this_LT_ANNOT_3=RULE_LT_ANNOT
		{
			$current.merge(this_LT_ANNOT_3);
		}
		{
			newLeafNode(this_LT_ANNOT_3, grammarAccess.getTokenAccess().getLT_ANNOTTerminalRuleCall_3());
		}
		    |
		this_STRING_4=RULE_STRING
		{
			$current.merge(this_STRING_4);
		}
		{
			newLeafNode(this_STRING_4, grammarAccess.getTokenAccess().getSTRINGTerminalRuleCall_4());
		}
		    |
		this_CHAR_LIT_5=RULE_CHAR_LIT
		{
			$current.merge(this_CHAR_LIT_5);
		}
		{
			newLeafNode(this_CHAR_LIT_5, grammarAccess.getTokenAccess().getCHAR_LITTerminalRuleCall_5());
		}
		    |
		this_ML_COMMENT_6=RULE_ML_COMMENT
		{
			$current.merge(this_ML_COMMENT_6);
		}
		{
			newLeafNode(this_ML_COMMENT_6, grammarAccess.getTokenAccess().getML_COMMENTTerminalRuleCall_6());
		}
		    |
		this_SL_COMMENT_7=RULE_SL_COMMENT
		{
			$current.merge(this_SL_COMMENT_7);
		}
		{
			newLeafNode(this_SL_COMMENT_7, grammarAccess.getTokenAccess().getSL_COMMENTTerminalRuleCall_7());
		}
		    |
		this_WS_8=RULE_WS
		{
			$current.merge(this_WS_8);
		}
		{
			newLeafNode(this_WS_8, grammarAccess.getTokenAccess().getWSTerminalRuleCall_8());
		}
		    |
		this_ANY_OTHER_9=RULE_ANY_OTHER
		{
			$current.merge(this_ANY_OTHER_9);
		}
		{
			newLeafNode(this_ANY_OTHER_9, grammarAccess.getTokenAccess().getANY_OTHERTerminalRuleCall_9());
		}
		    |
		kw='target'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getTargetKeyword_10());
		}
		    |
		kw='import'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getImportKeyword_11());
		}
		    |
		kw='main'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getMainKeyword_12());
		}
		    |
		kw='realtime'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getRealtimeKeyword_13());
		}
		    |
		kw='reactor'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getReactorKeyword_14());
		}
		    |
		kw='state'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getStateKeyword_15());
		}
		    |
		kw='time'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getTimeKeyword_16());
		}
		    |
		kw='mutable'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getMutableKeyword_17());
		}
		    |
		kw='input'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getInputKeyword_18());
		}
		    |
		kw='output'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getOutputKeyword_19());
		}
		    |
		kw='timer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getTimerKeyword_20());
		}
		    |
		kw='action'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getActionKeyword_21());
		}
		    |
		kw='reaction'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getReactionKeyword_22());
		}
		    |
		kw='startup'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getStartupKeyword_23());
		}
		    |
		kw='shutdown'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getShutdownKeyword_24());
		}
		    |
		kw='after'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getAfterKeyword_25());
		}
		    |
		kw='deadline'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getDeadlineKeyword_26());
		}
		    |
		kw='mutation'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getMutationKeyword_27());
		}
		    |
		kw='preamble'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getPreambleKeyword_28());
		}
		    |
		kw='new'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getNewKeyword_29());
		}
		    |
		kw='federated'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getFederatedKeyword_30());
		}
		    |
		kw='at'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getAtKeyword_31());
		}
		    |
		kw='as'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getAsKeyword_32());
		}
		    |
		kw='from'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getFromKeyword_33());
		}
		    |
		kw='widthof'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getWidthofKeyword_34());
		}
		    |
		kw='const'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getConstKeyword_35());
		}
		    |
		kw='method'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getMethodKeyword_36());
		}
		    |
		kw='interleaved'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getInterleavedKeyword_37());
		}
		    |
		kw='mode'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getModeKeyword_38());
		}
		    |
		kw='initial'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getInitialKeyword_39());
		}
		    |
		kw='reset'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getResetKeyword_40());
		}
		    |
		kw='history'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getHistoryKeyword_41());
		}
		    |
		this_NEGINT_42=RULE_NEGINT
		{
			$current.merge(this_NEGINT_42);
		}
		{
			newLeafNode(this_NEGINT_42, grammarAccess.getTokenAccess().getNEGINTTerminalRuleCall_42());
		}
		    |
		this_TRUE_43=RULE_TRUE
		{
			$current.merge(this_TRUE_43);
		}
		{
			newLeafNode(this_TRUE_43, grammarAccess.getTokenAccess().getTRUETerminalRuleCall_43());
		}
		    |
		this_FALSE_44=RULE_FALSE
		{
			$current.merge(this_FALSE_44);
		}
		{
			newLeafNode(this_FALSE_44, grammarAccess.getTokenAccess().getFALSETerminalRuleCall_44());
		}
		    |
		kw='logical'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getLogicalKeyword_45());
		}
		    |
		kw='physical'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getPhysicalKeyword_46());
		}
		    |
		kw='private'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getPrivateKeyword_47());
		}
		    |
		kw='public'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getPublicKeyword_48());
		}
		    |
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getLeftParenthesisKeyword_49());
		}
		    |
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getRightParenthesisKeyword_50());
		}
		    |
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getLeftCurlyBracketKeyword_51());
		}
		    |
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getRightCurlyBracketKeyword_52());
		}
		    |
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getLeftSquareBracketKeyword_53());
		}
		    |
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getRightSquareBracketKeyword_54());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getLessThanSignKeyword_55());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getGreaterThanSignKeyword_56());
		}
		    |
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getColonKeyword_57());
		}
		    |
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getSemicolonKeyword_58());
		}
		    |
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getCommaKeyword_59());
		}
		    |
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getFullStopKeyword_60());
		}
		    |
		kw='::'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getColonColonKeyword_61());
		}
		    |
		kw=':\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getColonReverseSolidusKeyword_62());
		}
		    |
		kw='\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getBackslashKeyword_63());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getPlusSignKeyword_64());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getHyphenMinusKeyword_65());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getAsteriskKeyword_66());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getSolidusKeyword_67());
		}
		    |
		kw='_'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().get_Keyword_68());
		}
		    |
		kw='->'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getHyphenMinusGreaterThanSignKeyword_69());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getEqualsSignKeyword_70());
		}
		    |
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getPercentSignKeyword_71());
		}
		    |
		kw='@'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getCommercialAtKeyword_72());
		}
		    |
		kw='\''
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTokenAccess().getApostropheKeyword_73());
		}
	)
;

// Rule ActionOrigin
ruleActionOrigin returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='NONE'
			{
				$current = grammarAccess.getActionOriginAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActionOriginAccess().getNONEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='logical'
			{
				$current = grammarAccess.getActionOriginAccess().getLOGICALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActionOriginAccess().getLOGICALEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='physical'
			{
				$current = grammarAccess.getActionOriginAccess().getPHYSICALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getActionOriginAccess().getPHYSICALEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Visibility
ruleVisibility returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='NONE'
			{
				$current = grammarAccess.getVisibilityAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getVisibilityAccess().getNONEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='private'
			{
				$current = grammarAccess.getVisibilityAccess().getPRIVATEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getVisibilityAccess().getPRIVATEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='public'
			{
				$current = grammarAccess.getVisibilityAccess().getPUBLICEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getVisibilityAccess().getPUBLICEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule BuiltinTrigger
ruleBuiltinTrigger returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='startup'
			{
				$current = grammarAccess.getBuiltinTriggerAccess().getSTARTUPEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBuiltinTriggerAccess().getSTARTUPEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='shutdown'
			{
				$current = grammarAccess.getBuiltinTriggerAccess().getSHUTDOWNEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBuiltinTriggerAccess().getSHUTDOWNEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='reset'
			{
				$current = grammarAccess.getBuiltinTriggerAccess().getRESETEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBuiltinTriggerAccess().getRESETEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule ModeTransition
ruleModeTransition returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='reset'
			{
				$current = grammarAccess.getModeTransitionAccess().getRESETEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getModeTransitionAccess().getRESETEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='history'
			{
				$current = grammarAccess.getModeTransitionAccess().getHISTORYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getModeTransitionAccess().getHISTORYEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_TRUE : ('true'|'True');

RULE_FALSE : ('false'|'False');

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_NEGINT : '-' ('0'..'9')+;

RULE_FLOAT_EXP_SUFFIX : RULE_INT ('e'|'E') ('+'|'-')? RULE_INT;

RULE_SL_COMMENT : ('//'|'#') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ML_COMMENT : ('/*' ( options {greedy=false;} : . )*'*/'|'\'\'\'' ( options {greedy=false;} : . )*'\'\'\'');

RULE_LT_ANNOT : '\'' RULE_ID?;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"'|'\t'|'\r'|'\n')))* '"'|'"""' ( options {greedy=false;} : . )*'"""');

RULE_CHAR_LIT : '\'' ('\\' .|~(('\\'|'\''|'\t'|'\r'|'\n'))) '\'';

RULE_ANY_OTHER : .;
