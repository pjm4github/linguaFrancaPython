#!/usr/bin/env python
""" generated source for module LfFactoryImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.EDataType
# import org.eclipse.emf.ecore.EObject
# import org.eclipse.emf.ecore.EPackage
# import org.eclipse.emf.ecore.impl.EFactoryImpl
# import org.eclipse.emf.ecore.plugin.EcorePlugin

from org.lflang.lf

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model <b>Factory</b>.
#  * <!-- end-user-doc -->
#  * @generated
#  
class LfFactoryImpl(EFactoryImpl, LfFactory):
    """ generated source for class LfFactoryImpl """
    #    * Creates the default factory implementation.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    @classmethod
    def init(cls):
        """ generated source for method init """
        try:
            theLfFactory = EPackage.Registry.INSTANCE.getEFactory(LfPackage.eNS_URI)
            if theLfFactory != None:
                return theLfFactory
        except Exception as exception:
            EcorePlugin.INSTANCE.log(exception)
        return LfFactoryImpl()

    #    * Creates an instance of the factory.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(LfFactoryImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def create(self, eClass):
        """ generated source for method create """
        if eClass.getClassifierID() == LfPackage.MODEL:
            return createModel()
        elif eClass.getClassifierID() == LfPackage.IMPORT:
            return createImport()
        elif eClass.getClassifierID() == LfPackage.REACTOR_DECL:
            return createReactorDecl()
        elif eClass.getClassifierID() == LfPackage.IMPORTED_REACTOR:
            return createImportedReactor()
        elif eClass.getClassifierID() == LfPackage.REACTOR:
            return createReactor()
        elif eClass.getClassifierID() == LfPackage.TYPE_PARM:
            return createTypeParm()
        elif eClass.getClassifierID() == LfPackage.TARGET_DECL:
            return createTargetDecl()
        elif eClass.getClassifierID() == LfPackage.STATE_VAR:
            return createStateVar()
        elif eClass.getClassifierID() == LfPackage.METHOD:
            return createMethod()
        elif eClass.getClassifierID() == LfPackage.METHOD_ARGUMENT:
            return createMethodArgument()
        elif eClass.getClassifierID() == LfPackage.INPUT:
            return createInput()
        elif eClass.getClassifierID() == LfPackage.OUTPUT:
            return createOutput()
        elif eClass.getClassifierID() == LfPackage.TIMER:
            return createTimer()
        elif eClass.getClassifierID() == LfPackage.MODE:
            return createMode()
        elif eClass.getClassifierID() == LfPackage.ACTION:
            return createAction()
        elif eClass.getClassifierID() == LfPackage.REACTION:
            return createReaction()
        elif eClass.getClassifierID() == LfPackage.TRIGGER_REF:
            return createTriggerRef()
        elif eClass.getClassifierID() == LfPackage.BUILTIN_TRIGGER_REF:
            return createBuiltinTriggerRef()
        elif eClass.getClassifierID() == LfPackage.DEADLINE:
            return createDeadline()
        elif eClass.getClassifierID() == LfPackage.STP:
            return createSTP()
        elif eClass.getClassifierID() == LfPackage.PREAMBLE:
            return createPreamble()
        elif eClass.getClassifierID() == LfPackage.INSTANTIATION:
            return createInstantiation()
        elif eClass.getClassifierID() == LfPackage.CONNECTION:
            return createConnection()
        elif eClass.getClassifierID() == LfPackage.SERIALIZER:
            return createSerializer()
        elif eClass.getClassifierID() == LfPackage.ATTRIBUTE:
            return createAttribute()
        elif eClass.getClassifierID() == LfPackage.ATTR_PARM:
            return createAttrParm()
        elif eClass.getClassifierID() == LfPackage.ATTR_PARM_VALUE:
            return createAttrParmValue()
        elif eClass.getClassifierID() == LfPackage.KEY_VALUE_PAIRS:
            return createKeyValuePairs()
        elif eClass.getClassifierID() == LfPackage.KEY_VALUE_PAIR:
            return createKeyValuePair()
        elif eClass.getClassifierID() == LfPackage.ARRAY:
            return createArray()
        elif eClass.getClassifierID() == LfPackage.ELEMENT:
            return createElement()
        elif eClass.getClassifierID() == LfPackage.TYPED_VARIABLE:
            return createTypedVariable()
        elif eClass.getClassifierID() == LfPackage.VARIABLE:
            return createVariable()
        elif eClass.getClassifierID() == LfPackage.VAR_REF:
            return createVarRef()
        elif eClass.getClassifierID() == LfPackage.ASSIGNMENT:
            return createAssignment()
        elif eClass.getClassifierID() == LfPackage.PARAMETER:
            return createParameter()
        elif eClass.getClassifierID() == LfPackage.EXPRESSION:
            return createExpression()
        elif eClass.getClassifierID() == LfPackage.PARAMETER_REFERENCE:
            return createParameterReference()
        elif eClass.getClassifierID() == LfPackage.TIME:
            return createTime()
        elif eClass.getClassifierID() == LfPackage.PORT:
            return createPort()
        elif eClass.getClassifierID() == LfPackage.TYPE:
            return createType()
        elif eClass.getClassifierID() == LfPackage.ARRAY_SPEC:
            return createArraySpec()
        elif eClass.getClassifierID() == LfPackage.WIDTH_SPEC:
            return createWidthSpec()
        elif eClass.getClassifierID() == LfPackage.WIDTH_TERM:
            return createWidthTerm()
        elif eClass.getClassifierID() == LfPackage.IPV4_HOST:
            return createIPV4Host()
        elif eClass.getClassifierID() == LfPackage.IPV6_HOST:
            return createIPV6Host()
        elif eClass.getClassifierID() == LfPackage.NAMED_HOST:
            return createNamedHost()
        elif eClass.getClassifierID() == LfPackage.HOST:
            return createHost()
        elif eClass.getClassifierID() == LfPackage.CODE:
            return createCode()
        elif eClass.getClassifierID() == LfPackage.LITERAL:
            return createLiteral()
        else:
            raise IllegalArgumentException("The class '" + eClass.__name__ + "' is not a valid classifier")

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createFromString(self, eDataType, initialValue):
        """ generated source for method createFromString """
        if eDataType.getClassifierID() == LfPackage.ACTION_ORIGIN:
            return createActionOriginFromString(eDataType, initialValue)
        elif eDataType.getClassifierID() == LfPackage.VISIBILITY:
            return createVisibilityFromString(eDataType, initialValue)
        elif eDataType.getClassifierID() == LfPackage.BUILTIN_TRIGGER:
            return createBuiltinTriggerFromString(eDataType, initialValue)
        elif eDataType.getClassifierID() == LfPackage.MODE_TRANSITION:
            return createModeTransitionFromString(eDataType, initialValue)
        else:
            raise IllegalArgumentException("The datatype '" + eDataType.__name__ + "' is not a valid classifier")

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def convertToString(self, eDataType, instanceValue):
        """ generated source for method convertToString """
        if eDataType.getClassifierID() == LfPackage.ACTION_ORIGIN:
            return convertActionOriginToString(eDataType, instanceValue)
        elif eDataType.getClassifierID() == LfPackage.VISIBILITY:
            return convertVisibilityToString(eDataType, instanceValue)
        elif eDataType.getClassifierID() == LfPackage.BUILTIN_TRIGGER:
            return convertBuiltinTriggerToString(eDataType, instanceValue)
        elif eDataType.getClassifierID() == LfPackage.MODE_TRANSITION:
            return convertModeTransitionToString(eDataType, instanceValue)
        else:
            raise IllegalArgumentException("The datatype '" + eDataType.__name__ + "' is not a valid classifier")

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createModel(self):
        """ generated source for method createModel """
        model = ModelImpl()
        return model

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createImport(self):
        """ generated source for method createImport """
        import_ = ImportImpl()
        return import_

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createReactorDecl(self):
        """ generated source for method createReactorDecl """
        reactorDecl = ReactorDeclImpl()
        return reactorDecl

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createImportedReactor(self):
        """ generated source for method createImportedReactor """
        importedReactor = ImportedReactorImpl()
        return importedReactor

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createReactor(self):
        """ generated source for method createReactor """
        reactor = ReactorImpl()
        return reactor

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createTypeParm(self):
        """ generated source for method createTypeParm """
        typeParm = TypeParmImpl()
        return typeParm

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createTargetDecl(self):
        """ generated source for method createTargetDecl """
        targetDecl = TargetDeclImpl()
        return targetDecl

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createStateVar(self):
        """ generated source for method createStateVar """
        stateVar = StateVarImpl()
        return stateVar

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createMethod(self):
        """ generated source for method createMethod """
        method_ = MethodImpl()
        return method_

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createMethodArgument(self):
        """ generated source for method createMethodArgument """
        methodArgument = MethodArgumentImpl()
        return methodArgument

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createInput(self):
        """ generated source for method createInput """
        input = InputImpl()
        return input

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createOutput(self):
        """ generated source for method createOutput """
        output = OutputImpl()
        return output

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createTimer(self):
        """ generated source for method createTimer """
        timer = TimerImpl()
        return timer

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createMode(self):
        """ generated source for method createMode """
        mode = ModeImpl()
        return mode

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createAction(self):
        """ generated source for method createAction """
        action = ActionImpl()
        return action

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createReaction(self):
        """ generated source for method createReaction """
        reaction = ReactionImpl()
        return reaction

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createTriggerRef(self):
        """ generated source for method createTriggerRef """
        triggerRef = TriggerRefImpl()
        return triggerRef

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createBuiltinTriggerRef(self):
        """ generated source for method createBuiltinTriggerRef """
        builtinTriggerRef = BuiltinTriggerRefImpl()
        return builtinTriggerRef

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createDeadline(self):
        """ generated source for method createDeadline """
        deadline = DeadlineImpl()
        return deadline

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createSTP(self):
        """ generated source for method createSTP """
        stp = STPImpl()
        return stp

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createPreamble(self):
        """ generated source for method createPreamble """
        preamble = PreambleImpl()
        return preamble

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createInstantiation(self):
        """ generated source for method createInstantiation """
        instantiation = InstantiationImpl()
        return instantiation

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createConnection(self):
        """ generated source for method createConnection """
        connection = ConnectionImpl()
        return connection

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createSerializer(self):
        """ generated source for method createSerializer """
        serializer = SerializerImpl()
        return serializer

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createAttribute(self):
        """ generated source for method createAttribute """
        attribute = AttributeImpl()
        return attribute

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createAttrParm(self):
        """ generated source for method createAttrParm """
        attrParm = AttrParmImpl()
        return attrParm

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createAttrParmValue(self):
        """ generated source for method createAttrParmValue """
        attrParmValue = AttrParmValueImpl()
        return attrParmValue

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createKeyValuePairs(self):
        """ generated source for method createKeyValuePairs """
        keyValuePairs = KeyValuePairsImpl()
        return keyValuePairs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createKeyValuePair(self):
        """ generated source for method createKeyValuePair """
        keyValuePair = KeyValuePairImpl()
        return keyValuePair

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createArray(self):
        """ generated source for method createArray """
        array = ArrayImpl()
        return array

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createElement(self):
        """ generated source for method createElement """
        element = ElementImpl()
        return element

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createTypedVariable(self):
        """ generated source for method createTypedVariable """
        typedVariable = TypedVariableImpl()
        return typedVariable

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createVariable(self):
        """ generated source for method createVariable """
        variable = VariableImpl()
        return variable

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createVarRef(self):
        """ generated source for method createVarRef """
        varRef = VarRefImpl()
        return varRef

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createAssignment(self):
        """ generated source for method createAssignment """
        assignment = AssignmentImpl()
        return assignment

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createParameter(self):
        """ generated source for method createParameter """
        parameter = ParameterImpl()
        return parameter

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createExpression(self):
        """ generated source for method createExpression """
        expression = ExpressionImpl()
        return expression

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createParameterReference(self):
        """ generated source for method createParameterReference """
        parameterReference = ParameterReferenceImpl()
        return parameterReference

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createTime(self):
        """ generated source for method createTime """
        time = TimeImpl()
        return time

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createPort(self):
        """ generated source for method createPort """
        port = PortImpl()
        return port

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createType(self):
        """ generated source for method createType """
        type = TypeImpl()
        return type

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createArraySpec(self):
        """ generated source for method createArraySpec """
        arraySpec = ArraySpecImpl()
        return arraySpec

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createWidthSpec(self):
        """ generated source for method createWidthSpec """
        widthSpec = WidthSpecImpl()
        return widthSpec

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createWidthTerm(self):
        """ generated source for method createWidthTerm """
        widthTerm = WidthTermImpl()
        return widthTerm

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createIPV4Host(self):
        """ generated source for method createIPV4Host """
        ipv4Host = IPV4HostImpl()
        return ipv4Host

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createIPV6Host(self):
        """ generated source for method createIPV6Host """
        ipv6Host = IPV6HostImpl()
        return ipv6Host

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createNamedHost(self):
        """ generated source for method createNamedHost """
        namedHost = NamedHostImpl()
        return namedHost

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createHost(self):
        """ generated source for method createHost """
        host = HostImpl()
        return host

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createCode(self):
        """ generated source for method createCode """
        code_ = CodeImpl()
        return code_

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createLiteral(self):
        """ generated source for method createLiteral """
        literal = LiteralImpl()
        return literal

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createActionOriginFromString(self, eDataType, initialValue):
        """ generated source for method createActionOriginFromString """
        result = ActionOrigin.get(initialValue)
        if result == None:
            raise IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.__name__ + "'")
        return result

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def convertActionOriginToString(self, eDataType, instanceValue):
        """ generated source for method convertActionOriginToString """
        return None if instanceValue == None else instanceValue.__str__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createVisibilityFromString(self, eDataType, initialValue):
        """ generated source for method createVisibilityFromString """
        result = Visibility.get(initialValue)
        if result == None:
            raise IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.__name__ + "'")
        return result

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def convertVisibilityToString(self, eDataType, instanceValue):
        """ generated source for method convertVisibilityToString """
        return None if instanceValue == None else instanceValue.__str__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createBuiltinTriggerFromString(self, eDataType, initialValue):
        """ generated source for method createBuiltinTriggerFromString """
        result = BuiltinTrigger.get(initialValue)
        if result == None:
            raise IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.__name__ + "'")
        return result

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def convertBuiltinTriggerToString(self, eDataType, instanceValue):
        """ generated source for method convertBuiltinTriggerToString """
        return None if instanceValue == None else instanceValue.__str__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def createModeTransitionFromString(self, eDataType, initialValue):
        """ generated source for method createModeTransitionFromString """
        result = ModeTransition.get(initialValue)
        if result == None:
            raise IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.__name__ + "'")
        return result

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def convertModeTransitionToString(self, eDataType, instanceValue):
        """ generated source for method convertModeTransitionToString """
        return None if instanceValue == None else instanceValue.__str__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getLfPackage(self):
        """ generated source for method getLfPackage """
        return getEPackage()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @deprecated
    #    * @generated
    #    
    @classmethod
    def getPackage(cls):
        """ generated source for method getPackage """
        return LfPackage.eINSTANCE

# LfFactoryImpl
