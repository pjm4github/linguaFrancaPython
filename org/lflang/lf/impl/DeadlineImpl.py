#!/usr/bin/env python
""" generated source for module DeadlineImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl

from org.lflang.lf import LFCode

from org.lflang.lf import Deadline

from org.lflang.lf import Expression

from org.lflang.lf import LfPackage

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Deadline</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.DeadlineImpl#getDelay <em>Delay</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.DeadlineImpl#getCode <em>Code</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class DeadlineImpl(MinimalEObjectImpl, Container, Deadline):
    """ generated source for class DeadlineImpl """
    #    * The cached value of the '{@link #getDelay() <em>Delay</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getDelay()
    #    * @generated
    #    * @ordered
    #    
    delay = None

    #    * The cached value of the '{@link #getCode() <em>Code</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getCode()
    #    * @generated
    #    * @ordered
    #    
    code_ = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(DeadlineImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.DEADLINE

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getDelay(self):
        """ generated source for method getDelay """
        return self.delay

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetDelay(self, newDelay, msgs):
        """ generated source for method basicSetDelay """
        oldDelay = self.delay
        self.delay = newDelay
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.DEADLINE__DELAY, oldDelay, newDelay)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setDelay(self, newDelay):
        """ generated source for method setDelay """
        if newDelay != self.delay:
            msgs = None
            if self.delay != None:
                msgs = (self.delay).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.DEADLINE__DELAY, None, msgs)
            if newDelay != None:
                msgs = (newDelay).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.DEADLINE__DELAY, None, msgs)
            msgs = self.basicSetDelay(newDelay, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.DEADLINE__DELAY, newDelay, newDelay))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getCode(self):
        """ generated source for method getCode """
        return self.code_

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetCode(self, newCode, msgs):
        """ generated source for method basicSetCode """
        oldCode = self.code_
        self.code_ = newCode
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.DEADLINE__CODE, oldCode, newCode)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setCode(self, newCode):
        """ generated source for method setCode """
        if newCode != self.code_:
            msgs = None
            if self.code_ != None:
                msgs = (self.code_).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.DEADLINE__CODE, None, msgs)
            if newCode != None:
                msgs = (newCode).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.DEADLINE__CODE, None, msgs)
            msgs = self.basicSetCode(newCode, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.DEADLINE__CODE, newCode, newCode))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.DEADLINE__DELAY:
            return self.basicSetDelay(None, msgs)
        elif featureID == LfPackage.DEADLINE__CODE:
            return self.basicSetCode(None, msgs)
        return super(DeadlineImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.DEADLINE__DELAY:
            return self.getDelay()
        elif featureID == LfPackage.DEADLINE__CODE:
            return self.getCode()
        return super(DeadlineImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.DEADLINE__DELAY:
            self.setDelay(newValue)
            return
        elif featureID == LfPackage.DEADLINE__CODE:
            self.setCode(newValue)
            return
        super(DeadlineImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.DEADLINE__DELAY:
            self.setDelay(None)
            return
        elif featureID == LfPackage.DEADLINE__CODE:
            self.setCode(None)
            return
        super(DeadlineImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.DEADLINE__DELAY:
            return self.delay != None
        elif featureID == LfPackage.DEADLINE__CODE:
            return self.code_ != None
        return super(DeadlineImpl, self).eIsSet(featureID)

# DeadlineImpl
