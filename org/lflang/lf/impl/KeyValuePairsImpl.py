#!/usr/bin/env python
""" generated source for module KeyValuePairsImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import java.util.Collection
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.common.util.EList
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl
# import org.eclipse.emf.ecore.util.EObjectContainmentEList
# import org.eclipse.emf.ecore.util.InternalEList

from org.lflang.lf import KeyValuePair

from org.lflang.lf import KeyValuePairs

from org.lflang.lf import LfPackage

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Key Value Pairs</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.KeyValuePairsImpl#getPairs <em>Pairs</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class KeyValuePairsImpl(MinimalEObjectImpl, Container, KeyValuePairs):
    """ generated source for class KeyValuePairsImpl """
    #    * The cached value of the '{@link #getPairs() <em>Pairs</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getPairs()
    #    * @generated
    #    * @ordered
    #    
    pairs = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(KeyValuePairsImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.KEY_VALUE_PAIRS

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getPairs(self):
        """ generated source for method getPairs """
        if self.pairs == None:
            self.pairs = EObjectContainmentEList(KeyValuePair.__class__, self, LfPackage.KEY_VALUE_PAIRS__PAIRS)
        return self.pairs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.KEY_VALUE_PAIRS__PAIRS:
            return (self.getPairs()).basicRemove(otherEnd, msgs)
        return super(KeyValuePairsImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.KEY_VALUE_PAIRS__PAIRS:
            return self.getPairs()
        return super(KeyValuePairsImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    @SuppressWarnings("unchecked")
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.KEY_VALUE_PAIRS__PAIRS:
            self.getPairs().clear()
            self.getPairs().extend([newValue])
            return
        super(KeyValuePairsImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.KEY_VALUE_PAIRS__PAIRS:
            self.getPairs().clear()
            return
        super(KeyValuePairsImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.KEY_VALUE_PAIRS__PAIRS:
            return self.pairs != None and not self.pairs.isEmpty()
        return super(KeyValuePairsImpl, self).eIsSet(featureID)

# KeyValuePairsImpl
