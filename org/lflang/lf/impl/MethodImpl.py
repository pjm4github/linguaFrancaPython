#!/usr/bin/env python
""" generated source for module MethodImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import java.util.Collection
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.common.util.EList
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl
# import org.eclipse.emf.ecore.util.EObjectContainmentEList
# import org.eclipse.emf.ecore.util.InternalEList

from org.lflang.lf import LFCode

from org.lflang.lf import LfPackage

from org.lflang.lf import Method

from org.lflang.lf import MethodArgument

from org.lflang.lf import Type

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Method</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.MethodImpl#isConst <em>Const</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.MethodImpl#getName <em>Name</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.MethodImpl#getArguments <em>Arguments</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.MethodImpl#getReturn <em>Return</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.MethodImpl#getCode <em>Code</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class MethodImpl(MinimalEObjectImpl, Container, Method):
    """ generated source for class MethodImpl """
    #    * The default value of the '{@link #isConst() <em>Const</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isConst()
    #    * @generated
    #    * @ordered
    #    
    CONST_EDEFAULT = False

    #    * The cached value of the '{@link #isConst() <em>Const</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isConst()
    #    * @generated
    #    * @ordered
    #    
    const_ = CONST_EDEFAULT

    #    * The default value of the '{@link #getName() <em>Name</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getName()
    #    * @generated
    #    * @ordered
    #    
    NAME_EDEFAULT = None

    #    * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getName()
    #    * @generated
    #    * @ordered
    #    
    name = NAME_EDEFAULT

    #    * The cached value of the '{@link #getArguments() <em>Arguments</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getArguments()
    #    * @generated
    #    * @ordered
    #    
    arguments = None

    #    * The cached value of the '{@link #getReturn() <em>Return</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getReturn()
    #    * @generated
    #    * @ordered
    #    
    return_ = None

    #    * The cached value of the '{@link #getCode() <em>Code</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getCode()
    #    * @generated
    #    * @ordered
    #    
    code_ = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(MethodImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.METHOD

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def isConst(self):
        """ generated source for method isConst """
        return self.const_

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setConst(self, newConst):
        """ generated source for method setConst """
        oldConst = self.const_
        self.const_ = newConst
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.METHOD__CONST, oldConst, self.const_))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getName(self):
        """ generated source for method getName """
        return self.name

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setName(self, newName):
        """ generated source for method setName """
        oldName = self.name
        self.name = newName
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.METHOD__NAME, oldName, self.name))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getArguments(self):
        """ generated source for method getArguments """
        if self.arguments == None:
            self.arguments = EObjectContainmentEList(MethodArgument.__class__, self, LfPackage.METHOD__ARGUMENTS)
        return self.arguments

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getReturn(self):
        """ generated source for method getReturn """
        return self.return_

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetReturn(self, newReturn, msgs):
        """ generated source for method basicSetReturn """
        oldReturn = self.return_
        self.return_ = newReturn
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.METHOD__RETURN, oldReturn, newReturn)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setReturn(self, newReturn):
        """ generated source for method setReturn """
        if newReturn != self.return_:
            msgs = None
            if self.return_ != None:
                msgs = (self.return_).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.METHOD__RETURN, None, msgs)
            if newReturn != None:
                msgs = (newReturn).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.METHOD__RETURN, None, msgs)
            msgs = self.basicSetReturn(newReturn, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.METHOD__RETURN, newReturn, newReturn))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getCode(self):
        """ generated source for method getCode """
        return self.code_

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetCode(self, newCode, msgs):
        """ generated source for method basicSetCode """
        oldCode = self.code_
        self.code_ = newCode
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.METHOD__CODE, oldCode, newCode)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setCode(self, newCode):
        """ generated source for method setCode """
        if newCode != self.code_:
            msgs = None
            if self.code_ != None:
                msgs = (self.code_).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.METHOD__CODE, None, msgs)
            if newCode != None:
                msgs = (newCode).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.METHOD__CODE, None, msgs)
            msgs = self.basicSetCode(newCode, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.METHOD__CODE, newCode, newCode))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.METHOD__ARGUMENTS:
            return (self.getArguments()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.METHOD__RETURN:
            return self.basicSetReturn(None, msgs)
        elif featureID == LfPackage.METHOD__CODE:
            return self.basicSetCode(None, msgs)
        return super(MethodImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.METHOD__CONST:
            return self.isConst()
        elif featureID == LfPackage.METHOD__NAME:
            return self.__name__
        elif featureID == LfPackage.METHOD__ARGUMENTS:
            return self.getArguments()
        elif featureID == LfPackage.METHOD__RETURN:
            return self.getReturn()
        elif featureID == LfPackage.METHOD__CODE:
            return self.getCode()
        return super(MethodImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    @SuppressWarnings("unchecked")
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.METHOD__CONST:
            self.setConst(bool(newValue))
            return
        elif featureID == LfPackage.METHOD__NAME:
            self.setName(str(newValue))
            return
        elif featureID == LfPackage.METHOD__ARGUMENTS:
            self.getArguments().clear()
            self.getArguments().extend(newValue)
            return
        elif featureID == LfPackage.METHOD__RETURN:
            self.setReturn(newValue)
            return
        elif featureID == LfPackage.METHOD__CODE:
            self.setCode(newValue)
            return
        super(MethodImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.METHOD__CONST:
            self.setConst(self.CONST_EDEFAULT)
            return
        elif featureID == LfPackage.METHOD__NAME:
            self.setName(self.NAME_EDEFAULT)
            return
        elif featureID == LfPackage.METHOD__ARGUMENTS:
            self.getArguments().clear()
            return
        elif featureID == LfPackage.METHOD__RETURN:
            self.setReturn(None)
            return
        elif featureID == LfPackage.METHOD__CODE:
            self.setCode(None)
            return
        super(MethodImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.METHOD__CONST:
            return self.const_ != self.CONST_EDEFAULT
        elif featureID == LfPackage.METHOD__NAME:
            return self.name != None if self.NAME_EDEFAULT == None else not self.NAME_EDEFAULT == self.name
        elif featureID == LfPackage.METHOD__ARGUMENTS:
            return self.arguments != None and not self.arguments.isEmpty()
        elif featureID == LfPackage.METHOD__RETURN:
            return self.return_ != None
        elif featureID == LfPackage.METHOD__CODE:
            return self.code_ != None
        return super(MethodImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(MethodImpl, self).__str__()
        result = StringBuilder(super(MethodImpl, self).__str__())
        result.append(" (const: ")
        result.append(self.const_)
        result.append(", name: ")
        result.append(self.name)
        result.append(')')
        return result.__str__()

# MethodImpl
