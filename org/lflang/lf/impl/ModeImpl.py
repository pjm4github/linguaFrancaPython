#!/usr/bin/env python
""" generated source for module ModeImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import java.util.Collection
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.common.util.EList
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.util.EObjectContainmentEList
# import org.eclipse.emf.ecore.util.InternalEList

from org.lflang.lf import Action

from org.lflang.lf import Connection

from org.lflang.lf import Instantiation

from org.lflang.lf import LfPackage

from org.lflang.lf import Mode

from org.lflang.lf import Reaction

from org.lflang.lf import StateVar

from org.lflang.lf import Timer

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Mode</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.ModeImpl#isInitial <em>Initial</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ModeImpl#getStateVars <em>State Vars</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ModeImpl#getTimers <em>Timers</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ModeImpl#getActions <em>Actions</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ModeImpl#getInstantiations <em>Instantiations</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ModeImpl#getConnections <em>Connections</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ModeImpl#getReactions <em>Reactions</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class ModeImpl(VariableImpl, Mode):
    """ generated source for class ModeImpl """
    #    * The default value of the '{@link #isInitial() <em>Initial</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isInitial()
    #    * @generated
    #    * @ordered
    #    
    INITIAL_EDEFAULT = False

    #    * The cached value of the '{@link #isInitial() <em>Initial</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isInitial()
    #    * @generated
    #    * @ordered
    #    
    initial = INITIAL_EDEFAULT

    #    * The cached value of the '{@link #getStateVars() <em>State Vars</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getStateVars()
    #    * @generated
    #    * @ordered
    #    
    stateVars = None

    #    * The cached value of the '{@link #getTimers() <em>Timers</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getTimers()
    #    * @generated
    #    * @ordered
    #    
    timers = None

    #    * The cached value of the '{@link #getActions() <em>Actions</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getActions()
    #    * @generated
    #    * @ordered
    #    
    actions = None

    #    * The cached value of the '{@link #getInstantiations() <em>Instantiations</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getInstantiations()
    #    * @generated
    #    * @ordered
    #    
    instantiations = None

    #    * The cached value of the '{@link #getConnections() <em>Connections</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getConnections()
    #    * @generated
    #    * @ordered
    #    
    connections = None

    #    * The cached value of the '{@link #getReactions() <em>Reactions</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getReactions()
    #    * @generated
    #    * @ordered
    #    
    reactions = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(ModeImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.MODE

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def isInitial(self):
        """ generated source for method isInitial """
        return self.initial

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setInitial(self, newInitial):
        """ generated source for method setInitial """
        oldInitial = self.initial
        self.initial = newInitial
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.MODE__INITIAL, oldInitial, self.initial))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getStateVars(self):
        """ generated source for method getStateVars """
        if self.stateVars == None:
            self.stateVars = EObjectContainmentEList(StateVar.__class__, self, LfPackage.MODE__STATE_VARS)
        return self.stateVars

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getTimers(self):
        """ generated source for method getTimers """
        if self.timers == None:
            self.timers = EObjectContainmentEList(Timer.__class__, self, LfPackage.MODE__TIMERS)
        return self.timers

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getActions(self):
        """ generated source for method getActions """
        if self.actions == None:
            self.actions = EObjectContainmentEList(Action.__class__, self, LfPackage.MODE__ACTIONS)
        return self.actions

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getInstantiations(self):
        """ generated source for method getInstantiations """
        if self.instantiations == None:
            self.instantiations = EObjectContainmentEList(Instantiation.__class__, self, LfPackage.MODE__INSTANTIATIONS)
        return self.instantiations

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getConnections(self):
        """ generated source for method getConnections """
        if self.connections == None:
            self.connections = EObjectContainmentEList(Connection.__class__, self, LfPackage.MODE__CONNECTIONS)
        return self.connections

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getReactions(self):
        """ generated source for method getReactions """
        if self.reactions == None:
            self.reactions = EObjectContainmentEList(Reaction.__class__, self, LfPackage.MODE__REACTIONS)
        return self.reactions

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.MODE__STATE_VARS:
            return (self.getStateVars()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.MODE__TIMERS:
            return (self.getTimers()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.MODE__ACTIONS:
            return (self.getActions()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.MODE__INSTANTIATIONS:
            return (self.getInstantiations()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.MODE__CONNECTIONS:
            return (self.getConnections()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.MODE__REACTIONS:
            return (self.getReactions()).basicRemove(otherEnd, msgs)
        return super(ModeImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.MODE__INITIAL:
            return self.isInitial()
        elif featureID == LfPackage.MODE__STATE_VARS:
            return self.getStateVars()
        elif featureID == LfPackage.MODE__TIMERS:
            return self.getTimers()
        elif featureID == LfPackage.MODE__ACTIONS:
            return self.getActions()
        elif featureID == LfPackage.MODE__INSTANTIATIONS:
            return self.getInstantiations()
        elif featureID == LfPackage.MODE__CONNECTIONS:
            return self.getConnections()
        elif featureID == LfPackage.MODE__REACTIONS:
            return self.getReactions()
        return super(ModeImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    @SuppressWarnings("unchecked")
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.MODE__INITIAL:
            self.setInitial(bool(newValue))
            return
        elif featureID == LfPackage.MODE__STATE_VARS:
            self.getStateVars().clear()
            self.getStateVars().extend(newValue)
            return
        elif featureID == LfPackage.MODE__TIMERS:
            self.getTimers().clear()
            self.getTimers().extend(newValue)
            return
        elif featureID == LfPackage.MODE__ACTIONS:
            self.getActions().clear()
            self.getActions().extend(newValue)
            return
        elif featureID == LfPackage.MODE__INSTANTIATIONS:
            self.getInstantiations().clear()
            self.getInstantiations().extend(newValue)
            return
        elif featureID == LfPackage.MODE__CONNECTIONS:
            self.getConnections().clear()
            self.getConnections().extend(newValue)
            return
        elif featureID == LfPackage.MODE__REACTIONS:
            self.getReactions().clear()
            self.getReactions().extend(newValue)
            return
        super(ModeImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.MODE__INITIAL:
            self.setInitial(self.INITIAL_EDEFAULT)
            return
        elif featureID == LfPackage.MODE__STATE_VARS:
            self.getStateVars().clear()
            return
        elif featureID == LfPackage.MODE__TIMERS:
            self.getTimers().clear()
            return
        elif featureID == LfPackage.MODE__ACTIONS:
            self.getActions().clear()
            return
        elif featureID == LfPackage.MODE__INSTANTIATIONS:
            self.getInstantiations().clear()
            return
        elif featureID == LfPackage.MODE__CONNECTIONS:
            self.getConnections().clear()
            return
        elif featureID == LfPackage.MODE__REACTIONS:
            self.getReactions().clear()
            return
        super(ModeImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.MODE__INITIAL:
            return self.initial != self.INITIAL_EDEFAULT
        elif featureID == LfPackage.MODE__STATE_VARS:
            return self.stateVars != None and not self.stateVars.isEmpty()
        elif featureID == LfPackage.MODE__TIMERS:
            return self.timers != None and not self.timers.isEmpty()
        elif featureID == LfPackage.MODE__ACTIONS:
            return self.actions != None and not self.actions.isEmpty()
        elif featureID == LfPackage.MODE__INSTANTIATIONS:
            return self.instantiations != None and not self.instantiations.isEmpty()
        elif featureID == LfPackage.MODE__CONNECTIONS:
            return self.connections != None and not self.connections.isEmpty()
        elif featureID == LfPackage.MODE__REACTIONS:
            return self.reactions != None and not self.reactions.isEmpty()
        return super(ModeImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(ModeImpl, self).__str__()
        result = StringBuilder(super(ModeImpl, self).__str__())
        result.append(" (initial: ")
        result.append(self.initial)
        result.append(')')
        return result.__str__()

# ModeImpl
