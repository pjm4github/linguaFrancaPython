#!/usr/bin/env python
""" generated source for module SerializerImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl

from org.lflang.lf import LfPackage

from org.lflang.lf import Serializer

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Serializer</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.SerializerImpl#getType <em>Type</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class SerializerImpl(MinimalEObjectImpl, Container, Serializer):
    """ generated source for class SerializerImpl """
    #    * The default value of the '{@link #getType() <em>Type</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getType()
    #    * @generated
    #    * @ordered
    #    
    TYPE_EDEFAULT = None

    #    * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getType()
    #    * @generated
    #    * @ordered
    #    
    type = TYPE_EDEFAULT

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(SerializerImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.SERIALIZER

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getType(self):
        """ generated source for method getType """
        return self.type

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setType(self, newType):
        """ generated source for method setType """
        oldType = self.type
        self.type = newType
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.SERIALIZER__TYPE, oldType, self.type))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.SERIALIZER__TYPE:
            return self.getType()
        return super(SerializerImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.SERIALIZER__TYPE:
            self.setType(str(newValue))
            return
        super(SerializerImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.SERIALIZER__TYPE:
            self.setType(self.TYPE_EDEFAULT)
            return
        super(SerializerImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.SERIALIZER__TYPE:
            return self.type != None if self.TYPE_EDEFAULT == None else not self.TYPE_EDEFAULT == self.type
        return super(SerializerImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(SerializerImpl, self).__str__()
        result = StringBuilder(super(SerializerImpl, self).__str__())
        result.append(" (type: ")
        result.append(self.type)
        result.append(')')
        return result.__str__()

# SerializerImpl
