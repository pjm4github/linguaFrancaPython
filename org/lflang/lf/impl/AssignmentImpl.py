#!/usr/bin/env python
""" generated source for module AssignmentImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import java.util.Collection
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.common.util.EList
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl
# import org.eclipse.emf.ecore.util.EDataTypeEList
# import org.eclipse.emf.ecore.util.EObjectContainmentEList
# import org.eclipse.emf.ecore.util.InternalEList

from org.lflang.lf import Assignment

from org.lflang.lf import Expression

from org.lflang.lf import LfPackage

from org.lflang.lf import Parameter

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Assignment</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.AssignmentImpl#getLhs <em>Lhs</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.AssignmentImpl#getEquals <em>Equals</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.AssignmentImpl#getRhs <em>Rhs</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.AssignmentImpl#getParens <em>Parens</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.AssignmentImpl#getBraces <em>Braces</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class AssignmentImpl(MinimalEObjectImpl, Container, Assignment):
    """ generated source for class AssignmentImpl """
    #    * The cached value of the '{@link #getLhs() <em>Lhs</em>}' reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getLhs()
    #    * @generated
    #    * @ordered
    #    
    lhs = None

    #    * The default value of the '{@link #getEquals() <em>Equals</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getEquals()
    #    * @generated
    #    * @ordered
    #    
    EQUALS_EDEFAULT = None

    #    * The cached value of the '{@link #getEquals() <em>Equals</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getEquals()
    #    * @generated
    #    * @ordered
    #    
    equals = EQUALS_EDEFAULT

    #    * The cached value of the '{@link #getRhs() <em>Rhs</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getRhs()
    #    * @generated
    #    * @ordered
    #    
    rhs = None

    #    * The cached value of the '{@link #getParens() <em>Parens</em>}' attribute list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getParens()
    #    * @generated
    #    * @ordered
    #    
    parens = None

    #    * The cached value of the '{@link #getBraces() <em>Braces</em>}' attribute list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getBraces()
    #    * @generated
    #    * @ordered
    #    
    braces = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(AssignmentImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.ASSIGNMENT

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getLhs(self):
        """ generated source for method getLhs """
        if self.lhs != None and self.lhs.eIsProxy():
            oldLhs = self.lhs
            self.lhs = eResolveProxy(oldLhs)
            if self.lhs != oldLhs:
                if eNotificationRequired():
                    eNotify(ENotificationImpl(self, Notification.RESOLVE, LfPackage.ASSIGNMENT__LHS, oldLhs, self.lhs))
        return self.lhs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicGetLhs(self):
        """ generated source for method basicGetLhs """
        return self.lhs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setLhs(self, newLhs):
        """ generated source for method setLhs """
        oldLhs = self.lhs
        self.lhs = newLhs
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.ASSIGNMENT__LHS, oldLhs, self.lhs))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getEquals(self):
        """ generated source for method getEquals """
        return self.equals

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setEquals(self, newEquals):
        """ generated source for method setEquals """
        oldEquals = self.equals
        self.equals = newEquals
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.ASSIGNMENT__EQUALS, oldEquals, self.equals))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getRhs(self):
        """ generated source for method getRhs """
        if self.rhs == None:
            self.rhs = EObjectContainmentEList(Expression.__class__, self, LfPackage.ASSIGNMENT__RHS)
        return self.rhs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getParens(self):
        """ generated source for method getParens """
        if self.parens == None:
            self.parens = EDataTypeEList(String.__class__, self, LfPackage.ASSIGNMENT__PARENS)
        return self.parens

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getBraces(self):
        """ generated source for method getBraces """
        if self.braces == None:
            self.braces = EDataTypeEList(String.__class__, self, LfPackage.ASSIGNMENT__BRACES)
        return self.braces

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.ASSIGNMENT__RHS:
            return (self.getRhs()).basicRemove(otherEnd, msgs)
        return super(AssignmentImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.ASSIGNMENT__LHS:
            if resolve:
                return self.getLhs()
            return self.basicGetLhs()
        elif featureID == LfPackage.ASSIGNMENT__EQUALS:
            return self.getEquals()
        elif featureID == LfPackage.ASSIGNMENT__RHS:
            return self.getRhs()
        elif featureID == LfPackage.ASSIGNMENT__PARENS:
            return self.getParens()
        elif featureID == LfPackage.ASSIGNMENT__BRACES:
            return self.getBraces()
        return super(AssignmentImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    @SuppressWarnings("unchecked")
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.ASSIGNMENT__LHS:
            self.setLhs(newValue)
            return
        elif featureID == LfPackage.ASSIGNMENT__EQUALS:
            self.setEquals(str(newValue))
            return
        elif featureID == LfPackage.ASSIGNMENT__RHS:
            self.getRhs().clear()
            self.getRhs().extend(newValue)
            return
        elif featureID == LfPackage.ASSIGNMENT__PARENS:
            self.getParens().clear()
            self.getParens().extend(newValue)
            return
        elif featureID == LfPackage.ASSIGNMENT__BRACES:
            self.getBraces().clear()
            self.getBraces().extend(newValue)
            return
        super(AssignmentImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.ASSIGNMENT__LHS:
            self.setLhs(None)
            return
        elif featureID == LfPackage.ASSIGNMENT__EQUALS:
            self.setEquals(self.EQUALS_EDEFAULT)
            return
        elif featureID == LfPackage.ASSIGNMENT__RHS:
            self.getRhs().clear()
            return
        elif featureID == LfPackage.ASSIGNMENT__PARENS:
            self.getParens().clear()
            return
        elif featureID == LfPackage.ASSIGNMENT__BRACES:
            self.getBraces().clear()
            return
        super(AssignmentImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.ASSIGNMENT__LHS:
            return self.lhs != None
        elif featureID == LfPackage.ASSIGNMENT__EQUALS:
            return self.equals != None if self.EQUALS_EDEFAULT == None else not self.EQUALS_EDEFAULT == self.equals
        elif featureID == LfPackage.ASSIGNMENT__RHS:
            return self.rhs != None and not self.rhs.isEmpty()
        elif featureID == LfPackage.ASSIGNMENT__PARENS:
            return self.parens != None and not self.parens.isEmpty()
        elif featureID == LfPackage.ASSIGNMENT__BRACES:
            return self.braces != None and not self.braces.isEmpty()
        return super(AssignmentImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(AssignmentImpl, self).__str__()
        result = StringBuilder(super(AssignmentImpl, self).__str__())
        result.append(" (equals: ")
        result.append(self.equals)
        result.append(", parens: ")
        result.append(self.parens)
        result.append(", braces: ")
        result.append(self.braces)
        result.append(')')
        return result.__str__()

# AssignmentImpl
