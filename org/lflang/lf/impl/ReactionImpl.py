#!/usr/bin/env python
""" generated source for module ReactionImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import java.util.Collection
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.common.util.EList
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl
# import org.eclipse.emf.ecore.util.EObjectContainmentEList
# import org.eclipse.emf.ecore.util.InternalEList

from org.lflang.lf import Attribute

from org.lflang.lf import LFCode

from org.lflang.lf import Deadline

from org.lflang.lf import LfPackage

from org.lflang.lf import Reaction

from org.lflang.lf import STP

from org.lflang.lf import TriggerRef

from org.lflang.lf import VarRef

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Reaction</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.ReactionImpl#getAttributes <em>Attributes</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactionImpl#isMutation <em>Mutation</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactionImpl#getTriggers <em>Triggers</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactionImpl#getSources <em>Sources</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactionImpl#getEffects <em>Effects</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactionImpl#getCode <em>Code</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactionImpl#getStp <em>Stp</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactionImpl#getDeadline <em>Deadline</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class ReactionImpl(MinimalEObjectImpl, Container, Reaction):
    """ generated source for class ReactionImpl """
    #    * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getAttributes()
    #    * @generated
    #    * @ordered
    #    
    attributes = None

    #    * The default value of the '{@link #isMutation() <em>Mutation</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isMutation()
    #    * @generated
    #    * @ordered
    #    
    MUTATION_EDEFAULT = False

    #    * The cached value of the '{@link #isMutation() <em>Mutation</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isMutation()
    #    * @generated
    #    * @ordered
    #    
    mutation = MUTATION_EDEFAULT

    #    * The cached value of the '{@link #getTriggers() <em>Triggers</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getTriggers()
    #    * @generated
    #    * @ordered
    #    
    triggers = None

    #    * The cached value of the '{@link #getSources() <em>Sources</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getSources()
    #    * @generated
    #    * @ordered
    #    
    sources = None

    #    * The cached value of the '{@link #getEffects() <em>Effects</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getEffects()
    #    * @generated
    #    * @ordered
    #    
    effects = None

    #    * The cached value of the '{@link #getCode() <em>Code</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getCode()
    #    * @generated
    #    * @ordered
    #    
    code_ = None

    #    * The cached value of the '{@link #getStp() <em>Stp</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getStp()
    #    * @generated
    #    * @ordered
    #    
    stp = None

    #    * The cached value of the '{@link #getDeadline() <em>Deadline</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getDeadline()
    #    * @generated
    #    * @ordered
    #    
    deadline = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(ReactionImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.REACTION

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getAttributes(self):
        """ generated source for method getAttributes """
        if self.attributes == None:
            self.attributes = EObjectContainmentEList(Attribute.__class__, self, LfPackage.REACTION__ATTRIBUTES)
        return self.attributes

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def isMutation(self):
        """ generated source for method isMutation """
        return self.mutation

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setMutation(self, newMutation):
        """ generated source for method setMutation """
        oldMutation = self.mutation
        self.mutation = newMutation
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.REACTION__MUTATION, oldMutation, self.mutation))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getTriggers(self):
        """ generated source for method getTriggers """
        if self.triggers == None:
            self.triggers = EObjectContainmentEList(TriggerRef.__class__, self, LfPackage.REACTION__TRIGGERS)
        return self.triggers

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getSources(self):
        """ generated source for method getSources """
        if self.sources == None:
            self.sources = EObjectContainmentEList(VarRef.__class__, self, LfPackage.REACTION__SOURCES)
        return self.sources

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getEffects(self):
        """ generated source for method getEffects """
        if self.effects == None:
            self.effects = EObjectContainmentEList(VarRef.__class__, self, LfPackage.REACTION__EFFECTS)
        return self.effects

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getCode(self):
        """ generated source for method getCode """
        return self.code_

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetCode(self, newCode, msgs):
        """ generated source for method basicSetCode """
        oldCode = self.code_
        self.code_ = newCode
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.REACTION__CODE, oldCode, newCode)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setCode(self, newCode):
        """ generated source for method setCode """
        if newCode != self.code_:
            msgs = None
            if self.code_ != None:
                msgs = (self.code_).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.REACTION__CODE, None, msgs)
            if newCode != None:
                msgs = (newCode).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.REACTION__CODE, None, msgs)
            msgs = self.basicSetCode(newCode, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.REACTION__CODE, newCode, newCode))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getStp(self):
        """ generated source for method getStp """
        return self.stp

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetStp(self, newStp, msgs):
        """ generated source for method basicSetStp """
        oldStp = self.stp
        self.stp = newStp
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.REACTION__STP, oldStp, newStp)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setStp(self, newStp):
        """ generated source for method setStp """
        if newStp != self.stp:
            msgs = None
            if self.stp != None:
                msgs = (self.stp).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.REACTION__STP, None, msgs)
            if newStp != None:
                msgs = (newStp).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.REACTION__STP, None, msgs)
            msgs = self.basicSetStp(newStp, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.REACTION__STP, newStp, newStp))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getDeadline(self):
        """ generated source for method getDeadline """
        return self.deadline

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetDeadline(self, newDeadline, msgs):
        """ generated source for method basicSetDeadline """
        oldDeadline = self.deadline
        self.deadline = newDeadline
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.REACTION__DEADLINE, oldDeadline, newDeadline)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setDeadline(self, newDeadline):
        """ generated source for method setDeadline """
        if newDeadline != self.deadline:
            msgs = None
            if self.deadline != None:
                msgs = (self.deadline).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.REACTION__DEADLINE, None, msgs)
            if newDeadline != None:
                msgs = (newDeadline).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.REACTION__DEADLINE, None, msgs)
            msgs = self.basicSetDeadline(newDeadline, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.REACTION__DEADLINE, newDeadline, newDeadline))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.REACTION__ATTRIBUTES:
            return (self.getAttributes()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTION__TRIGGERS:
            return (self.getTriggers()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTION__SOURCES:
            return (self.getSources()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTION__EFFECTS:
            return (self.getEffects()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTION__CODE:
            return self.basicSetCode(None, msgs)
        elif featureID == LfPackage.REACTION__STP:
            return self.basicSetStp(None, msgs)
        elif featureID == LfPackage.REACTION__DEADLINE:
            return self.basicSetDeadline(None, msgs)
        return super(ReactionImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.REACTION__ATTRIBUTES:
            return self.getAttributes()
        elif featureID == LfPackage.REACTION__MUTATION:
            return self.isMutation()
        elif featureID == LfPackage.REACTION__TRIGGERS:
            return self.getTriggers()
        elif featureID == LfPackage.REACTION__SOURCES:
            return self.getSources()
        elif featureID == LfPackage.REACTION__EFFECTS:
            return self.getEffects()
        elif featureID == LfPackage.REACTION__CODE:
            return self.getCode()
        elif featureID == LfPackage.REACTION__STP:
            return self.getStp()
        elif featureID == LfPackage.REACTION__DEADLINE:
            return self.getDeadline()
        return super(ReactionImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    @SuppressWarnings("unchecked")
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.REACTION__ATTRIBUTES:
            self.getAttributes().clear()
            self.getAttributes().extend(newValue)
            return
        elif featureID == LfPackage.REACTION__MUTATION:
            self.setMutation(bool(newValue))
            return
        elif featureID == LfPackage.REACTION__TRIGGERS:
            self.getTriggers().clear()
            self.getTriggers().extend(newValue)
            return
        elif featureID == LfPackage.REACTION__SOURCES:
            self.getSources().clear()
            self.getSources().extend(newValue)
            return
        elif featureID == LfPackage.REACTION__EFFECTS:
            self.getEffects().clear()
            self.getEffects().extend(newValue)
            return
        elif featureID == LfPackage.REACTION__CODE:
            self.setCode(newValue)
            return
        elif featureID == LfPackage.REACTION__STP:
            self.setStp(newValue)
            return
        elif featureID == LfPackage.REACTION__DEADLINE:
            self.setDeadline(newValue)
            return
        super(ReactionImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.REACTION__ATTRIBUTES:
            self.getAttributes().clear()
            return
        elif featureID == LfPackage.REACTION__MUTATION:
            self.setMutation(self.MUTATION_EDEFAULT)
            return
        elif featureID == LfPackage.REACTION__TRIGGERS:
            self.getTriggers().clear()
            return
        elif featureID == LfPackage.REACTION__SOURCES:
            self.getSources().clear()
            return
        elif featureID == LfPackage.REACTION__EFFECTS:
            self.getEffects().clear()
            return
        elif featureID == LfPackage.REACTION__CODE:
            self.setCode(None)
            return
        elif featureID == LfPackage.REACTION__STP:
            self.setStp(None)
            return
        elif featureID == LfPackage.REACTION__DEADLINE:
            self.setDeadline(None)
            return
        super(ReactionImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.REACTION__ATTRIBUTES:
            return self.attributes != None and not self.attributes.isEmpty()
        elif featureID == LfPackage.REACTION__MUTATION:
            return self.mutation != self.MUTATION_EDEFAULT
        elif featureID == LfPackage.REACTION__TRIGGERS:
            return self.triggers != None and not self.triggers.isEmpty()
        elif featureID == LfPackage.REACTION__SOURCES:
            return self.sources != None and not self.sources.isEmpty()
        elif featureID == LfPackage.REACTION__EFFECTS:
            return self.effects != None and not self.effects.isEmpty()
        elif featureID == LfPackage.REACTION__CODE:
            return self.code_ != None
        elif featureID == LfPackage.REACTION__STP:
            return self.stp != None
        elif featureID == LfPackage.REACTION__DEADLINE:
            return self.deadline != None
        return super(ReactionImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(ReactionImpl, self).__str__()
        result = StringBuilder(super(ReactionImpl, self).__str__())
        result.append(" (mutation: ")
        result.append(self.mutation)
        result.append(')')
        return result.__str__()

# ReactionImpl
