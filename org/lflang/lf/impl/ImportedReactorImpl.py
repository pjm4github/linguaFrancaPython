#!/usr/bin/env python
""" generated source for module ImportedReactorImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl

from org.lflang.lf import ImportedReactor

from org.lflang.lf import LfPackage

from org.lflang.lf import Reactor

from org.lflang.lf.impl import ReactorDeclImpl
# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Imported Reactor</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.ImportedReactorImpl#getReactorClass <em>Reactor Class</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class ImportedReactorImpl(ReactorDeclImpl, ImportedReactor):
    """ generated source for class ImportedReactorImpl """
    #    * The cached value of the '{@link #getReactorClass() <em>Reactor Class</em>}' reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getReactorClass()
    #    * @generated
    #    * @ordered
    #    
    reactorClass = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(ImportedReactorImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.IMPORTED_REACTOR

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getReactorClass(self):
        """ generated source for method getReactorClass """
        if self.reactorClass != None and self.reactorClass.eIsProxy():
            oldReactorClass = self.reactorClass
            self.reactorClass = eResolveProxy(oldReactorClass)
            if self.reactorClass != oldReactorClass:
                if eNotificationRequired():
                    eNotify(ENotificationImpl(self, Notification.RESOLVE, LfPackage.IMPORTED_REACTOR__REACTOR_CLASS, oldReactorClass, self.reactorClass))
        return self.reactorClass

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicGetReactorClass(self):
        """ generated source for method basicGetReactorClass """
        return self.reactorClass

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setReactorClass(self, newReactorClass):
        """ generated source for method setReactorClass """
        oldReactorClass = self.reactorClass
        self.reactorClass = newReactorClass
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.IMPORTED_REACTOR__REACTOR_CLASS, oldReactorClass, self.reactorClass))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.IMPORTED_REACTOR__REACTOR_CLASS:
            if resolve:
                return self.getReactorClass()
            return self.basicGetReactorClass()
        return super(ImportedReactorImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.IMPORTED_REACTOR__REACTOR_CLASS:
            self.setReactorClass(newValue)
            return
        super(ImportedReactorImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.IMPORTED_REACTOR__REACTOR_CLASS:
            self.setReactorClass(None)
            return
        super(ImportedReactorImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.IMPORTED_REACTOR__REACTOR_CLASS:
            return self.reactorClass != None
        return super(ImportedReactorImpl, self).eIsSet(featureID)
# importedReactorImpl
