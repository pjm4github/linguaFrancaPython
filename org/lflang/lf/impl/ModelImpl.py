#!/usr/bin/env python
""" generated source for module ModelImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import java.util.Collection
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.common.util.EList
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl
# import org.eclipse.emf.ecore.util.EObjectContainmentEList
# import org.eclipse.emf.ecore.util.InternalEList

from org.lflang.lf import Import

from org.lflang.lf import LfPackage

from org.lflang.lf import Model

from org.lflang.lf import Preamble

from org.lflang.lf import Reactor

from org.lflang.lf import TargetDecl

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Model</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.ModelImpl#getTarget <em>Target</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ModelImpl#getImports <em>Imports</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ModelImpl#getPreambles <em>Preambles</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ModelImpl#getReactors <em>Reactors</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class ModelImpl(MinimalEObjectImpl, Container, Model):
    """ generated source for class ModelImpl """
    #    * The cached value of the '{@link #getTarget() <em>Target</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getTarget()
    #    * @generated
    #    * @ordered
    #    
    target = None

    #    * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getImports()
    #    * @generated
    #    * @ordered
    #    
    imports = None

    #    * The cached value of the '{@link #getPreambles() <em>Preambles</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getPreambles()
    #    * @generated
    #    * @ordered
    #    
    preambles = None

    #    * The cached value of the '{@link #getReactors() <em>Reactors</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getReactors()
    #    * @generated
    #    * @ordered
    #    
    reactors = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(ModelImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.MODEL

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getTarget(self):
        """ generated source for method getTarget """
        return self.target

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetTarget(self, newTarget, msgs):
        """ generated source for method basicSetTarget """
        oldTarget = self.target
        self.target = newTarget
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.MODEL__TARGET, oldTarget, newTarget)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setTarget(self, newTarget):
        """ generated source for method setTarget """
        if newTarget != self.target:
            msgs = None
            if self.target != None:
                msgs = (self.target).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.MODEL__TARGET, None, msgs)
            if newTarget != None:
                msgs = (newTarget).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.MODEL__TARGET, None, msgs)
            msgs = self.basicSetTarget(newTarget, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.MODEL__TARGET, newTarget, newTarget))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getImports(self):
        """ generated source for method getImports """
        if self.imports == None:
            self.imports = EObjectContainmentEList(Import.__class__, self, LfPackage.MODEL__IMPORTS)
        return self.imports

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getPreambles(self):
        """ generated source for method getPreambles """
        if self.preambles == None:
            self.preambles = EObjectContainmentEList(Preamble.__class__, self, LfPackage.MODEL__PREAMBLES)
        return self.preambles

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getReactors(self):
        """ generated source for method getReactors """
        if self.reactors == None:
            self.reactors = EObjectContainmentEList(Reactor.__class__, self, LfPackage.MODEL__REACTORS)
        return self.reactors

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.MODEL__TARGET:
            return self.basicSetTarget(None, msgs)
        elif featureID == LfPackage.MODEL__IMPORTS:
            return (self.getImports()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.MODEL__PREAMBLES:
            return (self.getPreambles()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.MODEL__REACTORS:
            return (self.getReactors()).basicRemove(otherEnd, msgs)
        return super(ModelImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.MODEL__TARGET:
            return self.getTarget()
        elif featureID == LfPackage.MODEL__IMPORTS:
            return self.getImports()
        elif featureID == LfPackage.MODEL__PREAMBLES:
            return self.getPreambles()
        elif featureID == LfPackage.MODEL__REACTORS:
            return self.getReactors()
        return super(ModelImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    @SuppressWarnings("unchecked")
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.MODEL__TARGET:
            self.setTarget(newValue)
            return
        elif featureID == LfPackage.MODEL__IMPORTS:
            self.getImports().clear()
            self.getImports().extend(newValue)
            return
        elif featureID == LfPackage.MODEL__PREAMBLES:
            self.getPreambles().clear()
            self.getPreambles().extend(newValue)
            return
        elif featureID == LfPackage.MODEL__REACTORS:
            self.getReactors().clear()
            self.getReactors().extend(newValue)
            return
        super(ModelImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.MODEL__TARGET:
            self.setTarget(None)
            return
        elif featureID == LfPackage.MODEL__IMPORTS:
            self.getImports().clear()
            return
        elif featureID == LfPackage.MODEL__PREAMBLES:
            self.getPreambles().clear()
            return
        elif featureID == LfPackage.MODEL__REACTORS:
            self.getReactors().clear()
            return
        super(ModelImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.MODEL__TARGET:
            return self.target != None
        elif featureID == LfPackage.MODEL__IMPORTS:
            return self.imports != None and not self.imports.isEmpty()
        elif featureID == LfPackage.MODEL__PREAMBLES:
            return self.preambles != None and not self.preambles.isEmpty()
        elif featureID == LfPackage.MODEL__REACTORS:
            return self.reactors != None and not self.reactors.isEmpty()
        return super(ModelImpl, self).eIsSet(featureID)

# ModelImpl
