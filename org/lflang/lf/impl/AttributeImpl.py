#!/usr/bin/env python
""" generated source for module AttributeImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import java.util.Collection
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.common.util.EList
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl
# import org.eclipse.emf.ecore.util.EObjectContainmentEList
# import org.eclipse.emf.ecore.util.InternalEList

from org.lflang.lf import AttrParm

from org.lflang.lf import Attribute

from org.lflang.lf import LfPackage

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Attribute</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.AttributeImpl#getAttrName <em>Attr Name</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.AttributeImpl#getAttrParms <em>Attr Parms</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class AttributeImpl(MinimalEObjectImpl, Container, Attribute):
    """ generated source for class AttributeImpl """
    #    * The default value of the '{@link #getAttrName() <em>Attr Name</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getAttrName()
    #    * @generated
    #    * @ordered
    #    
    ATTR_NAME_EDEFAULT = None

    #    * The cached value of the '{@link #getAttrName() <em>Attr Name</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getAttrName()
    #    * @generated
    #    * @ordered
    #    
    attrName = ATTR_NAME_EDEFAULT

    #    * The cached value of the '{@link #getAttrParms() <em>Attr Parms</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getAttrParms()
    #    * @generated
    #    * @ordered
    #    
    attrParms = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(AttributeImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.ATTRIBUTE

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getAttrName(self):
        """ generated source for method getAttrName """
        return self.attrName

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setAttrName(self, newAttrName):
        """ generated source for method setAttrName """
        oldAttrName = self.attrName
        self.attrName = newAttrName
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.ATTRIBUTE__ATTR_NAME, oldAttrName, self.attrName))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getAttrParms(self):
        """ generated source for method getAttrParms """
        if self.attrParms == None:
            self.attrParms = EObjectContainmentEList(AttrParm.__class__, self, LfPackage.ATTRIBUTE__ATTR_PARMS)
        return self.attrParms

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.ATTRIBUTE__ATTR_PARMS:
            return (self.getAttrParms()).basicRemove(otherEnd, msgs)
        return super(AttributeImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.ATTRIBUTE__ATTR_NAME:
            return self.getAttrName()
        elif featureID == LfPackage.ATTRIBUTE__ATTR_PARMS:
            return self.getAttrParms()
        return super(AttributeImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    @SuppressWarnings("unchecked")
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.ATTRIBUTE__ATTR_NAME:
            self.setAttrName(str(newValue))
            return
        elif featureID == LfPackage.ATTRIBUTE__ATTR_PARMS:
            self.getAttrParms().clear()
            self.getAttrParms().extend(newValue)
            return
        super(AttributeImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.ATTRIBUTE__ATTR_NAME:
            self.setAttrName(self.ATTR_NAME_EDEFAULT)
            return
        elif featureID == LfPackage.ATTRIBUTE__ATTR_PARMS:
            self.getAttrParms().clear()
            return
        super(AttributeImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.ATTRIBUTE__ATTR_NAME:
            return self.attrName != None if self.ATTR_NAME_EDEFAULT == None else not self.ATTR_NAME_EDEFAULT == self.attrName
        elif featureID == LfPackage.ATTRIBUTE__ATTR_PARMS:
            return self.attrParms != None and not self.attrParms.isEmpty()
        return super(AttributeImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(AttributeImpl, self).__str__()
        result = StringBuilder(super(AttributeImpl, self).__str__())
        result.append(" (attrName: ")
        result.append(self.attrName)
        result.append(')')
        return result.__str__()

# AttributeImpl
