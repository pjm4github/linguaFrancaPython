#!/usr/bin/env python
""" generated source for module InstantiationImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import java.util.Collection
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.common.util.EList
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl
# import org.eclipse.emf.ecore.util.EObjectContainmentEList
# import org.eclipse.emf.ecore.util.InternalEList

from org.lflang.lf import Assignment

from org.lflang.lf import Host

from org.lflang.lf import Instantiation

from org.lflang.lf import LfPackage

from org.lflang.lf import ReactorDecl

from org.lflang.lf import TypeParm

from org.lflang.lf import WidthSpec

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Instantiation</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.InstantiationImpl#getName <em>Name</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.InstantiationImpl#getWidthSpec <em>Width Spec</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.InstantiationImpl#getReactorClass <em>Reactor Class</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.InstantiationImpl#getTypeParms <em>Type Parms</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.InstantiationImpl#getParameters <em>Parameters</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.InstantiationImpl#getHost <em>Host</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class InstantiationImpl(MinimalEObjectImpl, Container, Instantiation):
    """ generated source for class InstantiationImpl """
    #    * The default value of the '{@link #getName() <em>Name</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getName()
    #    * @generated
    #    * @ordered
    #    
    NAME_EDEFAULT = None

    #    * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getName()
    #    * @generated
    #    * @ordered
    #    
    name = NAME_EDEFAULT

    #    * The cached value of the '{@link #getWidthSpec() <em>Width Spec</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getWidthSpec()
    #    * @generated
    #    * @ordered
    #    
    widthSpec = None

    #    * The cached value of the '{@link #getReactorClass() <em>Reactor Class</em>}' reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getReactorClass()
    #    * @generated
    #    * @ordered
    #    
    reactorClass = None

    #    * The cached value of the '{@link #getTypeParms() <em>Type Parms</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getTypeParms()
    #    * @generated
    #    * @ordered
    #    
    typeParms = None

    #    * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getParameters()
    #    * @generated
    #    * @ordered
    #    
    parameters = None

    #    * The cached value of the '{@link #getHost() <em>Host</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getHost()
    #    * @generated
    #    * @ordered
    #    
    host = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(InstantiationImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.INSTANTIATION

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getName(self):
        """ generated source for method getName """
        return self.name

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setName(self, newName):
        """ generated source for method setName """
        oldName = self.name
        self.name = newName
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.INSTANTIATION__NAME, oldName, self.name))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getWidthSpec(self):
        """ generated source for method getWidthSpec """
        return self.widthSpec

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetWidthSpec(self, newWidthSpec, msgs):
        """ generated source for method basicSetWidthSpec """
        oldWidthSpec = self.widthSpec
        self.widthSpec = newWidthSpec
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.INSTANTIATION__WIDTH_SPEC, oldWidthSpec, newWidthSpec)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setWidthSpec(self, newWidthSpec):
        """ generated source for method setWidthSpec """
        if newWidthSpec != self.widthSpec:
            msgs = None
            if self.widthSpec != None:
                msgs = (self.widthSpec).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.INSTANTIATION__WIDTH_SPEC, None, msgs)
            if newWidthSpec != None:
                msgs = (newWidthSpec).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.INSTANTIATION__WIDTH_SPEC, None, msgs)
            msgs = self.basicSetWidthSpec(newWidthSpec, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.INSTANTIATION__WIDTH_SPEC, newWidthSpec, newWidthSpec))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getReactorClass(self):
        """ generated source for method getReactorClass """
        if self.reactorClass != None and self.reactorClass.eIsProxy():
            oldReactorClass = self.reactorClass
            self.reactorClass = eResolveProxy(oldReactorClass)
            if self.reactorClass != oldReactorClass:
                if eNotificationRequired():
                    eNotify(ENotificationImpl(self, Notification.RESOLVE, LfPackage.INSTANTIATION__REACTOR_CLASS, oldReactorClass, self.reactorClass))
        return self.reactorClass

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicGetReactorClass(self):
        """ generated source for method basicGetReactorClass """
        return self.reactorClass

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setReactorClass(self, newReactorClass):
        """ generated source for method setReactorClass """
        oldReactorClass = self.reactorClass
        self.reactorClass = newReactorClass
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.INSTANTIATION__REACTOR_CLASS, oldReactorClass, self.reactorClass))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getTypeParms(self):
        """ generated source for method getTypeParms """
        if self.typeParms == None:
            self.typeParms = EObjectContainmentEList(TypeParm.__class__, self, LfPackage.INSTANTIATION__TYPE_PARMS)
        return self.typeParms

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getParameters(self):
        """ generated source for method getParameters """
        if self.parameters == None:
            self.parameters = EObjectContainmentEList(Assignment.__class__, self, LfPackage.INSTANTIATION__PARAMETERS)
        return self.parameters

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getHost(self):
        """ generated source for method getHost """
        return self.host

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetHost(self, newHost, msgs):
        """ generated source for method basicSetHost """
        oldHost = self.host
        self.host = newHost
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.INSTANTIATION__HOST, oldHost, newHost)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setHost(self, newHost):
        """ generated source for method setHost """
        if newHost != self.host:
            msgs = None
            if self.host != None:
                msgs = (self.host).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.INSTANTIATION__HOST, None, msgs)
            if newHost != None:
                msgs = (newHost).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.INSTANTIATION__HOST, None, msgs)
            msgs = self.basicSetHost(newHost, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.INSTANTIATION__HOST, newHost, newHost))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.INSTANTIATION__WIDTH_SPEC:
            return self.basicSetWidthSpec(None, msgs)
        elif featureID == LfPackage.INSTANTIATION__TYPE_PARMS:
            return (self.getTypeParms()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.INSTANTIATION__PARAMETERS:
            return (self.getParameters()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.INSTANTIATION__HOST:
            return self.basicSetHost(None, msgs)
        return super(InstantiationImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.INSTANTIATION__NAME:
            return self.__name__
        elif featureID == LfPackage.INSTANTIATION__WIDTH_SPEC:
            return self.getWidthSpec()
        elif featureID == LfPackage.INSTANTIATION__REACTOR_CLASS:
            if resolve:
                return self.getReactorClass()
            return self.basicGetReactorClass()
        elif featureID == LfPackage.INSTANTIATION__TYPE_PARMS:
            return self.getTypeParms()
        elif featureID == LfPackage.INSTANTIATION__PARAMETERS:
            return self.getParameters()
        elif featureID == LfPackage.INSTANTIATION__HOST:
            return self.getHost()
        return super(InstantiationImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    @SuppressWarnings("unchecked")
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.INSTANTIATION__NAME:
            self.setName(str(newValue))
            return
        elif featureID == LfPackage.INSTANTIATION__WIDTH_SPEC:
            self.setWidthSpec(newValue)
            return
        elif featureID == LfPackage.INSTANTIATION__REACTOR_CLASS:
            self.setReactorClass(newValue)
            return
        elif featureID == LfPackage.INSTANTIATION__TYPE_PARMS:
            self.getTypeParms().clear()
            self.getTypeParms().extend(newValue)
            return
        elif featureID == LfPackage.INSTANTIATION__PARAMETERS:
            self.getParameters().clear()
            self.getParameters().extend(newValue)
            return
        elif featureID == LfPackage.INSTANTIATION__HOST:
            self.setHost(newValue)
            return
        super(InstantiationImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.INSTANTIATION__NAME:
            self.setName(self.NAME_EDEFAULT)
            return
        elif featureID == LfPackage.INSTANTIATION__WIDTH_SPEC:
            self.setWidthSpec(None)
            return
        elif featureID == LfPackage.INSTANTIATION__REACTOR_CLASS:
            self.setReactorClass(None)
            return
        elif featureID == LfPackage.INSTANTIATION__TYPE_PARMS:
            self.getTypeParms().clear()
            return
        elif featureID == LfPackage.INSTANTIATION__PARAMETERS:
            self.getParameters().clear()
            return
        elif featureID == LfPackage.INSTANTIATION__HOST:
            self.setHost(None)
            return
        super(InstantiationImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.INSTANTIATION__NAME:
            return self.name != None if self.NAME_EDEFAULT == None else not self.NAME_EDEFAULT == self.name
        elif featureID == LfPackage.INSTANTIATION__WIDTH_SPEC:
            return self.widthSpec != None
        elif featureID == LfPackage.INSTANTIATION__REACTOR_CLASS:
            return self.reactorClass != None
        elif featureID == LfPackage.INSTANTIATION__TYPE_PARMS:
            return self.typeParms != None and not self.typeParms.isEmpty()
        elif featureID == LfPackage.INSTANTIATION__PARAMETERS:
            return self.parameters != None and not self.parameters.isEmpty()
        elif featureID == LfPackage.INSTANTIATION__HOST:
            return self.host != None
        return super(InstantiationImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(InstantiationImpl, self).__str__()
        result = StringBuilder(super(InstantiationImpl, self).__str__())
        result.append(" (name: ")
        result.append(self.name)
        result.append(')')
        return result.__str__()

# InstantiationImpl
