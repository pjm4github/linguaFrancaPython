#!/usr/bin/env python
""" generated source for module AttrParmValueImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl

from org.lflang.lf import AttrParmValue

from org.lflang.lf import LfPackage

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Attr Parm Value</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.AttrParmValueImpl#getStr <em>Str</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.AttrParmValueImpl#getInt <em>Int</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.AttrParmValueImpl#getBool <em>Bool</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.AttrParmValueImpl#getFloat <em>Float</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class AttrParmValueImpl(MinimalEObjectImpl, Container, AttrParmValue):
    """ generated source for class AttrParmValueImpl """
    #    * The default value of the '{@link #getStr() <em>Str</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getStr()
    #    * @generated
    #    * @ordered
    #    
    STR_EDEFAULT = None

    #    * The cached value of the '{@link #getStr() <em>Str</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getStr()
    #    * @generated
    #    * @ordered
    #    
    str = STR_EDEFAULT

    #    * The default value of the '{@link #getInt() <em>Int</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getInt()
    #    * @generated
    #    * @ordered
    #    
    INT_EDEFAULT = None

    #    * The cached value of the '{@link #getInt() <em>Int</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getInt()
    #    * @generated
    #    * @ordered
    #    
    int_ = INT_EDEFAULT

    #    * The default value of the '{@link #getBool() <em>Bool</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getBool()
    #    * @generated
    #    * @ordered
    #    
    BOOL_EDEFAULT = None

    #    * The cached value of the '{@link #getBool() <em>Bool</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getBool()
    #    * @generated
    #    * @ordered
    #    
    bool = BOOL_EDEFAULT

    #    * The default value of the '{@link #getFloat() <em>Float</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getFloat()
    #    * @generated
    #    * @ordered
    #    
    FLOAT_EDEFAULT = None

    #    * The cached value of the '{@link #getFloat() <em>Float</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getFloat()
    #    * @generated
    #    * @ordered
    #    
    float_ = FLOAT_EDEFAULT

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(AttrParmValueImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.ATTR_PARM_VALUE

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getStr(self):
        """ generated source for method getStr """
        return self.str

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setStr(self, newStr):
        """ generated source for method setStr """
        oldStr = self.str
        self.str = newStr
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.ATTR_PARM_VALUE__STR, oldStr, self.str))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getInt(self):
        """ generated source for method getInt """
        return self.int_

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setInt(self, newInt):
        """ generated source for method setInt """
        oldInt = self.int_
        self.int_ = newInt
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.ATTR_PARM_VALUE__INT, oldInt, self.int_))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getBool(self):
        """ generated source for method getBool """
        return self.bool

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setBool(self, newBool):
        """ generated source for method setBool """
        oldBool = self.bool
        self.bool = newBool
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.ATTR_PARM_VALUE__BOOL, oldBool, self.bool))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getFloat(self):
        """ generated source for method getFloat """
        return self.float_

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setFloat(self, newFloat):
        """ generated source for method setFloat """
        oldFloat = self.float_
        self.float_ = newFloat
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.ATTR_PARM_VALUE__FLOAT, oldFloat, self.float_))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.ATTR_PARM_VALUE__STR:
            return self.getStr()
        elif featureID == LfPackage.ATTR_PARM_VALUE__INT:
            return self.getInt()
        elif featureID == LfPackage.ATTR_PARM_VALUE__BOOL:
            return self.getBool()
        elif featureID == LfPackage.ATTR_PARM_VALUE__FLOAT:
            return self.getFloat()
        return super(AttrParmValueImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.ATTR_PARM_VALUE__STR:
            self.setStr(str(newValue))
            return
        elif featureID == LfPackage.ATTR_PARM_VALUE__INT:
            self.setInt(str(newValue))
            return
        elif featureID == LfPackage.ATTR_PARM_VALUE__BOOL:
            self.setBool(str(newValue))
            return
        elif featureID == LfPackage.ATTR_PARM_VALUE__FLOAT:
            self.setFloat(str(newValue))
            return
        super(AttrParmValueImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.ATTR_PARM_VALUE__STR:
            self.setStr(self.STR_EDEFAULT)
            return
        elif featureID == LfPackage.ATTR_PARM_VALUE__INT:
            self.setInt(self.INT_EDEFAULT)
            return
        elif featureID == LfPackage.ATTR_PARM_VALUE__BOOL:
            self.setBool(self.BOOL_EDEFAULT)
            return
        elif featureID == LfPackage.ATTR_PARM_VALUE__FLOAT:
            self.setFloat(self.FLOAT_EDEFAULT)
            return
        super(AttrParmValueImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.ATTR_PARM_VALUE__STR:
            return self.str != None if self.STR_EDEFAULT == None else not self.STR_EDEFAULT == self.str
        elif featureID == LfPackage.ATTR_PARM_VALUE__INT:
            return self.int_ != None if self.INT_EDEFAULT == None else not self.INT_EDEFAULT == self.int_
        elif featureID == LfPackage.ATTR_PARM_VALUE__BOOL:
            return self.bool != None if self.BOOL_EDEFAULT == None else not self.BOOL_EDEFAULT == self.bool
        elif featureID == LfPackage.ATTR_PARM_VALUE__FLOAT:
            return self.float_ != None if self.FLOAT_EDEFAULT == None else not self.FLOAT_EDEFAULT == self.float_
        return super(AttrParmValueImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(AttrParmValueImpl, self).__str__()
        result = StringBuilder(super(AttrParmValueImpl, self).__str__())
        result.append(" (str: ")
        result.append(self.str)
        result.append(", int: ")
        result.append(self.int_)
        result.append(", bool: ")
        result.append(self.bool)
        result.append(", float: ")
        result.append(self.float_)
        result.append(')')
        return result.__str__()

# AttrParmValueImpl
