#!/usr/bin/env python
""" generated source for module ReactorImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import java.util.Collection
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.common.util.EList
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.util.EObjectContainmentEList
# import org.eclipse.emf.ecore.util.EObjectResolvingEList
# import org.eclipse.emf.ecore.util.InternalEList

from org.lflang.lf import Action

from org.lflang.lf import Attribute

from org.lflang.lf import Connection

from org.lflang.lf import Host

from org.lflang.lf import Input

from org.lflang.lf import Instantiation

from org.lflang.lf import LfPackage

from org.lflang.lf import Method

from org.lflang.lf import Mode

from org.lflang.lf import Output

from org.lflang.lf import Parameter

from org.lflang.lf import Preamble

from org.lflang.lf import Reaction

from org.lflang.lf import Reactor

from org.lflang.lf import ReactorDecl

from org.lflang.lf import StateVar

from org.lflang.lf import Timer

from org.lflang.lf import TypeParm

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Reactor</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getAttributes <em>Attributes</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#isFederated <em>Federated</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#isMain <em>Main</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#isRealtime <em>Realtime</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getTypeParms <em>Type Parms</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getParameters <em>Parameters</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getHost <em>Host</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getSuperClasses <em>Super Classes</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getPreambles <em>Preambles</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getStateVars <em>State Vars</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getMethods <em>Methods</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getInputs <em>Inputs</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getOutputs <em>Outputs</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getTimers <em>Timers</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getActions <em>Actions</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getInstantiations <em>Instantiations</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getConnections <em>Connections</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getReactions <em>Reactions</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ReactorImpl#getModes <em>Modes</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class ReactorImpl(ReactorDeclImpl, Reactor):
    """ generated source for class ReactorImpl """
    #    * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getAttributes()
    #    * @generated
    #    * @ordered
    #    
    attributes = None

    #    * The default value of the '{@link #isFederated() <em>Federated</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isFederated()
    #    * @generated
    #    * @ordered
    #    
    FEDERATED_EDEFAULT = False

    #    * The cached value of the '{@link #isFederated() <em>Federated</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isFederated()
    #    * @generated
    #    * @ordered
    #    
    federated = FEDERATED_EDEFAULT

    #    * The default value of the '{@link #isMain() <em>Main</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isMain()
    #    * @generated
    #    * @ordered
    #    
    MAIN_EDEFAULT = False

    #    * The cached value of the '{@link #isMain() <em>Main</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isMain()
    #    * @generated
    #    * @ordered
    #    
    main = MAIN_EDEFAULT

    #    * The default value of the '{@link #isRealtime() <em>Realtime</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isRealtime()
    #    * @generated
    #    * @ordered
    #    
    REALTIME_EDEFAULT = False

    #    * The cached value of the '{@link #isRealtime() <em>Realtime</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isRealtime()
    #    * @generated
    #    * @ordered
    #    
    realtime = REALTIME_EDEFAULT

    #    * The cached value of the '{@link #getTypeParms() <em>Type Parms</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getTypeParms()
    #    * @generated
    #    * @ordered
    #    
    typeParms = None

    #    * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getParameters()
    #    * @generated
    #    * @ordered
    #    
    parameters = None

    #    * The cached value of the '{@link #getHost() <em>Host</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getHost()
    #    * @generated
    #    * @ordered
    #    
    host = None

    #    * The cached value of the '{@link #getSuperClasses() <em>Super Classes</em>}' reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getSuperClasses()
    #    * @generated
    #    * @ordered
    #    
    superClasses = None

    #    * The cached value of the '{@link #getPreambles() <em>Preambles</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getPreambles()
    #    * @generated
    #    * @ordered
    #    
    preambles = None

    #    * The cached value of the '{@link #getStateVars() <em>State Vars</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getStateVars()
    #    * @generated
    #    * @ordered
    #    
    stateVars = None

    #    * The cached value of the '{@link #getMethods() <em>Methods</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getMethods()
    #    * @generated
    #    * @ordered
    #    
    methods = None

    #    * The cached value of the '{@link #getInputs() <em>Inputs</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getInputs()
    #    * @generated
    #    * @ordered
    #    
    inputs = None

    #    * The cached value of the '{@link #getOutputs() <em>Outputs</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getOutputs()
    #    * @generated
    #    * @ordered
    #    
    outputs = None

    #    * The cached value of the '{@link #getTimers() <em>Timers</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getTimers()
    #    * @generated
    #    * @ordered
    #    
    timers = None

    #    * The cached value of the '{@link #getActions() <em>Actions</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getActions()
    #    * @generated
    #    * @ordered
    #    
    actions = None

    #    * The cached value of the '{@link #getInstantiations() <em>Instantiations</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getInstantiations()
    #    * @generated
    #    * @ordered
    #    
    instantiations = None

    #    * The cached value of the '{@link #getConnections() <em>Connections</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getConnections()
    #    * @generated
    #    * @ordered
    #    
    connections = None

    #    * The cached value of the '{@link #getReactions() <em>Reactions</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getReactions()
    #    * @generated
    #    * @ordered
    #    
    reactions = None

    #    * The cached value of the '{@link #getModes() <em>Modes</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getModes()
    #    * @generated
    #    * @ordered
    #    
    modes = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(ReactorImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.REACTOR

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getAttributes(self):
        """ generated source for method getAttributes """
        if self.attributes == None:
            self.attributes = EObjectContainmentEList(Attribute.__class__, self, LfPackage.REACTOR__ATTRIBUTES)
        return self.attributes

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def isFederated(self):
        """ generated source for method isFederated """
        return self.federated

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setFederated(self, newFederated):
        """ generated source for method setFederated """
        oldFederated = self.federated
        self.federated = newFederated
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.REACTOR__FEDERATED, oldFederated, self.federated))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def isMain(self):
        """ generated source for method isMain """
        return self.main

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setMain(self, newMain):
        """ generated source for method setMain """
        oldMain = self.main
        self.main = newMain
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.REACTOR__MAIN, oldMain, self.main))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def isRealtime(self):
        """ generated source for method isRealtime """
        return self.realtime

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setRealtime(self, newRealtime):
        """ generated source for method setRealtime """
        oldRealtime = self.realtime
        self.realtime = newRealtime
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.REACTOR__REALTIME, oldRealtime, self.realtime))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getTypeParms(self):
        """ generated source for method getTypeParms """
        if self.typeParms == None:
            self.typeParms = EObjectContainmentEList(TypeParm.__class__, self, LfPackage.REACTOR__TYPE_PARMS)
        return self.typeParms

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getParameters(self):
        """ generated source for method getParameters """
        if self.parameters == None:
            self.parameters = EObjectContainmentEList(Parameter.__class__, self, LfPackage.REACTOR__PARAMETERS)
        return self.parameters

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getHost(self):
        """ generated source for method getHost """
        return self.host

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetHost(self, newHost, msgs):
        """ generated source for method basicSetHost """
        oldHost = self.host
        self.host = newHost
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.REACTOR__HOST, oldHost, newHost)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setHost(self, newHost):
        """ generated source for method setHost """
        if newHost != self.host:
            msgs = None
            if self.host != None:
                msgs = (self.host).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.REACTOR__HOST, None, msgs)
            if newHost != None:
                msgs = (newHost).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.REACTOR__HOST, None, msgs)
            msgs = self.basicSetHost(newHost, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.REACTOR__HOST, newHost, newHost))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getSuperClasses(self):
        """ generated source for method getSuperClasses """
        if self.superClasses == None:
            self.superClasses = EObjectResolvingEList(ReactorDecl.__class__, self, LfPackage.REACTOR__SUPER_CLASSES)
        return self.superClasses

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getPreambles(self):
        """ generated source for method getPreambles """
        if self.preambles == None:
            self.preambles = EObjectContainmentEList(Preamble.__class__, self, LfPackage.REACTOR__PREAMBLES)
        return self.preambles

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getStateVars(self):
        """ generated source for method getStateVars """
        if self.stateVars == None:
            self.stateVars = EObjectContainmentEList(StateVar.__class__, self, LfPackage.REACTOR__STATE_VARS)
        return self.stateVars

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getMethods(self):
        """ generated source for method getMethods """
        if self.methods == None:
            self.methods = EObjectContainmentEList(Method.__class__, self, LfPackage.REACTOR__METHODS)
        return self.methods

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getInputs(self):
        """ generated source for method getInputs """
        if self.inputs == None:
            self.inputs = EObjectContainmentEList(Input.__class__, self, LfPackage.REACTOR__INPUTS)
        return self.inputs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getOutputs(self):
        """ generated source for method getOutputs """
        if self.outputs == None:
            self.outputs = EObjectContainmentEList(Output.__class__, self, LfPackage.REACTOR__OUTPUTS)
        return self.outputs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getTimers(self):
        """ generated source for method getTimers """
        if self.timers == None:
            self.timers = EObjectContainmentEList(Timer.__class__, self, LfPackage.REACTOR__TIMERS)
        return self.timers

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getActions(self):
        """ generated source for method getActions """
        if self.actions == None:
            self.actions = EObjectContainmentEList(Action.__class__, self, LfPackage.REACTOR__ACTIONS)
        return self.actions

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getInstantiations(self):
        """ generated source for method getInstantiations """
        if self.instantiations == None:
            self.instantiations = EObjectContainmentEList(Instantiation.__class__, self, LfPackage.REACTOR__INSTANTIATIONS)
        return self.instantiations

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getConnections(self):
        """ generated source for method getConnections """
        if self.connections == None:
            self.connections = EObjectContainmentEList(Connection.__class__, self, LfPackage.REACTOR__CONNECTIONS)
        return self.connections

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getReactions(self):
        """ generated source for method getReactions """
        if self.reactions == None:
            self.reactions = EObjectContainmentEList(Reaction.__class__, self, LfPackage.REACTOR__REACTIONS)
        return self.reactions

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getModes(self):
        """ generated source for method getModes """
        if self.modes == None:
            self.modes = EObjectContainmentEList(Mode.__class__, self, LfPackage.REACTOR__MODES)
        return self.modes

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.REACTOR__ATTRIBUTES:
            return (self.getAttributes()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTOR__TYPE_PARMS:
            return (self.getTypeParms()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTOR__PARAMETERS:
            return (self.getParameters()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTOR__HOST:
            return self.basicSetHost(None, msgs)
        elif featureID == LfPackage.REACTOR__PREAMBLES:
            return (self.getPreambles()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTOR__STATE_VARS:
            return (self.getStateVars()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTOR__METHODS:
            return (self.getMethods()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTOR__INPUTS:
            return (self.getInputs()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTOR__OUTPUTS:
            return (self.getOutputs()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTOR__TIMERS:
            return (self.getTimers()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTOR__ACTIONS:
            return (self.getActions()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTOR__INSTANTIATIONS:
            return (self.getInstantiations()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTOR__CONNECTIONS:
            return (self.getConnections()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTOR__REACTIONS:
            return (self.getReactions()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.REACTOR__MODES:
            return (self.getModes()).basicRemove(otherEnd, msgs)
        return super(ReactorImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.REACTOR__ATTRIBUTES:
            return self.getAttributes()
        elif featureID == LfPackage.REACTOR__FEDERATED:
            return self.isFederated()
        elif featureID == LfPackage.REACTOR__MAIN:
            return self.isMain()
        elif featureID == LfPackage.REACTOR__REALTIME:
            return self.isRealtime()
        elif featureID == LfPackage.REACTOR__TYPE_PARMS:
            return self.getTypeParms()
        elif featureID == LfPackage.REACTOR__PARAMETERS:
            return self.getParameters()
        elif featureID == LfPackage.REACTOR__HOST:
            return self.getHost()
        elif featureID == LfPackage.REACTOR__SUPER_CLASSES:
            return self.getSuperClasses()
        elif featureID == LfPackage.REACTOR__PREAMBLES:
            return self.getPreambles()
        elif featureID == LfPackage.REACTOR__STATE_VARS:
            return self.getStateVars()
        elif featureID == LfPackage.REACTOR__METHODS:
            return self.getMethods()
        elif featureID == LfPackage.REACTOR__INPUTS:
            return self.getInputs()
        elif featureID == LfPackage.REACTOR__OUTPUTS:
            return self.getOutputs()
        elif featureID == LfPackage.REACTOR__TIMERS:
            return self.getTimers()
        elif featureID == LfPackage.REACTOR__ACTIONS:
            return self.getActions()
        elif featureID == LfPackage.REACTOR__INSTANTIATIONS:
            return self.getInstantiations()
        elif featureID == LfPackage.REACTOR__CONNECTIONS:
            return self.getConnections()
        elif featureID == LfPackage.REACTOR__REACTIONS:
            return self.getReactions()
        elif featureID == LfPackage.REACTOR__MODES:
            return self.getModes()
        return super(ReactorImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    @SuppressWarnings("unchecked")
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.REACTOR__ATTRIBUTES:
            self.getAttributes().clear()
            self.getAttributes().extend(newValue)
            return
        elif featureID == LfPackage.REACTOR__FEDERATED:
            self.setFederated(bool(newValue))
            return
        elif featureID == LfPackage.REACTOR__MAIN:
            self.setMain(bool(newValue))
            return
        elif featureID == LfPackage.REACTOR__REALTIME:
            self.setRealtime(bool(newValue))
            return
        elif featureID == LfPackage.REACTOR__TYPE_PARMS:
            self.getTypeParms().clear()
            self.getTypeParms().extend(newValue)
            return
        elif featureID == LfPackage.REACTOR__PARAMETERS:
            self.getParameters().clear()
            self.getParameters().extend(newValue)
            return
        elif featureID == LfPackage.REACTOR__HOST:
            self.setHost(newValue)
            return
        elif featureID == LfPackage.REACTOR__SUPER_CLASSES:
            self.getSuperClasses().clear()
            self.getSuperClasses().extend(newValue)
            return
        elif featureID == LfPackage.REACTOR__PREAMBLES:
            self.getPreambles().clear()
            self.getPreambles().extend(newValue)
            return
        elif featureID == LfPackage.REACTOR__STATE_VARS:
            self.getStateVars().clear()
            self.getStateVars().extend(newValue)
            return
        elif featureID == LfPackage.REACTOR__METHODS:
            self.getMethods().clear()
            self.getMethods().extend(newValue)
            return
        elif featureID == LfPackage.REACTOR__INPUTS:
            self.getInputs().clear()
            self.getInputs().extend(newValue)
            return
        elif featureID == LfPackage.REACTOR__OUTPUTS:
            self.getOutputs().clear()
            self.getOutputs().extend(newValue)
            return
        elif featureID == LfPackage.REACTOR__TIMERS:
            self.getTimers().clear()
            self.getTimers().extend(newValue)
            return
        elif featureID == LfPackage.REACTOR__ACTIONS:
            self.getActions().clear()
            self.getActions().extend(newValue)
            return
        elif featureID == LfPackage.REACTOR__INSTANTIATIONS:
            self.getInstantiations().clear()
            self.getInstantiations().extend(newValue)
            return
        elif featureID == LfPackage.REACTOR__CONNECTIONS:
            self.getConnections().clear()
            self.getConnections().extend(newValue)
            return
        elif featureID == LfPackage.REACTOR__REACTIONS:
            self.getReactions().clear()
            self.getReactions().extend(newValue)
            return
        elif featureID == LfPackage.REACTOR__MODES:
            self.getModes().clear()
            self.getModes().extend(newValue)
            return
        super(ReactorImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.REACTOR__ATTRIBUTES:
            self.getAttributes().clear()
            return
        elif featureID == LfPackage.REACTOR__FEDERATED:
            self.setFederated(self.FEDERATED_EDEFAULT)
            return
        elif featureID == LfPackage.REACTOR__MAIN:
            self.setMain(self.MAIN_EDEFAULT)
            return
        elif featureID == LfPackage.REACTOR__REALTIME:
            self.setRealtime(self.REALTIME_EDEFAULT)
            return
        elif featureID == LfPackage.REACTOR__TYPE_PARMS:
            self.getTypeParms().clear()
            return
        elif featureID == LfPackage.REACTOR__PARAMETERS:
            self.getParameters().clear()
            return
        elif featureID == LfPackage.REACTOR__HOST:
            self.setHost(None)
            return
        elif featureID == LfPackage.REACTOR__SUPER_CLASSES:
            self.getSuperClasses().clear()
            return
        elif featureID == LfPackage.REACTOR__PREAMBLES:
            self.getPreambles().clear()
            return
        elif featureID == LfPackage.REACTOR__STATE_VARS:
            self.getStateVars().clear()
            return
        elif featureID == LfPackage.REACTOR__METHODS:
            self.getMethods().clear()
            return
        elif featureID == LfPackage.REACTOR__INPUTS:
            self.getInputs().clear()
            return
        elif featureID == LfPackage.REACTOR__OUTPUTS:
            self.getOutputs().clear()
            return
        elif featureID == LfPackage.REACTOR__TIMERS:
            self.getTimers().clear()
            return
        elif featureID == LfPackage.REACTOR__ACTIONS:
            self.getActions().clear()
            return
        elif featureID == LfPackage.REACTOR__INSTANTIATIONS:
            self.getInstantiations().clear()
            return
        elif featureID == LfPackage.REACTOR__CONNECTIONS:
            self.getConnections().clear()
            return
        elif featureID == LfPackage.REACTOR__REACTIONS:
            self.getReactions().clear()
            return
        elif featureID == LfPackage.REACTOR__MODES:
            self.getModes().clear()
            return
        super(ReactorImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.REACTOR__ATTRIBUTES:
            return self.attributes != None and not self.attributes.isEmpty()
        elif featureID == LfPackage.REACTOR__FEDERATED:
            return self.federated != self.FEDERATED_EDEFAULT
        elif featureID == LfPackage.REACTOR__MAIN:
            return self.main != self.MAIN_EDEFAULT
        elif featureID == LfPackage.REACTOR__REALTIME:
            return self.realtime != self.REALTIME_EDEFAULT
        elif featureID == LfPackage.REACTOR__TYPE_PARMS:
            return self.typeParms != None and not self.typeParms.isEmpty()
        elif featureID == LfPackage.REACTOR__PARAMETERS:
            return self.parameters != None and not self.parameters.isEmpty()
        elif featureID == LfPackage.REACTOR__HOST:
            return self.host != None
        elif featureID == LfPackage.REACTOR__SUPER_CLASSES:
            return self.superClasses != None and not self.superClasses.isEmpty()
        elif featureID == LfPackage.REACTOR__PREAMBLES:
            return self.preambles != None and not self.preambles.isEmpty()
        elif featureID == LfPackage.REACTOR__STATE_VARS:
            return self.stateVars != None and not self.stateVars.isEmpty()
        elif featureID == LfPackage.REACTOR__METHODS:
            return self.methods != None and not self.methods.isEmpty()
        elif featureID == LfPackage.REACTOR__INPUTS:
            return self.inputs != None and not self.inputs.isEmpty()
        elif featureID == LfPackage.REACTOR__OUTPUTS:
            return self.outputs != None and not self.outputs.isEmpty()
        elif featureID == LfPackage.REACTOR__TIMERS:
            return self.timers != None and not self.timers.isEmpty()
        elif featureID == LfPackage.REACTOR__ACTIONS:
            return self.actions != None and not self.actions.isEmpty()
        elif featureID == LfPackage.REACTOR__INSTANTIATIONS:
            return self.instantiations != None and not self.instantiations.isEmpty()
        elif featureID == LfPackage.REACTOR__CONNECTIONS:
            return self.connections != None and not self.connections.isEmpty()
        elif featureID == LfPackage.REACTOR__REACTIONS:
            return self.reactions != None and not self.reactions.isEmpty()
        elif featureID == LfPackage.REACTOR__MODES:
            return self.modes != None and not self.modes.isEmpty()
        return super(ReactorImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(ReactorImpl, self).__str__()
        result = StringBuilder(super(ReactorImpl, self).__str__())
        result.append(" (federated: ")
        result.append(self.federated)
        result.append(", main: ")
        result.append(self.main)
        result.append(", realtime: ")
        result.append(self.realtime)
        result.append(')')
        return result.__str__()

# ReactorImpl
