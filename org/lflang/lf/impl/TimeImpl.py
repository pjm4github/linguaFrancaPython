#!/usr/bin/env python
""" generated source for module TimeImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.impl.ENotificationImpl

from org.lflang.lf import LfPackage

from org.lflang.lf import Time

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Time</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.TimeImpl#getInterval <em>Interval</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.TimeImpl#getUnit <em>Unit</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class TimeImpl(ExpressionImpl, Time):
    """ generated source for class TimeImpl """
    #    * The default value of the '{@link #getInterval() <em>Interval</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getInterval()
    #    * @generated
    #    * @ordered
    #    
    INTERVAL_EDEFAULT = 0

    #    * The cached value of the '{@link #getInterval() <em>Interval</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getInterval()
    #    * @generated
    #    * @ordered
    #    
    interval = INTERVAL_EDEFAULT

    #    * The default value of the '{@link #getUnit() <em>Unit</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getUnit()
    #    * @generated
    #    * @ordered
    #    
    UNIT_EDEFAULT = None

    #    * The cached value of the '{@link #getUnit() <em>Unit</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getUnit()
    #    * @generated
    #    * @ordered
    #    
    unit = UNIT_EDEFAULT

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(TimeImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.TIME

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getInterval(self):
        """ generated source for method getInterval """
        return self.interval

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setInterval(self, newInterval):
        """ generated source for method setInterval """
        oldInterval = self.interval
        self.interval = newInterval
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.TIME__INTERVAL, oldInterval, self.interval))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getUnit(self):
        """ generated source for method getUnit """
        return self.unit

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setUnit(self, newUnit):
        """ generated source for method setUnit """
        oldUnit = self.unit
        self.unit = newUnit
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.TIME__UNIT, oldUnit, self.unit))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.TIME__INTERVAL:
            return self.getInterval()
        elif featureID == LfPackage.TIME__UNIT:
            return self.getUnit()
        return super(TimeImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.TIME__INTERVAL:
            self.setInterval(int(newValue))
            return
        elif featureID == LfPackage.TIME__UNIT:
            self.setUnit(str(newValue))
            return
        super(TimeImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.TIME__INTERVAL:
            self.setInterval(self.INTERVAL_EDEFAULT)
            return
        elif featureID == LfPackage.TIME__UNIT:
            self.setUnit(self.UNIT_EDEFAULT)
            return
        super(TimeImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.TIME__INTERVAL:
            return self.interval != self.INTERVAL_EDEFAULT
        elif featureID == LfPackage.TIME__UNIT:
            return self.unit != None if self.UNIT_EDEFAULT == None else not self.UNIT_EDEFAULT == self.unit
        return super(TimeImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(TimeImpl, self).__str__()
        result = StringBuilder(super(TimeImpl, self).__str__())
        result.append(" (interval: ")
        result.append(self.interval)
        result.append(", unit: ")
        result.append(self.unit)
        result.append(')')
        return result.__str__()

# TimeImpl
