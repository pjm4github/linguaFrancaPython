#!/usr/bin/env python
""" generated source for module TimerImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import java.util.Collection
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.common.util.EList
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.util.EObjectContainmentEList
# import org.eclipse.emf.ecore.util.InternalEList

from org.lflang.lf import Attribute

from org.lflang.lf import Expression

from org.lflang.lf import LfPackage

from org.lflang.lf import Timer

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Timer</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.TimerImpl#getAttributes <em>Attributes</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.TimerImpl#getOffset <em>Offset</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.TimerImpl#getPeriod <em>Period</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class TimerImpl(VariableImpl, Timer):
    """ generated source for class TimerImpl """
    #    * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getAttributes()
    #    * @generated
    #    * @ordered
    #    
    attributes = None

    #    * The cached value of the '{@link #getOffset() <em>Offset</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getOffset()
    #    * @generated
    #    * @ordered
    #    
    offset = None

    #    * The cached value of the '{@link #getPeriod() <em>Period</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getPeriod()
    #    * @generated
    #    * @ordered
    #    
    period = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(TimerImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.TIMER

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getAttributes(self):
        """ generated source for method getAttributes """
        if self.attributes == None:
            self.attributes = EObjectContainmentEList(Attribute.__class__, self, LfPackage.TIMER__ATTRIBUTES)
        return self.attributes

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getOffset(self):
        """ generated source for method getOffset """
        return self.offset

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetOffset(self, newOffset, msgs):
        """ generated source for method basicSetOffset """
        oldOffset = self.offset
        self.offset = newOffset
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.TIMER__OFFSET, oldOffset, newOffset)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setOffset(self, newOffset):
        """ generated source for method setOffset """
        if newOffset != self.offset:
            msgs = None
            if self.offset != None:
                msgs = (self.offset).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.TIMER__OFFSET, None, msgs)
            if newOffset != None:
                msgs = (newOffset).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.TIMER__OFFSET, None, msgs)
            msgs = self.basicSetOffset(newOffset, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.TIMER__OFFSET, newOffset, newOffset))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getPeriod(self):
        """ generated source for method getPeriod """
        return self.period

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetPeriod(self, newPeriod, msgs):
        """ generated source for method basicSetPeriod """
        oldPeriod = self.period
        self.period = newPeriod
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.TIMER__PERIOD, oldPeriod, newPeriod)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setPeriod(self, newPeriod):
        """ generated source for method setPeriod """
        if newPeriod != self.period:
            msgs = None
            if self.period != None:
                msgs = (self.period).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.TIMER__PERIOD, None, msgs)
            if newPeriod != None:
                msgs = (newPeriod).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.TIMER__PERIOD, None, msgs)
            msgs = self.basicSetPeriod(newPeriod, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.TIMER__PERIOD, newPeriod, newPeriod))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.TIMER__ATTRIBUTES:
            return (self.getAttributes()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.TIMER__OFFSET:
            return self.basicSetOffset(None, msgs)
        elif featureID == LfPackage.TIMER__PERIOD:
            return self.basicSetPeriod(None, msgs)
        return super(TimerImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.TIMER__ATTRIBUTES:
            return self.getAttributes()
        elif featureID == LfPackage.TIMER__OFFSET:
            return self.getOffset()
        elif featureID == LfPackage.TIMER__PERIOD:
            return self.getPeriod()
        return super(TimerImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    @SuppressWarnings("unchecked")
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.TIMER__ATTRIBUTES:
            self.getAttributes().clear()
            self.getAttributes().extend(newValue)
            return
        elif featureID == LfPackage.TIMER__OFFSET:
            self.setOffset(newValue)
            return
        elif featureID == LfPackage.TIMER__PERIOD:
            self.setPeriod(newValue)
            return
        super(TimerImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.TIMER__ATTRIBUTES:
            self.getAttributes().clear()
            return
        elif featureID == LfPackage.TIMER__OFFSET:
            self.setOffset(None)
            return
        elif featureID == LfPackage.TIMER__PERIOD:
            self.setPeriod(None)
            return
        super(TimerImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.TIMER__ATTRIBUTES:
            return self.attributes != None and not self.attributes.isEmpty()
        elif featureID == LfPackage.TIMER__OFFSET:
            return self.offset != None
        elif featureID == LfPackage.TIMER__PERIOD:
            return self.period != None
        return super(TimerImpl, self).eIsSet(featureID)

# TimerImpl
