#!/usr/bin/env python
""" generated source for module InputImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.impl.ENotificationImpl

from org.lflang.lf import Input

from org.lflang.lf import LfPackage

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Input</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.InputImpl#isMutable <em>Mutable</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class InputImpl(PortImpl, Input):
    """ generated source for class InputImpl """
    #    * The default value of the '{@link #isMutable() <em>Mutable</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isMutable()
    #    * @generated
    #    * @ordered
    #    
    MUTABLE_EDEFAULT = False

    #    * The cached value of the '{@link #isMutable() <em>Mutable</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isMutable()
    #    * @generated
    #    * @ordered
    #    
    mutable = MUTABLE_EDEFAULT

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(InputImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.INPUT

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def isMutable(self):
        """ generated source for method isMutable """
        return self.mutable

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setMutable(self, newMutable):
        """ generated source for method setMutable """
        oldMutable = self.mutable
        self.mutable = newMutable
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.INPUT__MUTABLE, oldMutable, self.mutable))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.INPUT__MUTABLE:
            return self.isMutable()
        return super(InputImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.INPUT__MUTABLE:
            self.setMutable(bool(newValue))
            return
        super(InputImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.INPUT__MUTABLE:
            self.setMutable(self.MUTABLE_EDEFAULT)
            return
        super(InputImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.INPUT__MUTABLE:
            return self.mutable != self.MUTABLE_EDEFAULT
        return super(InputImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(InputImpl, self).__str__()
        result = StringBuilder(super(InputImpl, self).__str__())
        result.append(" (mutable: ")
        result.append(self.mutable)
        result.append(')')
        return result.__str__()

# InputImpl
