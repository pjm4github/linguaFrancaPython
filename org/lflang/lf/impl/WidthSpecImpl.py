#!/usr/bin/env python
""" generated source for module WidthSpecImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import java.util.Collection
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.common.util.EList
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl
# import org.eclipse.emf.ecore.util.EObjectContainmentEList
# import org.eclipse.emf.ecore.util.InternalEList

from org.lflang.lf import LfPackage

from org.lflang.lf import WidthSpec

from org.lflang.lf import WidthTerm

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Width Spec</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.WidthSpecImpl#isOfVariableLength <em>Of Variable Length</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.WidthSpecImpl#getTerms <em>Terms</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class WidthSpecImpl(MinimalEObjectImpl, Container, WidthSpec):
    """ generated source for class WidthSpecImpl """
    #    * The default value of the '{@link #isOfVariableLength() <em>Of Variable Length</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isOfVariableLength()
    #    * @generated
    #    * @ordered
    #    
    OF_VARIABLE_LENGTH_EDEFAULT = False

    #    * The cached value of the '{@link #isOfVariableLength() <em>Of Variable Length</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isOfVariableLength()
    #    * @generated
    #    * @ordered
    #    
    ofVariableLength = OF_VARIABLE_LENGTH_EDEFAULT

    #    * The cached value of the '{@link #getTerms() <em>Terms</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getTerms()
    #    * @generated
    #    * @ordered
    #    
    terms = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(WidthSpecImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.WIDTH_SPEC

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def isOfVariableLength(self):
        """ generated source for method isOfVariableLength """
        return self.ofVariableLength

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setOfVariableLength(self, newOfVariableLength):
        """ generated source for method setOfVariableLength """
        oldOfVariableLength = self.ofVariableLength
        self.ofVariableLength = newOfVariableLength
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.WIDTH_SPEC__OF_VARIABLE_LENGTH, oldOfVariableLength, self.ofVariableLength))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getTerms(self):
        """ generated source for method getTerms """
        if self.terms == None:
            self.terms = EObjectContainmentEList(WidthTerm.__class__, self, LfPackage.WIDTH_SPEC__TERMS)
        return self.terms

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.WIDTH_SPEC__TERMS:
            return (self.getTerms()).basicRemove(otherEnd, msgs)
        return super(WidthSpecImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.WIDTH_SPEC__OF_VARIABLE_LENGTH:
            return self.isOfVariableLength()
        elif featureID == LfPackage.WIDTH_SPEC__TERMS:
            return self.getTerms()
        return super(WidthSpecImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    @SuppressWarnings("unchecked")
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.WIDTH_SPEC__OF_VARIABLE_LENGTH:
            self.setOfVariableLength(bool(newValue))
            return
        elif featureID == LfPackage.WIDTH_SPEC__TERMS:
            self.getTerms().clear()
            self.getTerms().extend(newValue)
            return
        super(WidthSpecImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.WIDTH_SPEC__OF_VARIABLE_LENGTH:
            self.setOfVariableLength(self.OF_VARIABLE_LENGTH_EDEFAULT)
            return
        elif featureID == LfPackage.WIDTH_SPEC__TERMS:
            self.getTerms().clear()
            return
        super(WidthSpecImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.WIDTH_SPEC__OF_VARIABLE_LENGTH:
            return self.ofVariableLength != self.OF_VARIABLE_LENGTH_EDEFAULT
        elif featureID == LfPackage.WIDTH_SPEC__TERMS:
            return self.terms != None and not self.terms.isEmpty()
        return super(WidthSpecImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(WidthSpecImpl, self).__str__()
        result = StringBuilder(super(WidthSpecImpl, self).__str__())
        result.append(" (ofVariableLength: ")
        result.append(self.ofVariableLength)
        result.append(')')
        return result.__str__()

# WidthSpecImpl
