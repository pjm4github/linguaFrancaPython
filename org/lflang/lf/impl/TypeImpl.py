#!/usr/bin/env python
""" generated source for module TypeImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import java.util.Collection
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.common.util.EList
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl
# import org.eclipse.emf.ecore.util.EDataTypeEList
# import org.eclipse.emf.ecore.util.EObjectContainmentEList
# import org.eclipse.emf.ecore.util.InternalEList

from org.lflang.lf import ArraySpec

from org.lflang.lf import LFCode

from org.lflang.lf import LfPackage

from org.lflang.lf import Type

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Type</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.TypeImpl#isTime <em>Time</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.TypeImpl#getArraySpec <em>Array Spec</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.TypeImpl#getId <em>Id</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.TypeImpl#getTypeParms <em>Type Parms</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.TypeImpl#getStars <em>Stars</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.TypeImpl#getCode <em>Code</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class TypeImpl(MinimalEObjectImpl, Container, Type):
    """ generated source for class TypeImpl """
    #    * The default value of the '{@link #isTime() <em>Time</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isTime()
    #    * @generated
    #    * @ordered
    #    
    TIME_EDEFAULT = False

    #    * The cached value of the '{@link #isTime() <em>Time</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isTime()
    #    * @generated
    #    * @ordered
    #    
    time = TIME_EDEFAULT

    #    * The cached value of the '{@link #getArraySpec() <em>Array Spec</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getArraySpec()
    #    * @generated
    #    * @ordered
    #    
    arraySpec = None

    #    * The default value of the '{@link #getId() <em>Id</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getId()
    #    * @generated
    #    * @ordered
    #    
    ID_EDEFAULT = None

    #    * The cached value of the '{@link #getId() <em>Id</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getId()
    #    * @generated
    #    * @ordered
    #    
    id = ID_EDEFAULT

    #    * The cached value of the '{@link #getTypeParms() <em>Type Parms</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getTypeParms()
    #    * @generated
    #    * @ordered
    #    
    typeParms = None

    #    * The cached value of the '{@link #getStars() <em>Stars</em>}' attribute list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getStars()
    #    * @generated
    #    * @ordered
    #    
    stars = None

    #    * The cached value of the '{@link #getCode() <em>Code</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getCode()
    #    * @generated
    #    * @ordered
    #    
    code_ = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(TypeImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.TYPE

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def isTime(self):
        """ generated source for method isTime """
        return self.time

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setTime(self, newTime):
        """ generated source for method setTime """
        oldTime = self.time
        self.time = newTime
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.TYPE__TIME, oldTime, self.time))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getArraySpec(self):
        """ generated source for method getArraySpec """
        return self.arraySpec

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetArraySpec(self, newArraySpec, msgs):
        """ generated source for method basicSetArraySpec """
        oldArraySpec = self.arraySpec
        self.arraySpec = newArraySpec
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.TYPE__ARRAY_SPEC, oldArraySpec, newArraySpec)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setArraySpec(self, newArraySpec):
        """ generated source for method setArraySpec """
        if newArraySpec != self.arraySpec:
            msgs = None
            if self.arraySpec != None:
                msgs = (self.arraySpec).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.TYPE__ARRAY_SPEC, None, msgs)
            if newArraySpec != None:
                msgs = (newArraySpec).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.TYPE__ARRAY_SPEC, None, msgs)
            msgs = self.basicSetArraySpec(newArraySpec, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.TYPE__ARRAY_SPEC, newArraySpec, newArraySpec))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getId(self):
        """ generated source for method getId """
        return self.id

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setId(self, newId):
        """ generated source for method setId """
        oldId = self.id
        self.id = newId
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.TYPE__ID, oldId, self.id))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getTypeParms(self):
        """ generated source for method getTypeParms """
        if self.typeParms == None:
            self.typeParms = EObjectContainmentEList(Type.__class__, self, LfPackage.TYPE__TYPE_PARMS)
        return self.typeParms

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getStars(self):
        """ generated source for method getStars """
        if self.stars == None:
            self.stars = EDataTypeEList(String.__class__, self, LfPackage.TYPE__STARS)
        return self.stars

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getCode(self):
        """ generated source for method getCode """
        return self.code_

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetCode(self, newCode, msgs):
        """ generated source for method basicSetCode """
        oldCode = self.code_
        self.code_ = newCode
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.TYPE__CODE, oldCode, newCode)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setCode(self, newCode):
        """ generated source for method setCode """
        if newCode != self.code_:
            msgs = None
            if self.code_ != None:
                msgs = (self.code_).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.TYPE__CODE, None, msgs)
            if newCode != None:
                msgs = (newCode).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.TYPE__CODE, None, msgs)
            msgs = self.basicSetCode(newCode, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.TYPE__CODE, newCode, newCode))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.TYPE__ARRAY_SPEC:
            return self.basicSetArraySpec(None, msgs)
        elif featureID == LfPackage.TYPE__TYPE_PARMS:
            return (self.getTypeParms()).basicRemove(otherEnd, msgs)
        elif featureID == LfPackage.TYPE__CODE:
            return self.basicSetCode(None, msgs)
        return super(TypeImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.TYPE__TIME:
            return self.isTime()
        elif featureID == LfPackage.TYPE__ARRAY_SPEC:
            return self.getArraySpec()
        elif featureID == LfPackage.TYPE__ID:
            return self.getId()
        elif featureID == LfPackage.TYPE__TYPE_PARMS:
            return self.getTypeParms()
        elif featureID == LfPackage.TYPE__STARS:
            return self.getStars()
        elif featureID == LfPackage.TYPE__CODE:
            return self.getCode()
        return super(TypeImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    @SuppressWarnings("unchecked")
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.TYPE__TIME:
            self.setTime(bool(newValue))
            return
        elif featureID == LfPackage.TYPE__ARRAY_SPEC:
            self.setArraySpec(newValue)
            return
        elif featureID == LfPackage.TYPE__ID:
            self.setId(str(newValue))
            return
        elif featureID == LfPackage.TYPE__TYPE_PARMS:
            self.getTypeParms().clear()
            self.getTypeParms().extend(newValue)
            return
        elif featureID == LfPackage.TYPE__STARS:
            self.getStars().clear()
            self.getStars().extend(newValue)
            return
        elif featureID == LfPackage.TYPE__CODE:
            self.setCode(newValue)
            return
        super(TypeImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.TYPE__TIME:
            self.setTime(self.TIME_EDEFAULT)
            return
        elif featureID == LfPackage.TYPE__ARRAY_SPEC:
            self.setArraySpec(None)
            return
        elif featureID == LfPackage.TYPE__ID:
            self.setId(self.ID_EDEFAULT)
            return
        elif featureID == LfPackage.TYPE__TYPE_PARMS:
            self.getTypeParms().clear()
            return
        elif featureID == LfPackage.TYPE__STARS:
            self.getStars().clear()
            return
        elif featureID == LfPackage.TYPE__CODE:
            self.setCode(None)
            return
        super(TypeImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.TYPE__TIME:
            return self.time != self.TIME_EDEFAULT
        elif featureID == LfPackage.TYPE__ARRAY_SPEC:
            return self.arraySpec != None
        elif featureID == LfPackage.TYPE__ID:
            return self.id != None if self.ID_EDEFAULT == None else not self.ID_EDEFAULT == self.id
        elif featureID == LfPackage.TYPE__TYPE_PARMS:
            return self.typeParms != None and not self.typeParms.isEmpty()
        elif featureID == LfPackage.TYPE__STARS:
            return self.stars != None and not self.stars.isEmpty()
        elif featureID == LfPackage.TYPE__CODE:
            return self.code_ != None
        return super(TypeImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(TypeImpl, self).__str__()
        result = StringBuilder(super(TypeImpl, self).__str__())
        result.append(" (time: ")
        result.append(self.time)
        result.append(", id: ")
        result.append(self.id)
        result.append(", stars: ")
        result.append(self.stars)
        result.append(')')
        return result.__str__()

# TypeImpl
