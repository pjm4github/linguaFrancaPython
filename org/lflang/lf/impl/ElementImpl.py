#!/usr/bin/env python
""" generated source for module ElementImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl

from org.lflang.lf import Array

from org.lflang.lf import Element

from org.lflang.lf import KeyValuePairs

from org.lflang.lf import LfPackage

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Element</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.ElementImpl#getKeyvalue <em>Keyvalue</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ElementImpl#getArray <em>Array</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ElementImpl#getLiteral <em>Literal</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ElementImpl#getTime <em>Time</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ElementImpl#getUnit <em>Unit</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ElementImpl#getId <em>Id</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class ElementImpl(MinimalEObjectImpl, Container, Element):
    """ generated source for class ElementImpl """
    #    * The cached value of the '{@link #getKeyvalue() <em>Keyvalue</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getKeyvalue()
    #    * @generated
    #    * @ordered
    #    
    keyvalue = None

    #    * The cached value of the '{@link #getArray() <em>Array</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getArray()
    #    * @generated
    #    * @ordered
    #    
    array = None

    #    * The default value of the '{@link #getLiteral() <em>Literal</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getLiteral()
    #    * @generated
    #    * @ordered
    #    
    LITERAL_EDEFAULT = None

    #    * The cached value of the '{@link #getLiteral() <em>Literal</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getLiteral()
    #    * @generated
    #    * @ordered
    #    
    literal = LITERAL_EDEFAULT

    #    * The default value of the '{@link #getTime() <em>Time</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getTime()
    #    * @generated
    #    * @ordered
    #    
    TIME_EDEFAULT = 0

    #    * The cached value of the '{@link #getTime() <em>Time</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getTime()
    #    * @generated
    #    * @ordered
    #    
    time = TIME_EDEFAULT

    #    * The default value of the '{@link #getUnit() <em>Unit</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getUnit()
    #    * @generated
    #    * @ordered
    #    
    UNIT_EDEFAULT = None

    #    * The cached value of the '{@link #getUnit() <em>Unit</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getUnit()
    #    * @generated
    #    * @ordered
    #    
    unit = UNIT_EDEFAULT

    #    * The default value of the '{@link #getId() <em>Id</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getId()
    #    * @generated
    #    * @ordered
    #    
    ID_EDEFAULT = None

    #    * The cached value of the '{@link #getId() <em>Id</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getId()
    #    * @generated
    #    * @ordered
    #    
    id = ID_EDEFAULT

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(ElementImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.ELEMENT

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getKeyvalue(self):
        """ generated source for method getKeyvalue """
        return self.keyvalue

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetKeyvalue(self, newKeyvalue, msgs):
        """ generated source for method basicSetKeyvalue """
        oldKeyvalue = self.keyvalue
        self.keyvalue = newKeyvalue
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.ELEMENT__KEYVALUE, oldKeyvalue, newKeyvalue)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setKeyvalue(self, newKeyvalue):
        """ generated source for method setKeyvalue """
        if newKeyvalue != self.keyvalue:
            msgs = None
            if self.keyvalue != None:
                msgs = (self.keyvalue).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.ELEMENT__KEYVALUE, None, msgs)
            if newKeyvalue != None:
                msgs = (newKeyvalue).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.ELEMENT__KEYVALUE, None, msgs)
            msgs = self.basicSetKeyvalue(newKeyvalue, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.ELEMENT__KEYVALUE, newKeyvalue, newKeyvalue))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getArray(self):
        """ generated source for method getArray """
        return self.array

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetArray(self, newArray, msgs):
        """ generated source for method basicSetArray """
        oldArray = self.array
        self.array = newArray
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.ELEMENT__ARRAY, oldArray, newArray)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setArray(self, newArray):
        """ generated source for method setArray """
        if newArray != self.array:
            msgs = None
            if self.array != None:
                msgs = (self.array).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.ELEMENT__ARRAY, None, msgs)
            if newArray != None:
                msgs = (newArray).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.ELEMENT__ARRAY, None, msgs)
            msgs = self.basicSetArray(newArray, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.ELEMENT__ARRAY, newArray, newArray))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getLiteral(self):
        """ generated source for method getLiteral """
        return self.literal

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setLiteral(self, newLiteral):
        """ generated source for method setLiteral """
        oldLiteral = self.literal
        self.literal = newLiteral
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.ELEMENT__LITERAL, oldLiteral, self.literal))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getTime(self):
        """ generated source for method getTime """
        return self.time

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setTime(self, newTime):
        """ generated source for method setTime """
        oldTime = self.time
        self.time = newTime
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.ELEMENT__TIME, oldTime, self.time))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getUnit(self):
        """ generated source for method getUnit """
        return self.unit

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setUnit(self, newUnit):
        """ generated source for method setUnit """
        oldUnit = self.unit
        self.unit = newUnit
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.ELEMENT__UNIT, oldUnit, self.unit))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getId(self):
        """ generated source for method getId """
        return self.id

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setId(self, newId):
        """ generated source for method setId """
        oldId = self.id
        self.id = newId
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.ELEMENT__ID, oldId, self.id))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.ELEMENT__KEYVALUE:
            return self.basicSetKeyvalue(None, msgs)
        elif featureID == LfPackage.ELEMENT__ARRAY:
            return self.basicSetArray(None, msgs)
        return super(ElementImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.ELEMENT__KEYVALUE:
            return self.getKeyvalue()
        elif featureID == LfPackage.ELEMENT__ARRAY:
            return self.getArray()
        elif featureID == LfPackage.ELEMENT__LITERAL:
            return self.getLiteral()
        elif featureID == LfPackage.ELEMENT__TIME:
            return self.getTime()
        elif featureID == LfPackage.ELEMENT__UNIT:
            return self.getUnit()
        elif featureID == LfPackage.ELEMENT__ID:
            return self.getId()
        return super(ElementImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.ELEMENT__KEYVALUE:
            self.setKeyvalue(newValue)
            return
        elif featureID == LfPackage.ELEMENT__ARRAY:
            self.setArray(newValue)
            return
        elif featureID == LfPackage.ELEMENT__LITERAL:
            self.setLiteral(str(newValue))
            return
        elif featureID == LfPackage.ELEMENT__TIME:
            self.setTime(int(newValue))
            return
        elif featureID == LfPackage.ELEMENT__UNIT:
            self.setUnit(str(newValue))
            return
        elif featureID == LfPackage.ELEMENT__ID:
            self.setId(str(newValue))
            return
        super(ElementImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.ELEMENT__KEYVALUE:
            self.setKeyvalue(None)
            return
        elif featureID == LfPackage.ELEMENT__ARRAY:
            self.setArray(None)
            return
        elif featureID == LfPackage.ELEMENT__LITERAL:
            self.setLiteral(self.LITERAL_EDEFAULT)
            return
        elif featureID == LfPackage.ELEMENT__TIME:
            self.setTime(self.TIME_EDEFAULT)
            return
        elif featureID == LfPackage.ELEMENT__UNIT:
            self.setUnit(self.UNIT_EDEFAULT)
            return
        elif featureID == LfPackage.ELEMENT__ID:
            self.setId(self.ID_EDEFAULT)
            return
        super(ElementImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.ELEMENT__KEYVALUE:
            return self.keyvalue != None
        elif featureID == LfPackage.ELEMENT__ARRAY:
            return self.array != None
        elif featureID == LfPackage.ELEMENT__LITERAL:
            return self.literal != None if self.LITERAL_EDEFAULT == None else not self.LITERAL_EDEFAULT == self.literal
        elif featureID == LfPackage.ELEMENT__TIME:
            return self.time != self.TIME_EDEFAULT
        elif featureID == LfPackage.ELEMENT__UNIT:
            return self.unit != None if self.UNIT_EDEFAULT == None else not self.UNIT_EDEFAULT == self.unit
        elif featureID == LfPackage.ELEMENT__ID:
            return self.id != None if self.ID_EDEFAULT == None else not self.ID_EDEFAULT == self.id
        return super(ElementImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(ElementImpl, self).__str__()
        result = StringBuilder(super(ElementImpl, self).__str__())
        result.append(" (literal: ")
        result.append(self.literal)
        result.append(", time: ")
        result.append(self.time)
        result.append(", unit: ")
        result.append(self.unit)
        result.append(", id: ")
        result.append(self.id)
        result.append(')')
        return result.__str__()

# ElementImpl
