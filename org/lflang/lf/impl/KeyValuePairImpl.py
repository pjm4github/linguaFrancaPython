#!/usr/bin/env python
""" generated source for module KeyValuePairImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl

from org.lflang.lf import Element

from org.lflang.lf import KeyValuePair

from org.lflang.lf import LfPackage

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Key Value Pair</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.KeyValuePairImpl#getName <em>Name</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.KeyValuePairImpl#getValue <em>Value</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class KeyValuePairImpl(MinimalEObjectImpl, Container, KeyValuePair):
    """ generated source for class KeyValuePairImpl """
    #    * The default value of the '{@link #getName() <em>Name</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getName()
    #    * @generated
    #    * @ordered
    #    
    NAME_EDEFAULT = None

    #    * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getName()
    #    * @generated
    #    * @ordered
    #    
    name = NAME_EDEFAULT

    #    * The cached value of the '{@link #getValue() <em>Value</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getValue()
    #    * @generated
    #    * @ordered
    #    
    value = None

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(KeyValuePairImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.KEY_VALUE_PAIR

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getName(self):
        """ generated source for method getName """
        return self.name

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setName(self, newName):
        """ generated source for method setName """
        oldName = self.name
        self.name = newName
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.KEY_VALUE_PAIR__NAME, oldName, self.name))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getValue(self):
        """ generated source for method getValue """
        return self.value

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicSetValue(self, newValue, msgs):
        """ generated source for method basicSetValue """
        oldValue = self.value
        self.value = newValue
        if eNotificationRequired():
            notification = ENotificationImpl(self, Notification.SET, LfPackage.KEY_VALUE_PAIR__VALUE, oldValue, newValue)
            if msgs == None:
                msgs = notification
            else:
                msgs.append(notification)
        return msgs

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setValue(self, newValue):
        """ generated source for method setValue """
        if newValue != self.value:
            msgs = None
            if self.value != None:
                msgs = (self.value).eInverseRemove(self, EOPPOSITE_FEATURE_BASE - LfPackage.KEY_VALUE_PAIR__VALUE, None, msgs)
            if newValue != None:
                msgs = (newValue).eInverseAdd(self, EOPPOSITE_FEATURE_BASE - LfPackage.KEY_VALUE_PAIR__VALUE, None, msgs)
            msgs = self.basicSetValue(newValue, msgs)
            if msgs != None:
                msgs.dispatch()
        elif eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.KEY_VALUE_PAIR__VALUE, newValue, newValue))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.KEY_VALUE_PAIR__VALUE:
            return self.basicSetValue(None, msgs)
        return super(KeyValuePairImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.KEY_VALUE_PAIR__NAME:
            return self.__name__
        elif featureID == LfPackage.KEY_VALUE_PAIR__VALUE:
            return self.getValue()
        return super(KeyValuePairImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.KEY_VALUE_PAIR__NAME:
            self.setName(str(newValue))
            return
        elif featureID == LfPackage.KEY_VALUE_PAIR__VALUE:
            self.setValue(newValue)
            return
        super(KeyValuePairImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.KEY_VALUE_PAIR__NAME:
            self.setName(self.NAME_EDEFAULT)
            return
        elif featureID == LfPackage.KEY_VALUE_PAIR__VALUE:
            self.setValue(None)
            return
        super(KeyValuePairImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.KEY_VALUE_PAIR__NAME:
            return self.name != None if self.NAME_EDEFAULT == None else not self.NAME_EDEFAULT == self.name
        elif featureID == LfPackage.KEY_VALUE_PAIR__VALUE:
            return self.value != None
        return super(KeyValuePairImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(KeyValuePairImpl, self).__str__()
        result = StringBuilder(super(KeyValuePairImpl, self).__str__())
        result.append(" (name: ")
        result.append(self.name)
        result.append(')')
        return result.__str__()

# KeyValuePairImpl
