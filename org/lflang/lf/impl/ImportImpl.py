#!/usr/bin/env python
""" generated source for module ImportImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import java.util.Collection
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.common.notify.NotificationChain
# import org.eclipse.emf.common.util.EList
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl
# import org.eclipse.emf.ecore.impl.MinimalEObjectImpl
# import org.eclipse.emf.ecore.util.EObjectContainmentEList
# import org.eclipse.emf.ecore.util.InternalEList

from org.lflang.lf import Import

from org.lflang.lf import ImportedReactor

from org.lflang.lf import LfPackage

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Import</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.ImportImpl#getReactorClasses <em>Reactor Classes</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.ImportImpl#getImportURI <em>Import URI</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class ImportImpl(MinimalEObjectImpl, Container, Import):
    """ generated source for class ImportImpl """
    #    * The cached value of the '{@link #getReactorClasses() <em>Reactor Classes</em>}' containment reference list.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getReactorClasses()
    #    * @generated
    #    * @ordered
    #    
    reactorClasses = None

    #    * The default value of the '{@link #getImportURI() <em>Import URI</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getImportURI()
    #    * @generated
    #    * @ordered
    #    
    IMPORT_URI_EDEFAULT = None

    #    * The cached value of the '{@link #getImportURI() <em>Import URI</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getImportURI()
    #    * @generated
    #    * @ordered
    #    
    importURI = IMPORT_URI_EDEFAULT

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(ImportImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.IMPORT

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getReactorClasses(self):
        """ generated source for method getReactorClasses """
        if self.reactorClasses == None:
            self.reactorClasses = EObjectContainmentEList(ImportedReactor.__class__, self, LfPackage.IMPORT__REACTOR_CLASSES)
        return self.reactorClasses

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getImportURI(self):
        """ generated source for method getImportURI """
        return self.importURI

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setImportURI(self, newImportURI):
        """ generated source for method setImportURI """
        oldImportURI = self.importURI
        self.importURI = newImportURI
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.IMPORT__IMPORT_URI, oldImportURI, self.importURI))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eInverseRemove(self, otherEnd, featureID, msgs):
        """ generated source for method eInverseRemove """
        if featureID == LfPackage.IMPORT__REACTOR_CLASSES:
            return (self.getReactorClasses()).basicRemove(otherEnd, msgs)
        return super(ImportImpl, self).eInverseRemove(otherEnd, featureID, msgs)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.IMPORT__REACTOR_CLASSES:
            return self.getReactorClasses()
        elif featureID == LfPackage.IMPORT__IMPORT_URI:
            return self.getImportURI()
        return super(ImportImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    @SuppressWarnings("unchecked")
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.IMPORT__REACTOR_CLASSES:
            self.getReactorClasses().clear()
            self.getReactorClasses().extend(newValue)
            return
        elif featureID == LfPackage.IMPORT__IMPORT_URI:
            self.setImportURI(str(newValue))
            return
        super(ImportImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.IMPORT__REACTOR_CLASSES:
            self.getReactorClasses().clear()
            return
        elif featureID == LfPackage.IMPORT__IMPORT_URI:
            self.setImportURI(self.IMPORT_URI_EDEFAULT)
            return
        super(ImportImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.IMPORT__REACTOR_CLASSES:
            return self.reactorClasses != None and not self.reactorClasses.isEmpty()
        elif featureID == LfPackage.IMPORT__IMPORT_URI:
            return self.importURI != None if self.IMPORT_URI_EDEFAULT == None else not self.IMPORT_URI_EDEFAULT == self.importURI
        return super(ImportImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(ImportImpl, self).__str__()
        result = StringBuilder(super(ImportImpl, self).__str__())
        result.append(" (importURI: ")
        result.append(self.importURI)
        result.append(')')
        return result.__str__()
# importImpl
