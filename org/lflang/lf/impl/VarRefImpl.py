#!/usr/bin/env python
""" generated source for module VarRefImpl """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf.impl
# import org.eclipse.emf.common.notify.Notification
# import org.eclipse.emf.ecore.EClass
# import org.eclipse.emf.ecore.InternalEObject
# import org.eclipse.emf.ecore.impl.ENotificationImpl

from org.lflang.lf import Instantiation

from org.lflang.lf import LfPackage

from org.lflang.lf import ModeTransition

from org.lflang.lf import VarRef

from org.lflang.lf import Variable

# 
#  * <!-- begin-user-doc -->
#  * An implementation of the model object '<em><b>Var Ref</b></em>'.
#  * <!-- end-user-doc -->
#  * <p>
#  * The following features are implemented:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.impl.VarRefImpl#getVariable <em>Variable</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.VarRefImpl#getContainer <em>Container</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.VarRefImpl#isInterleaved <em>Interleaved</em>}</li>
#  *   <li>{@link org.lflang.lf.impl.VarRefImpl#getTransition <em>Transition</em>}</li>
#  * </ul>
#  *
#  * @generated
#  
class VarRefImpl(TriggerRefImpl, VarRef):
    """ generated source for class VarRefImpl """
    #    * The cached value of the '{@link #getVariable() <em>Variable</em>}' reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getVariable()
    #    * @generated
    #    * @ordered
    #    
    variable = None

    #    * The cached value of the '{@link #getContainer() <em>Container</em>}' reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getContainer()
    #    * @generated
    #    * @ordered
    #    
    container = None

    #    * The default value of the '{@link #isInterleaved() <em>Interleaved</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isInterleaved()
    #    * @generated
    #    * @ordered
    #    
    INTERLEAVED_EDEFAULT = False

    #    * The cached value of the '{@link #isInterleaved() <em>Interleaved</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #isInterleaved()
    #    * @generated
    #    * @ordered
    #    
    interleaved = INTERLEAVED_EDEFAULT

    #    * The default value of the '{@link #getTransition() <em>Transition</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getTransition()
    #    * @generated
    #    * @ordered
    #    
    TRANSITION_EDEFAULT = ModeTransition.RESET

    #    * The cached value of the '{@link #getTransition() <em>Transition</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @see #getTransition()
    #    * @generated
    #    * @ordered
    #    
    transition = TRANSITION_EDEFAULT

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __init__(self):
        """ generated source for method __init__ """
        super(VarRefImpl, self).__init__()

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eStaticClass(self):
        """ generated source for method eStaticClass """
        return LfPackage.Literals.VAR_REF

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getVariable(self):
        """ generated source for method getVariable """
        if self.variable != None and self.variable.eIsProxy():
            oldVariable = self.variable
            self.variable = eResolveProxy(oldVariable)
            if self.variable != oldVariable:
                if eNotificationRequired():
                    eNotify(ENotificationImpl(self, Notification.RESOLVE, LfPackage.VAR_REF__VARIABLE, oldVariable, self.variable))
        return self.variable

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicGetVariable(self):
        """ generated source for method basicGetVariable """
        return self.variable

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setVariable(self, newVariable):
        """ generated source for method setVariable """
        oldVariable = self.variable
        self.variable = newVariable
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.VAR_REF__VARIABLE, oldVariable, self.variable))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getContainer(self):
        """ generated source for method getContainer """
        if self.container != None and self.container.eIsProxy():
            oldContainer = self.container
            self.container = eResolveProxy(oldContainer)
            if self.container != oldContainer:
                if eNotificationRequired():
                    eNotify(ENotificationImpl(self, Notification.RESOLVE, LfPackage.VAR_REF__CONTAINER, oldContainer, self.container))
        return self.container

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def basicGetContainer(self):
        """ generated source for method basicGetContainer """
        return self.container

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setContainer(self, newContainer):
        """ generated source for method setContainer """
        oldContainer = self.container
        self.container = newContainer
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.VAR_REF__CONTAINER, oldContainer, self.container))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def isInterleaved(self):
        """ generated source for method isInterleaved """
        return self.interleaved

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setInterleaved(self, newInterleaved):
        """ generated source for method setInterleaved """
        oldInterleaved = self.interleaved
        self.interleaved = newInterleaved
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.VAR_REF__INTERLEAVED, oldInterleaved, self.interleaved))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def getTransition(self):
        """ generated source for method getTransition """
        return self.transition

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def setTransition(self, newTransition):
        """ generated source for method setTransition """
        oldTransition = self.transition
        self.transition = self.TRANSITION_EDEFAULT if newTransition == None else newTransition
        if eNotificationRequired():
            eNotify(ENotificationImpl(self, Notification.SET, LfPackage.VAR_REF__TRANSITION, oldTransition, self.transition))

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eGet(self, featureID, resolve, coreType):
        """ generated source for method eGet """
        if featureID == LfPackage.VAR_REF__VARIABLE:
            if resolve:
                return self.getVariable()
            return self.basicGetVariable()
        elif featureID == LfPackage.VAR_REF__CONTAINER:
            if resolve:
                return self.getContainer()
            return self.basicGetContainer()
        elif featureID == LfPackage.VAR_REF__INTERLEAVED:
            return self.isInterleaved()
        elif featureID == LfPackage.VAR_REF__TRANSITION:
            return self.getTransition()
        return super(VarRefImpl, self).eGet(featureID, resolve, coreType)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eSet(self, featureID, newValue):
        """ generated source for method eSet """
        if featureID == LfPackage.VAR_REF__VARIABLE:
            self.setVariable(newValue)
            return
        elif featureID == LfPackage.VAR_REF__CONTAINER:
            self.setContainer(newValue)
            return
        elif featureID == LfPackage.VAR_REF__INTERLEAVED:
            self.setInterleaved(bool(newValue))
            return
        elif featureID == LfPackage.VAR_REF__TRANSITION:
            self.setTransition(newValue)
            return
        super(VarRefImpl, self).eSet(featureID, newValue)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eUnset(self, featureID):
        """ generated source for method eUnset """
        if featureID == LfPackage.VAR_REF__VARIABLE:
            self.setVariable(None)
            return
        elif featureID == LfPackage.VAR_REF__CONTAINER:
            self.setContainer(None)
            return
        elif featureID == LfPackage.VAR_REF__INTERLEAVED:
            self.setInterleaved(self.INTERLEAVED_EDEFAULT)
            return
        elif featureID == LfPackage.VAR_REF__TRANSITION:
            self.setTransition(self.TRANSITION_EDEFAULT)
            return
        super(VarRefImpl, self).eUnset(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def eIsSet(self, featureID):
        """ generated source for method eIsSet """
        if featureID == LfPackage.VAR_REF__VARIABLE:
            return self.variable != None
        elif featureID == LfPackage.VAR_REF__CONTAINER:
            return self.container != None
        elif featureID == LfPackage.VAR_REF__INTERLEAVED:
            return self.interleaved != self.INTERLEAVED_EDEFAULT
        elif featureID == LfPackage.VAR_REF__TRANSITION:
            return self.transition != self.TRANSITION_EDEFAULT
        return super(VarRefImpl, self).eIsSet(featureID)

    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @generated
    #    
    def __str__(self):
        """ generated source for method toString """
        if eIsProxy():
            return super(VarRefImpl, self).__str__()
        result = StringBuilder(super(VarRefImpl, self).__str__())
        result.append(" (interleaved: ")
        result.append(self.interleaved)
        result.append(", transition: ")
        result.append(self.transition)
        result.append(')')
        return result.__str__()

# VarRefImpl
