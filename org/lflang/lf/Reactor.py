#!/usr/bin/env python
""" generated source for module Reactor """
from abc import ABCMeta, abstractmethod
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf
# import org.eclipse.emf.common.util.EList

# 
#  * <!-- begin-user-doc -->
#  * A representation of the model object '<em><b>Reactor</b></em>'.
#  * <!-- end-user-doc -->
#  *
#  * <p>
#  * The following features are supported:
#  * </p>
#  * <ul>
#  *   <li>{@link org.lflang.lf.Reactor#getAttributes <em>Attributes</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#isFederated <em>Federated</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#isMain <em>Main</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#isRealtime <em>Realtime</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getTypeParms <em>Type Parms</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getParameters <em>Parameters</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getHost <em>Host</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getSuperClasses <em>Super Classes</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getPreambles <em>Preambles</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getStateVars <em>State Vars</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getMethods <em>Methods</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getInputs <em>Inputs</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getOutputs <em>Outputs</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getTimers <em>Timers</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getActions <em>Actions</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getInstantiations <em>Instantiations</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getConnections <em>Connections</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getReactions <em>Reactions</em>}</li>
#  *   <li>{@link org.lflang.lf.Reactor#getModes <em>Modes</em>}</li>
#  * </ul>
#  *
#  * @see org.lflang.lf.LfPackage#getReactor()
#  * @model
#  * @generated
#  
class Reactor(ReactorDecl):
    """ generated source for interface Reactor """
    __metaclass__ = ABCMeta
    #    * Returns the value of the '<em><b>Attributes</b></em>' containment reference list.
    #    * The list contents are of type {@link org.lflang.lf.Attribute}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Attributes</em>' containment reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_Attributes()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getAttributes(self):
        """ generated source for method getAttributes """

    #    * Returns the value of the '<em><b>Federated</b></em>' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Federated</em>' attribute.
    #    * @see #setFederated(boolean)
    #    * @see org.lflang.lf.LfPackage#getReactor_Federated()
    #    * @model
    #    * @generated
    #    
    @abstractmethod
    def isFederated(self):
        """ generated source for method isFederated """

    #    * Sets the value of the '{@link org.lflang.lf.Reactor#isFederated <em>Federated</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @param value the new value of the '<em>Federated</em>' attribute.
    #    * @see #isFederated()
    #    * @generated
    #    
    @abstractmethod
    def setFederated(self, value):
        """ generated source for method setFederated """

    #    * Returns the value of the '<em><b>Main</b></em>' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Main</em>' attribute.
    #    * @see #setMain(boolean)
    #    * @see org.lflang.lf.LfPackage#getReactor_Main()
    #    * @model
    #    * @generated
    #    
    @abstractmethod
    def isMain(self):
        """ generated source for method isMain """

    #    * Sets the value of the '{@link org.lflang.lf.Reactor#isMain <em>Main</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @param value the new value of the '<em>Main</em>' attribute.
    #    * @see #isMain()
    #    * @generated
    #    
    @abstractmethod
    def setMain(self, value):
        """ generated source for method setMain """

    #    * Returns the value of the '<em><b>Realtime</b></em>' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Realtime</em>' attribute.
    #    * @see #setRealtime(boolean)
    #    * @see org.lflang.lf.LfPackage#getReactor_Realtime()
    #    * @model
    #    * @generated
    #    
    @abstractmethod
    def isRealtime(self):
        """ generated source for method isRealtime """

    #    * Sets the value of the '{@link org.lflang.lf.Reactor#isRealtime <em>Realtime</em>}' attribute.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @param value the new value of the '<em>Realtime</em>' attribute.
    #    * @see #isRealtime()
    #    * @generated
    #    
    @abstractmethod
    def setRealtime(self, value):
        """ generated source for method setRealtime """

    #    * Returns the value of the '<em><b>Type Parms</b></em>' containment reference list.
    #    * The list contents are of type {@link org.lflang.lf.TypeParm}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Type Parms</em>' containment reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_TypeParms()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getTypeParms(self):
        """ generated source for method getTypeParms """

    #    * Returns the value of the '<em><b>Parameters</b></em>' containment reference list.
    #    * The list contents are of type {@link org.lflang.lf.Parameter}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Parameters</em>' containment reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_Parameters()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getParameters(self):
        """ generated source for method getParameters """

    #    * Returns the value of the '<em><b>Host</b></em>' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Host</em>' containment reference.
    #    * @see #setHost(Host)
    #    * @see org.lflang.lf.LfPackage#getReactor_Host()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getHost(self):
        """ generated source for method getHost """

    #    * Sets the value of the '{@link org.lflang.lf.Reactor#getHost <em>Host</em>}' containment reference.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @param value the new value of the '<em>Host</em>' containment reference.
    #    * @see #getHost()
    #    * @generated
    #    
    @abstractmethod
    def setHost(self, value):
        """ generated source for method setHost """

    #    * Returns the value of the '<em><b>Super Classes</b></em>' reference list.
    #    * The list contents are of type {@link org.lflang.lf.ReactorDecl}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Super Classes</em>' reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_SuperClasses()
    #    * @model
    #    * @generated
    #    
    @abstractmethod
    def getSuperClasses(self):
        """ generated source for method getSuperClasses """

    #    * Returns the value of the '<em><b>Preambles</b></em>' containment reference list.
    #    * The list contents are of type {@link org.lflang.lf.Preamble}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Preambles</em>' containment reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_Preambles()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getPreambles(self):
        """ generated source for method getPreambles """

    #    * Returns the value of the '<em><b>State Vars</b></em>' containment reference list.
    #    * The list contents are of type {@link org.lflang.lf.StateVar}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>State Vars</em>' containment reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_StateVars()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getStateVars(self):
        """ generated source for method getStateVars """

    #    * Returns the value of the '<em><b>Methods</b></em>' containment reference list.
    #    * The list contents are of type {@link org.lflang.lf.Method}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Methods</em>' containment reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_Methods()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getMethods(self):
        """ generated source for method getMethods """

    #    * Returns the value of the '<em><b>Inputs</b></em>' containment reference list.
    #    * The list contents are of type {@link org.lflang.lf.Input}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Inputs</em>' containment reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_Inputs()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getInputs(self):
        """ generated source for method getInputs """

    #    * Returns the value of the '<em><b>Outputs</b></em>' containment reference list.
    #    * The list contents are of type {@link org.lflang.lf.Output}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Outputs</em>' containment reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_Outputs()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getOutputs(self):
        """ generated source for method getOutputs """

    #    * Returns the value of the '<em><b>Timers</b></em>' containment reference list.
    #    * The list contents are of type {@link org.lflang.lf.Timer}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Timers</em>' containment reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_Timers()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getTimers(self):
        """ generated source for method getTimers """

    #    * Returns the value of the '<em><b>Actions</b></em>' containment reference list.
    #    * The list contents are of type {@link org.lflang.lf.Action}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Actions</em>' containment reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_Actions()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getActions(self):
        """ generated source for method getActions """

    #    * Returns the value of the '<em><b>Instantiations</b></em>' containment reference list.
    #    * The list contents are of type {@link org.lflang.lf.Instantiation}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Instantiations</em>' containment reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_Instantiations()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getInstantiations(self):
        """ generated source for method getInstantiations """

    #    * Returns the value of the '<em><b>Connections</b></em>' containment reference list.
    #    * The list contents are of type {@link org.lflang.lf.Connection}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Connections</em>' containment reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_Connections()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getConnections(self):
        """ generated source for method getConnections """

    #    * Returns the value of the '<em><b>Reactions</b></em>' containment reference list.
    #    * The list contents are of type {@link org.lflang.lf.Reaction}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Reactions</em>' containment reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_Reactions()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getReactions(self):
        """ generated source for method getReactions """

    #    * Returns the value of the '<em><b>Modes</b></em>' containment reference list.
    #    * The list contents are of type {@link org.lflang.lf.Mode}.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @return the value of the '<em>Modes</em>' containment reference list.
    #    * @see org.lflang.lf.LfPackage#getReactor_Modes()
    #    * @model containment="true"
    #    * @generated
    #    
    @abstractmethod
    def getModes(self):
        """ generated source for method getModes """

#  Reactor
