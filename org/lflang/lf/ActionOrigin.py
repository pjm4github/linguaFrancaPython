#!/usr/bin/env python
""" generated source for module ActionOrigin """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.lf
# import java.util.Arrays
# import java.util.Collections
# import java.util.List
# import org.eclipse.emf.common.util.Enumerator
from enum import Enum

from include.overloading import overloaded


class Collections:
    pass


class ActionOrigin(Enum):
    """ generated source for enum ActionOrigin """
    #
    value = int()
    name = None
    literal = None

    NONE = 0, "NONE", "NONE"
    LOGICAL = 1, "LOGICAL", "logical"
    PHYSICAL = 2, "PHYSICAL", "physical"

    NONE_VALUE = 0

    LOGICAL_VALUE = 1

    PHYSICAL_VALUE = 2

    VALUES_ARRAY = (NONE, LOGICAL, PHYSICAL)

    VALUES = [VALUES_ARRAY]

    #    * Returns the '<em><b>Action Origin</b></em>' literal with the specified literal value.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @param literal the literal.
    #    * @return the matching enumerator or <code>null</code>.
    #    * @generated
    #    


    #    * Returns the '<em><b>Action Origin</b></em>' literal with the specified name.
    #    * <!-- begin-user-doc -->
    #    * <!-- end-user-doc -->
    #    * @param name the name.
    #    * @return the matching enumerator or <code>null</code>.
    #    * @generated
    #    
    @classmethod
    def getByName(cls, name):
        """ generated source for method getByName """
        i = 0
        while i < len(cls.VALUES_ARRAY):
            result = cls.VALUES_ARRAY[i]
            if result.__name__ == name:
                return result
            i += 1
        return None

    @classmethod
    @overloaded
    def get(cls, literal):
        """ generated source for method get """
        i = 0
        while i < len(cls.VALUES_ARRAY):
            result = cls.VALUES_ARRAY[i]
            if result.__str__() == literal:
                return result
            i += 1
        return None

    @classmethod
    @get.register(object, int)
    def get_0(cls, value):
        """ generated source for method get_0 """
        if value == cls.NONE_VALUE:
            return cls.NONE
        elif value == cls.LOGICAL_VALUE:
            return cls.LOGICAL
        elif value == cls.PHYSICAL_VALUE:
            return cls.PHYSICAL
        return None


    def __init__(self, value, name, literal):
        """ generated source for method __init__ """
        super().__init__()
        self.value = value
        self.name = name
        self.literal = literal

    def getValue(self):
        """ generated source for method getValue """
        return self.value

    def getName(self):
        """ generated source for method getName """
        return self.name

    def getLiteral(self):
        """ generated source for method getLiteral """
        return self.literal

    def __str__(self):
        """ generated source for method toString """
        return self.literal

if __name__ == "__main__":
    aa = ActionOrigin
    print(aa)