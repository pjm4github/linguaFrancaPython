#!/usr/bin/env python
""" generated source for module ActionOrigin """
# 
#  * generated by Xtext 2.28.0

from enum import Enum
from include.overloading import overloaded


class Collections:
    pass

NONE_VALUE = 0
LOGICAL_VALUE = 1
PHYSICAL_VALUE = 2

class ActionOrigin(Enum):
    """ generated source for enum ActionOrigin """

    NONE = 0, "NONE", "NONE"
    LOGICAL = 1, "LOGICAL", "logical"
    PHYSICAL = 2, "PHYSICAL", "physical"
    # VALUES_ARRAY = [NONE, LOGICAL, PHYSICAL]

    # def __new__(cls, *args, **kwds):
    #     value = len(cls.__members__) + 1
    #     obj = object.__new__(cls)
    #     obj._value_ = value
    #     return obj

    def __init__(self, value, name, literal):
        """ generated source for method __init__ """
        super().__init__()
        self._value = value
        self._name = name
        self._literal = literal

    @classmethod
    def getByName(cls, name):
        """
        Returns the '<em><b>Action Origin</b></em>' literal with the specified name.
        <!-- begin-user-doc -->
        <!-- end-user-doc -->
        :param name: the name.
        :return: the matching enumerator or <code>null</code>.
        """
        for r in [cls.NONE, cls.LOGICAL, cls.PHYSICAL]:
            if r._name == name:
                return r
        return None

    @classmethod
    @overloaded
    def get(cls, literal):
        """
        Returns the '<em><b>Action Origin</b></em>' literal with the specified literal value.
        <!-- begin-user-doc -->
        <!-- end-user-doc -->
        :param literal: the literal.
        :return: the matching enumerator or <code>null</code>.
        """
        for r in [cls.NONE, cls.LOGICAL, cls.PHYSICAL]:
            if r._literal == literal:
                return r
        return None

    @classmethod
    # @get.register(object, int)
    def get_0(cls, value):
        """ generated source for method get_0 """
        if value == NONE_VALUE:
            return cls.NONE
        elif value == LOGICAL_VALUE:
            return cls.LOGICAL
        elif value == PHYSICAL_VALUE:
            return cls.PHYSICAL
        return None

    def getValue(self):
        """ generated source for method getValue """
        return self._value

    def getName(self):
        """ generated source for method getName """
        return self._name

    def getLiteral(self):
        """ generated source for method getLiteral """
        return self._literal

    def __str__(self):
        """ generated source for method toString """
        return self._literal

    @property
    def name(self):
        return self._name

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, value):
        self._value = value

    @name.setter
    def name(self, name):
        self._name = name


if __name__ == "__main__":
    aa = ActionOrigin
    print(aa)