#!/usr/bin/env python
""" generated source for module AbstractLFRuntimeModule """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang
# import com.google.inject.Binder
# import com.google.inject.Provider
# import com.google.inject.name.Names
# import java.util.Properties
# import org.eclipse.xtext.Constants
# import org.eclipse.xtext.IGrammarAccess
# import org.eclipse.xtext.formatting2.FormatterPreferenceValuesProvider
# import org.eclipse.xtext.formatting2.FormatterPreferences
# import org.eclipse.xtext.formatting2.IFormatter2
# import org.eclipse.xtext.generator_.IGenerator2
# import org.eclipse.xtext.naming.DefaultDeclarativeQualifiedNameProvider
# import org.eclipse.xtext.naming.IQualifiedNameProvider
# import org.eclipse.xtext.parser.IParser
# import org.eclipse.xtext.parser.ITokenToStringConverter
# import org.eclipse.xtext.parser.antlr.AntlrTokenDefProvider
# import org.eclipse.xtext.parser.antlr.AntlrTokenToStringConverter
# import org.eclipse.xtext.parser.antlr.IAntlrTokenFileProvider
# import org.eclipse.xtext.parser.antlr.ITokenDefProvider
# import org.eclipse.xtext.parser.antlr.IUnorderedGroupHelper
# import org.eclipse.xtext.parser.antlr.Lexer
# import org.eclipse.xtext.parser.antlr.LexerBindings
# import org.eclipse.xtext.parser.antlr.LexerProvider
# import org.eclipse.xtext.parser.antlr.UnorderedGroupHelper
# import org.eclipse.xtext.preferences.IPreferenceValuesProvider
# import org.eclipse.xtext.resource.IContainer
# import org.eclipse.xtext.resource.IResourceDescriptions
# import org.eclipse.xtext.resource.containers.IAllContainersState
# import org.eclipse.xtext.resource.containers.ResourceSetBasedAllContainersStateProvider
# import org.eclipse.xtext.resource.containers.StateBasedContainerManager
# import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider
# import org.eclipse.xtext.resource.impl.ResourceSetBasedResourceDescriptions
# import org.eclipse.xtext.scoping.IGlobalScopeProvider
# import org.eclipse.xtext.scoping.IScopeProvider
# import org.eclipse.xtext.scoping.IgnoreCaseLinking
# import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
# import org.eclipse.xtext.scoping.impl.DefaultGlobalScopeProvider
# import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider
# import org.eclipse.xtext.serializer.ISerializer
# import org.eclipse.xtext.serializer.impl.Serializer
# import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer
# import org.eclipse.xtext.serializer.sequencer.ISyntacticSequencer
# import org.eclipse.xtext.service.DefaultRuntimeModule
# import org.eclipse.xtext.service.SingletonBinding
# import org.eclipse.xtext.validation.ConfigurableIssueCodesProvider

from org.lflang.formatting2 import LFFormatter

from org.lflang.generator import LFGenerator

from org.lflang.parser.antlr import LFAntlrTokenFileProvider
from org.lflang.parser.antlr import LFParser

from org.lflang.parser.antlr.internal import InternalLFLexer

from org.lflang.scoping import LFScopeProvider

from org.lflang.serializer import LFSemanticSequencer

from org.lflang.serializer import LFSyntacticSequencer

from org.lflang.services import LFGrammarAccess

from org.lflang.validation import LFConfigurableIssueCodesProvider

from org.lflang.validation import LFValidator

# 
#  * Manual modifications go to {@link LFRuntimeModule}.
#  
class DefaultRuntimeModule:
    pass


class AntlrTokenToStringConverter:
    pass


class IgnoreCaseLinking:
    pass


@SuppressWarnings("all")
class AbstractLFRuntimeModule(DefaultRuntimeModule):
    """ generated source for class AbstractLFRuntimeModule """
    properties = None

    def configure(self, binder):
        """ generated source for method configure """
        self.properties = tryBindProperties(binder, "org/lflang/LF.properties")
        super(AbstractLFRuntimeModule, self).configure(binder)

    def configureLanguageName(self, binder):
        """ generated source for method configureLanguageName """
        binder.bind(String.__class__).annotatedWith(Names.named(Constants.LANGUAGE_NAME)).toInstance("org.lflang.LF")

    def configureFileExtensions(self, binder):
        """ generated source for method configureFileExtensions """
        if self.properties == None or self.properties.getProperty(Constants.FILE_EXTENSIONS) == None:
            binder.bind(String.__class__).annotatedWith(Names.named(Constants.FILE_EXTENSIONS)).toInstance("lf")

    def bindClassLoaderToInstance(self):
        """ generated source for method bindClassLoaderToInstance """
        return getClass().getClassLoader()

    def bindIGrammarAccess(self):
        """ generated source for method bindIGrammarAccess """
        return LFGrammarAccess.__class__

    def bindISemanticSequencer(self):
        """ generated source for method bindISemanticSequencer """
        return LFSemanticSequencer.__class__

    def bindISyntacticSequencer(self):
        """ generated source for method bindISyntacticSequencer """
        return LFSyntacticSequencer.__class__

    def bindISerializer(self):
        """ generated source for method bindISerializer """
        return Serializer.__class__

    def bindIParser(self):
        """ generated source for method bindIParser """
        return LFParser.__class__

    def bindITokenToStringConverter(self):
        """ generated source for method bindITokenToStringConverter """
        return AntlrTokenToStringConverter.__class__

    def bindIAntlrTokenFileProvider(self):
        """ generated source for method bindIAntlrTokenFileProvider """
        return LFAntlrTokenFileProvider.__class__

    def bindLexer(self):
        """ generated source for method bindLexer """
        return InternalLFLexer.__class__

    def bindITokenDefProvider(self):
        """ generated source for method bindITokenDefProvider """
        return AntlrTokenDefProvider.__class__

    def provideInternalLFLexer(self):
        """ generated source for method provideInternalLFLexer """
        return LexerProvider.create(InternalLFLexer.__class__)

    def configureRuntimeLexer(self, binder):
        """ generated source for method configureRuntimeLexer """
        binder.bind(Lexer.__class__).annotatedWith(Names.named(LexerBindings.RUNTIME)).to(InternalLFLexer.__class__)

    def bindIUnorderedGroupHelper(self):
        """ generated source for method bindIUnorderedGroupHelper """
        return UnorderedGroupHelper.__class__

    @SingletonBinding(eager=True)
    def bindLFValidator(self):
        """ generated source for method bindLFValidator """
        return LFValidator.__class__

    def bindConfigurableIssueCodesProvider(self):
        """ generated source for method bindConfigurableIssueCodesProvider """
        return LFConfigurableIssueCodesProvider.__class__

    def bindIScopeProvider(self):
        """ generated source for method bindIScopeProvider """
        return LFScopeProvider.__class__

    def configureIScopeProviderDelegate(self, binder):
        """ generated source for method configureIScopeProviderDelegate """
        binder.bind(IScopeProvider.__class__).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(ImportedNamespaceAwareLocalScopeProvider.__class__)

    def bindIGlobalScopeProvider(self):
        """ generated source for method bindIGlobalScopeProvider """
        return DefaultGlobalScopeProvider.__class__

    def configureIgnoreCaseLinking(self, binder):
        """ generated source for method configureIgnoreCaseLinking """
        binder.bindConstant().annotatedWith(IgnoreCaseLinking.__class__).to(False)

    def bindIQualifiedNameProvider(self):
        """ generated source for method bindIQualifiedNameProvider """
        return DefaultDeclarativeQualifiedNameProvider.__class__

    def bindIContainer$Manager(self):
        """ generated source for method bindIContainer$Manager """
        return StateBasedContainerManager.__class__

    def bindIAllContainersState$Provider(self):
        """ generated source for method bindIAllContainersState$Provider """
        return ResourceSetBasedAllContainersStateProvider.__class__

    def configureIResourceDescriptions(self, binder):
        """ generated source for method configureIResourceDescriptions """
        binder.bind(IResourceDescriptions.__class__).to(ResourceSetBasedResourceDescriptions.__class__)

    def configureIResourceDescriptionsPersisted(self, binder):
        """ generated source for method configureIResourceDescriptionsPersisted """
        binder.bind(IResourceDescriptions.__class__).annotatedWith(Names.named(ResourceDescriptionsProvider.PERSISTED_DESCRIPTIONS)).to(ResourceSetBasedResourceDescriptions.__class__)

    def bindIGenerator2(self):
        """ generated source for method bindIGenerator2 """
        return LFGenerator.__class__

    def bindIFormatter2(self):
        """ generated source for method bindIFormatter2 """
        return LFFormatter.__class__

    def configureFormatterPreferences(self, binder):
        """ generated source for method configureFormatterPreferences """
        binder.bind(IPreferenceValuesProvider.__class__).annotatedWith(FormatterPreferences.__class__).to(FormatterPreferenceValuesProvider.__class__)
