#!/usr/bin/env python
""" generated source for module LFFormatter """
# 
#  * generated by Xtext 2.26.0
#  
# package: org.lflang.formatting2
# import java.util.List
# import org.eclipse.emf.ecore.EObject
# import org.eclipse.xtext.formatting2.FormatterRequest
# import org.eclipse.xtext.formatting2.IFormatter2
# import org.eclipse.xtext.formatting2.regionaccess.ITextReplacement
# import org.eclipse.xtext.formatting2.regionaccess.ITextSegment
# import org.eclipse.xtext.formatting2.regionaccess.internal.TextReplacement
# import org.eclipse.xtext.util.CancelIndicator
# import org.eclipse.xtext.validation.CheckMode
# import org.eclipse.xtext.validation.IResourceValidator
from include.MiscClasses import CheckMode, CancelIndicator
from org.lflang.LFast import FormattingUtils
# import com.google.inject.Inject

class IFormatter2:
    pass


class TextReplacement:
    pass


class LFFormatter(IFormatter2):
    """ generated source for class LFFormatter """
    validator = None

    def format(self, request):
        """ generated source for method format """
        #  TODO: Use a CancelIndicator that actually cancels?
        if not request.getTextRegionAccess().getResource().getErrors().isEmpty() or not self.validator.validate(request.getTextRegionAccess().getResource(), CheckMode.ALL, CancelIndicator.NullImpl).isEmpty():
            return list()
        documentRegion = request.getTextRegionAccess().regionForDocument()
        documentContents = request.getTextRegionAccess().getResource().getContents()
        if documentContents.isEmpty():
            return list()
        return list(TextReplacement(request.getTextRegionAccess(), documentRegion.getOffset(), documentRegion.getLength(), FormattingUtils.render(documentContents.get(0))))
