#!/usr/bin/env python
""" generated source for module LFGrammarAccess """
# 
#  * generated by Xtext 2.28.0
#  
# package: org.lflang.services
# import com.google.inject.Inject
# import com.google.inject.Singleton
# import java.util.List
# import org.eclipse.xtext.Action
# import org.eclipse.xtext.Alternatives
# import org.eclipse.xtext.Assignment
# import org.eclipse.xtext.CrossReference
# import org.eclipse.xtext.EnumLiteralDeclaration
# import org.eclipse.xtext.EnumRule
# import org.eclipse.xtext.Grammar
# import org.eclipse.xtext.GrammarUtil
# import org.eclipse.xtext.Group
# import org.eclipse.xtext.Keyword
# import org.eclipse.xtext.ParserRule
# import org.eclipse.xtext.RuleCall
# import org.eclipse.xtext.TerminalRule
# import org.eclipse.xtext.UnorderedGroup
# import org.eclipse.xtext.service.AbstractElementFinder
# import org.eclipse.xtext.service.GrammarProvider
from include.MiscClasses import AbstractElementFinder, AbstractGrammarElementFinder, AbstractParserRuleElementFinder, \
    GrammarUtil

class LFGrammarAccess(AbstractElementFinder, AbstractGrammarElementFinder):
    """ generated source for class LFGrammarAccess """

    def __init__(self, grammarProvider):
        """ generated source for method __init__ """
        super(LFGrammarAccess, self).__init__()
        self.grammar = self.internalFindGrammar(grammarProvider)
        self.pModel = self.ModelElements()
        self.pImport = self.ImportElements()
        self.pReactorDecl = self.ReactorDeclElements()
        self.pImportedReactor = self.ImportedReactorElements()
        self.pReactor = self.ReactorElements()
        self.pTypeParm = self.TypeParmElements()
        self.pTypeExpr = self.TypeExprElements()
        self.pTargetDecl = self.TargetDeclElements()
        self.pStateVar = self.StateVarElements()
        self.pMethod = self.MethodElements()
        self.pMethodArgument = self.MethodArgumentElements()
        self.pInput = self.InputElements()
        self.pOutput = self.OutputElements()
        self.pTimer = self.TimerElements()
        self.pBoolean = self.BooleanElements()
        self.pMode = self.ModeElements()
        self.pAction = self.ActionElements()
        self.pReaction = self.ReactionElements()
        self.pTriggerRef = self.TriggerRefElements()
        self.pBuiltinTriggerRef = self.BuiltinTriggerRefElements()
        self.pDeadline = self.DeadlineElements()
        self.pSTP = self.STPElements()
        self.pPreamble = self.PreambleElements()
        self.pInstantiation = self.InstantiationElements()
        self.pConnection = self.ConnectionElements()
        self.pSerializer = self.SerializerElements()
        self.pAttribute = self.AttributeElements()
        self.pAttrParm = self.AttrParmElements()
        self.pAttrParmValue = self.AttrParmValueElements()
        self.pKeyValuePairs = self.KeyValuePairsElements()
        self.pKeyValuePair = self.KeyValuePairElements()
        self.pArray = self.ArrayElements()
        self.pElement = self.ElementElements()
        self.pTypedVariable = self.TypedVariableElements()
        self.pVariable = self.VariableElements()
        self.pVarRef = self.VarRefElements()
        self.pVarRefOrModeTransition = self.VarRefOrModeTransitionElements()
        self.pAssignment = self.AssignmentElements()
        self.pParameter = self.ParameterElements()
        self.pExpression = self.ExpressionElements()
        self.pParameterReference = self.ParameterReferenceElements()
        self.pTime = self.TimeElements()
        self.pPort = self.PortElements()
        self.pType = self.TypeElements()
        self.pArraySpec = self.ArraySpecElements()
        self.pWidthSpec = self.WidthSpecElements()
        self.pWidthTerm = self.WidthTermElements()
        self.pIPV4Host = self.IPV4HostElements()
        self.pIPV6Host = self.IPV6HostElements()
        self.pNamedHost = self.NamedHostElements()
        self.pHost = self.HostElements()
        self.pHostName = self.HostNameElements()
        self.pDottedName = self.DottedNameElements()
        self.pSignedInt = self.SignedIntElements()
        self.pLiteral = self.LiteralElements()
        self.tWS = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.WS")
        self.tTRUE = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.TRUE")
        self.tFALSE = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.FALSE")
        self.tID = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.ID")
        self.tINT = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.INT")
        self.tNEGINT = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.NEGINT")
        self.tFLOAT_EXP_SUFFIX = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.FLOAT_EXP_SUFFIX")
        self.tSL_COMMENT = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.SL_COMMENT")
        self.tML_COMMENT = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.ML_COMMENT")
        self.tLT_ANNOT = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.LT_ANNOT")
        self.tSTRING = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.STRING")
        self.tCHAR_LIT = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.CHAR_LIT")
        self.tANY_OTHER = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.ANY_OTHER")
        self.pKebab = self.KebabElements()
        self.pIPV4Addr = self.IPV4AddrElements()
        self.pIPV6Seg = self.IPV6SegElements()
        self.pIPV6Addr = self.IPV6AddrElements()
        self.pSignedFloat = self.SignedFloatElements()
        self.pCode = self.CodeElements()
        self.pFSName = self.FSNameElements()
        self.pPath = self.PathElements()
        self.eActionOrigin = self.ActionOriginElements()
        self.eVisibility = self.VisibilityElements()
        self.eBuiltinTrigger = self.BuiltinTriggerElements()
        self.eModeTransition = self.ModeTransitionElements()
        self.pTimeUnit = self.TimeUnitElements()
        self.pBody = self.BodyElements()
        self.pToken = self.TokenElements()

    def internalFindGrammar(self, grammarProvider):
        """ generated source for method internalFindGrammar """
        grammar = grammarProvider.getGrammar(self)
        while grammar != None:
            if "org.lflang.LF" == grammar.__name__:
                return grammar
            grammars = grammar.getUsedGrammars()
            if not grammars.isEmpty():
                grammar = grammars.iterator().next()
            else:
                return None
        return grammar

    def getGrammar(self):
        """ generated source for method getGrammar """
        return self.grammar

    # /////////// Overall file
    # /**
    #  * Top-level AST node.
    #
    # Model:
    #     target=TargetDecl
    #     (imports+=Import)*
    #     (preambles+=Preamble)*
    #     (reactors+=Reactor)+
    #     ;
    def getModelAccess(self):
        """ generated source for method getModelAccess """
        return self.pModel

    def getModelRule(self):
        """ generated source for method getModelRule """
        return self.getModelAccess().getRule()

    # /////////// Top level elements
    # /**
    #  * Import declaration.
    #
    # Import: 'import' reactorClasses+=ImportedReactor (',' reactorClasses+=ImportedReactor)* 'from' importURI=STRING ';'?;
    def getImportAccess(self):
        """ generated source for method getImportAccess """
        return self.pImport

    def getImportRule(self):
        """ generated source for method getImportRule """
        return self.getImportAccess().getRule()

    # ReactorDecl: Reactor | ImportedReactor;
    def getReactorDeclAccess(self):
        """ generated source for method getReactorDeclAccess """
        return self.pReactorDecl

    def getReactorDeclRule(self):
        """ generated source for method getReactorDeclRule """
        return self.getReactorDeclAccess().getRule()

    # ImportedReactor: reactorClass=[Reactor] ('as' name=ID)?;
    def getImportedReactorAccess(self):
        """ generated source for method getImportedReactorAccess """
        return self.pImportedReactor

    def getImportedReactorRule(self):
        """ generated source for method getImportedReactorRule """
        return self.getImportedReactorAccess().getRule()

    # /**
    #  * Declaration of a reactor class.
    #
    # Reactor:
    #     {Reactor} (attributes+=Attribute)* ((federated?='federated' | main?='main')? & realtime?='realtime'?) 'reactor' (name=ID)?
    #     ('<' typeParms+=TypeParm (',' typeParms+=TypeParm)* '>')?
    #     ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
    #     ('at' host=Host)?
    #     ('extends' (superClasses+=[ReactorDecl] (',' superClasses+=[ReactorDecl])*))?
    #     '{'
    #     (     (preambles+=Preamble)
    #         | (stateVars+=StateVar)
    #         | (methods+=Method)
    #         | (inputs+=Input)
    #         | (outputs+=Output)
    #         | (timers+=Timer)
    #         | (actions+=Action)
    #         | (instantiations+=Instantiation)
    #         | (connections+=Connection)
    #         | (reactions+=Reaction)
    #         | (modes+=Mode)
    #     )* '}';
    def getReactorAccess(self):
        """ generated source for method getReactorAccess """
        return self.pReactor

    def getReactorRule(self):
        """ generated source for method getReactorRule """
        return self.getReactorAccess().getRule()

    # TypeParm:
    #     literal=TypeExpr | code=Code
    # ;
    def getTypeParmAccess(self):
        """ generated source for method getTypeParmAccess """
        return self.pTypeParm

    def getTypeParmRule(self):
        """ generated source for method getTypeParmRule """
        return self.getTypeParmAccess().getRule()

    # // Allows simple statements like "A extends B". We probably want to further expand this.
    # TypeExpr:
    #     ID+
    # ;
    def getTypeExprAccess(self):
        """ generated source for method getTypeExprAccess """
        return self.pTypeExpr

    def getTypeExprRule(self):
        """ generated source for method getTypeExprRule """
        return self.getTypeExprAccess().getRule()

    # /**
    #  * Specification of the target language. Target properties can be specified in
    #  * YAML format to pass on configuration details to the runtime environment.
    #
    # TargetDecl:
    #     'target' name=ID (config=KeyValuePairs)? ';'?;
    def getTargetDeclAccess(self):
        """ generated source for method getTargetDeclAccess """
        return self.pTargetDecl

    def getTargetDeclRule(self):
        """ generated source for method getTargetDeclRule """
        return self.getTargetDeclAccess().getRule()

    # /////////// Statements
    # /**
    #  * Declaration of a state variable. Types are optional, but may be required
    #  * during validation (depending on the target language). Initialization is also
    #  * optional. A state variable can be initialized by assigning a `Expression` or list
    #  * of these. Note that a `Expression` may also be a reference to a parameter.
    #  * The following checks must be carried out during validation:
    #  *  - if the list of initialization expressions has more than one element in it, a
    #  *  type must be specified;
    #  *  - if the `time` type is specified, there can only be a single initialization
    #  *  element, which has to denote a time or a reference to a parameter that
    #  *  denotes a time; and
    #  *  - if the `time` type is specified, either a proper time interval and unit
    #  *  must be given, or a literal or code that denotes zero.
    #
    #  StateVar:
    #     (attributes+=Attribute)*
    #     (reset?='reset')? 'state' name=ID (
    #         (':' (type=Type))?
    #         ((parens+='(' (init+=Expression (','  init+=Expression)*)? parens+=')')
    #             | (braces+='{' (init+=Expression (','  init+=Expression)*)? braces+='}')
    #         )?
    #     ) ';'?
    # ;
    def getStateVarAccess(self):
        """ generated source for method getStateVarAccess """
        return self.pStateVar

    def getStateVarRule(self):
        """ generated source for method getStateVarRule """
        return self.getStateVarAccess().getRule()

    # Method:
    #     const?='const'? 'method' name=ID
    #     '(' (arguments+=MethodArgument (',' arguments+=MethodArgument)*)? ')'
    #     (':' return=Type)?
    #     code=Code
    #     ';'?
    # ;
    def getMethodAccess(self):
        """ generated source for method getMethodAccess """
        return self.pMethod

    def getMethodRule(self):
        """ generated source for method getMethodRule """
        return self.getMethodAccess().getRule()

    # MethodArgument:
    #     name=ID (':' type=Type)?
    # ;
    def getMethodArgumentAccess(self):
        """ generated source for method getMethodArgumentAccess """
        return self.pMethodArgument

    def getMethodArgumentRule(self):
        """ generated source for method getMethodArgumentRule """
        return self.getMethodArgumentAccess().getRule()

    # Input:
    #     (attributes+=Attribute)* mutable?='mutable'? 'input' (widthSpec=WidthSpec)? name=ID (':' type=Type)? ';'?;
    def getInputAccess(self):
        """ generated source for method getInputAccess """
        return self.pInput

    def getInputRule(self):
        """ generated source for method getInputRule """
        return self.getInputAccess().getRule()

    # Output:
    #     (attributes+=Attribute)* 'output' (widthSpec=WidthSpec)? name=ID (':' type=Type)? ';'?;
    def getOutputAccess(self):
        """ generated source for method getOutputAccess """
        return self.pOutput

    def getOutputRule(self):
        """ generated source for method getOutputRule """
        return self.getOutputAccess().getRule()

    # // Timing specification for a timer: (offset, period)
    # // Can be empty, which means (0,0) = (NOW, ONCE).
    # // E.g. (0) or (NOW) or (NOW, ONCE) or (100, 1000)
    # // The latter means fire with period 1000, offset 100.
    # Timer:
    #    (attributes+=Attribute)* 'timer' name=ID ('(' offset=Expression (',' period=Expression)? ')')? ';'?;
    def getTimerAccess(self):
        """ generated source for method getTimerAccess """
        return self.pTimer

    def getTimerRule(self):
        """ generated source for method getTimerRule """
        return self.getTimerAccess().getRule()

    # Boolean:
    #     TRUE | FALSE
    # ;
    def getBooleanAccess(self):
        """ generated source for method getBooleanAccess """
        return self.pBoolean

    def getBooleanRule(self):
        """ generated source for method getBooleanRule """
        return self.getBooleanAccess().getRule()

    # Mode:
    #     {Mode} (initial?='initial')? 'mode' (name=ID)?
    #     '{' (
    #         (stateVars+=StateVar) |
    #         (timers+=Timer) |
    #         (actions+=Action) |
    #         (instantiations+=Instantiation) |
    #         (connections+=Connection) |
    #         (reactions+=Reaction)
    #     )* '}';
    def getModeAccess(self):
        """ generated source for method getModeAccess """
        return self.pMode

    def getModeRule(self):
        """ generated source for method getModeRule """
        return self.getModeAccess().getRule()

    # // Action that has either a physical or logical origin.
    # //
    # // If the origin is logical, the minDelay is a minimum logical delay
    # // after the logical time at which schedule() is called that the
    # // action will occur. If the origin is physical, then the
    # // minDelay is a minimum logical delay after the physical time
    # // at which schedule() is called that the action will occur.
    # //
    # // For all actions, minSpacing is the minimum difference between
    # // the tags of two subsequently scheduled events.
    # Action:
    #     (attributes+=Attribute)*
    #     (origin=ActionOrigin)? 'action' name=ID
    #     ('(' minDelay=Expression (',' minSpacing=Expression (',' policy=STRING)? )? ')')?
    #     (':' type=Type)? ';'?;
    def getActionAccess(self):
        """ generated source for method getActionAccess """
        return self.pAction

    def getActionRule(self):
        """ generated source for method getActionRule """
        return self.getActionAccess().getRule()

    # Reaction:
    #     (attributes+=Attribute)*
    #     (('reaction') | mutation ?= 'mutation')
    #     ('(' (triggers+=TriggerRef (',' triggers+=TriggerRef)*)? ')')?
    #     (sources+=VarRef (',' sources+=VarRef)*)?
    #     ('->' effects+=VarRefOrModeTransition (',' effects+=VarRefOrModeTransition)*)?
    #     code=Code
    #     (stp=STP)?
    #     (deadline=Deadline)?;
    def getReactionAccess(self):
        """ generated source for method getReactionAccess """
        return self.pReaction

    def getReactionRule(self):
        """ generated source for method getReactionRule """
        return self.getReactionAccess().getRule()

    # TriggerRef:
    #     BuiltinTriggerRef | VarRef;
    def getTriggerRefAccess(self):
        """ generated source for method getTriggerRefAccess """
        return self.pTriggerRef

    def getTriggerRefRule(self):
        """ generated source for method getTriggerRefRule """
        return self.getTriggerRefAccess().getRule()

    # BuiltinTriggerRef:
    #     type = BuiltinTrigger;
    def getBuiltinTriggerRefAccess(self):
        """ generated source for method getBuiltinTriggerRefAccess """
        return self.pBuiltinTriggerRef

    def getBuiltinTriggerRefRule(self):
        """ generated source for method getBuiltinTriggerRefRule """
        return self.getBuiltinTriggerRefAccess().getRule()

    # Deadline:
    #     'deadline' '(' delay=Expression ')' code=Code;
    def getDeadlineAccess(self):
        """ generated source for method getDeadlineAccess """
        return self.pDeadline

    def getDeadlineRule(self):
        """ generated source for method getDeadlineRule """
        return self.getDeadlineAccess().getRule()

    # STP:
    #     'STP' '(' value=Expression ')' code=Code;
    def getSTPAccess(self):
        """ generated source for method getSTPAccess """
        return self.pSTP

    def getSTPRule(self):
        """ generated source for method getSTPRule """
        return self.getSTPAccess().getRule()

    # Preamble:
    #     (visibility=Visibility)? 'preamble' code=Code;
    def getPreambleAccess(self):
        """ generated source for method getPreambleAccess """
        return self.pPreamble

    def getPreambleRule(self):
        """ generated source for method getPreambleRule """
        return self.getPreambleAccess().getRule()

    # Instantiation:
    #     name=ID '=' 'new' (widthSpec=WidthSpec)?
    #     reactorClass=[ReactorDecl] ('<' typeParms+=TypeParm (',' typeParms+=TypeParm)* '>')? '('
    #     (parameters+=Assignment (',' parameters+=Assignment)*)?
    #     ')' (('at' host=Host ';') | ';'?);
    def getInstantiationAccess(self):
        """ generated source for method getInstantiationAccess """
        return self.pInstantiation

    def getInstantiationRule(self):
        """ generated source for method getInstantiationRule """
        return self.getInstantiationAccess().getRule()

    # Connection:
    #     ((leftPorts += VarRef (',' leftPorts += VarRef)*)
    #     | ( '(' leftPorts += VarRef (',' leftPorts += VarRef)* ')' iterated ?= '+'?))
    #     ('->' | physical?='~>')
    #     rightPorts += VarRef (',' rightPorts += VarRef)*
    #     ('after' delay=Expression)?
    #     (serializer=Serializer)?
    #     ';'?
    # ;
    def getConnectionAccess(self):
        """ generated source for method getConnectionAccess """
        return self.pConnection

    def getConnectionRule(self):
        """ generated source for method getConnectionRule """
        return self.getConnectionAccess().getRule()

    # // Chooses the serializer to use for the connection
    # Serializer:
    #     'serializer' type=STRING
    # ;
    def getSerializerAccess(self):
        """ generated source for method getSerializerAccess """
        return self.pSerializer

    def getSerializerRule(self):
        """ generated source for method getSerializerRule """
        return self.getSerializerAccess().getRule()

    # /////////// Attributes
    # Attribute:
    #     '@' attrName=ID ('(' (attrParms+=AttrParm (',' attrParms+=AttrParm)* ','?)? ')')?
    # ;
    def getAttributeAccess(self):
        """ generated source for method getAttributeAccess """
        return self.pAttribute

    def getAttributeRule(self):
        """ generated source for method getAttributeRule """
        return self.getAttributeAccess().getRule()

    # AttrParm:
    #     (name=ID '=')? value=AttrParmValue;
    def getAttrParmAccess(self):
        """ generated source for method getAttrParmAccess """
        return self.pAttrParm

    def getAttrParmRule(self):
        """ generated source for method getAttrParmRule """
        return self.getAttrParmAccess().getRule()

    # AttrParmValue:
    #     str=STRING
    #     | int=SignedInt
    #     | bool=Boolean
    #     | float=SignedFloat
    # ;
    def getAttrParmValueAccess(self):
        """ generated source for method getAttrParmValueAccess """
        return self.pAttrParmValue

    def getAttrParmValueRule(self):
        """ generated source for method getAttrParmValueRule """
        return self.getAttrParmValueAccess().getRule()

    # /////////// For target parameters
    # KeyValuePairs:
    #     {KeyValuePairs} '{' (pairs+=KeyValuePair (',' (pairs+=KeyValuePair))* ','?)? '}';
    def getKeyValuePairsAccess(self):
        """ generated source for method getKeyValuePairsAccess """
        return self.pKeyValuePairs

    def getKeyValuePairsRule(self):
        """ generated source for method getKeyValuePairsRule """
        return self.getKeyValuePairsAccess().getRule()

    # KeyValuePair:
    #     name=Kebab ':' value=Element;
    def getKeyValuePairAccess(self):
        """ generated source for method getKeyValuePairAccess """
        return self.pKeyValuePair

    def getKeyValuePairRule(self):
        """ generated source for method getKeyValuePairRule """
        return self.getKeyValuePairAccess().getRule()

    # Array: // todo allow empty array in grammar, replace with validator error
    #     '[' elements+=Element (',' (elements+=Element))* ','? ']';
    def getArrayAccess(self):
        """ generated source for method getArrayAccess """
        return self.pArray

    def getArrayRule(self):
        """ generated source for method getArrayRule """
        return self.getArrayAccess().getRule()

    # Element:
    #     keyvalue=KeyValuePairs
    #     | array=Array
    #     | literal=Literal
    #     | (time=INT unit=TimeUnit)
    #     | id=Path;
    def getElementAccess(self):
        """ generated source for method getElementAccess """
        return self.pElement

    def getElementRule(self):
        """ generated source for method getElementRule """
        return self.getElementAccess().getRule()

    # ///////// Pieces
    # TypedVariable:
    #     Port | Action
    # ;
    def getTypedVariableAccess(self):
        """ generated source for method getTypedVariableAccess """
        return self.pTypedVariable

    def getTypedVariableRule(self):
        """ generated source for method getTypedVariableRule """
        return self.getTypedVariableAccess().getRule()

    # Variable:
    #     TypedVariable | Timer | Mode;
    def getVariableAccess(self):
        """ generated source for method getVariableAccess """
        return self.pVariable

    def getVariableRule(self):
        """ generated source for method getVariableRule """
        return self.getVariableAccess().getRule()

    # VarRef:
    #     variable=[Variable] | container=[Instantiation] '.' variable=[Variable]
    #     | interleaved?='interleaved' '(' (variable=[Variable] | container=[Instantiation] '.' variable=[Variable]) ')'
    # ;
    def getVarRefAccess(self):
        """ generated source for method getVarRefAccess """
        return self.pVarRef

    def getVarRefRule(self):
        """ generated source for method getVarRefRule """
        return self.getVarRefAccess().getRule()

    # VarRefOrModeTransition returns VarRef:
    #     VarRef | transition=ModeTransition '(' variable=[Mode] ')';
    def getVarRefOrModeTransitionAccess(self):
        """ generated source for method getVarRefOrModeTransitionAccess """
        return self.pVarRefOrModeTransition

    def getVarRefOrModeTransitionRule(self):
        """ generated source for method getVarRefOrModeTransitionRule """
        return self.getVarRefOrModeTransitionAccess().getRule()

    # Assignment:
    #     (lhs=[Parameter] (
    #         (equals='=' rhs+=Expression)
    #         | ((equals='=')? (
    #             parens+='(' (rhs+=Expression (',' rhs+=Expression)*)? parens+=')'
    #             | braces+='{' (rhs+=Expression (',' rhs+=Expression)*)? braces+='}'))
    #     ));
    def getAssignmentAccess(self):
        """ generated source for method getAssignmentAccess """
        return self.pAssignment

    def getAssignmentRule(self):
        """ generated source for method getAssignmentRule """
        return self.getAssignmentAccess().getRule()

    # /**
    #  * Parameter declaration with optional type and mandatory initialization.
    #
    # Parameter:
    #     (attributes+=Attribute)*
    #     name=ID (':' (type=Type))?
    #     ((parens+='(' (init+=Expression (','  init+=Expression)*)? parens+=')')
    #         | (braces+='{' (init+=Expression (','  init+=Expression)*)? braces+='}')
    #     )?
    # ;
    def getParameterAccess(self):
        """ generated source for method getParameterAccess """
        return self.pParameter

    def getParameterRule(self):
        """ generated source for method getParameterRule """
        return self.getParameterAccess().getRule()

    # Expression:
    #     {Literal} literal = Literal
    #     | Time
    #     | ParameterReference
    #     | Code
    # ;
    def getExpressionAccess(self):
        """ generated source for method getExpressionAccess """
        return self.pExpression

    def getExpressionRule(self):
        """ generated source for method getExpressionRule """
        return self.getExpressionAccess().getRule()

    # ParameterReference:
    #     parameter=[Parameter]
    # ;
    def getParameterReferenceAccess(self):
        """ generated source for method getParameterReferenceAccess """
        return self.pParameterReference

    def getParameterReferenceRule(self):
        """ generated source for method getParameterReferenceRule """
        return self.getParameterReferenceAccess().getRule()

    # Time:
    #     (interval=INT unit=TimeUnit)
    # ;
    def getTimeAccess(self):
        """ generated source for method getTimeAccess """
        return self.pTime

    def getTimeRule(self):
        """ generated source for method getTimeRule """
        return self.getTimeAccess().getRule()

    # Port:
    #     Input | Output;
    def getPortAccess(self):
        """ generated source for method getPortAccess """
        return self.pPort

    def getPortRule(self):
        """ generated source for method getPortRule """
        return self.getPortAccess().getRule()

    # // A type is in the target language, hence either an ID or target code.
    # Type:
    #    time?='time' (arraySpec=ArraySpec)?
    #    | id=DottedName ('<' typeParms+=Type (',' typeParms+=Type)* '>')? (stars+='*')* (arraySpec=ArraySpec)?
    #    | code=Code
    # ;
    def getTypeAccess(self):
        """ generated source for method getTypeAccess """
        return self.pType

    def getTypeRule(self):
        """ generated source for method getTypeRule """
        return self.getTypeAccess().getRule()

    # ArraySpec:
    #     '[' ( ofVariableLength?=']' | length=INT ']' );
    def getArraySpecAccess(self):
        """ generated source for method getArraySpecAccess """
        return self.pArraySpec

    def getArraySpecRule(self):
        """ generated source for method getArraySpecRule """
        return self.getArraySpecAccess().getRule()

    # WidthSpec:
    #     '[' ( ofVariableLength?=']' | (terms+=WidthTerm) ('+' terms+=WidthTerm)* ']' );
    def getWidthSpecAccess(self):
        """ generated source for method getWidthSpecAccess """
        return self.pWidthSpec

    def getWidthSpecRule(self):
        """ generated source for method getWidthSpecRule """
        return self.getWidthSpecAccess().getRule()

    # WidthTerm:
    #     width=INT
    #     | parameter=[Parameter]
    #     | 'widthof(' port=VarRef ')'
    #     | code=Code;
    def getWidthTermAccess(self):
        """ generated source for method getWidthTermAccess """
        return self.pWidthTerm

    def getWidthTermRule(self):
        """ generated source for method getWidthTermRule """
        return self.getWidthTermAccess().getRule()

    # IPV4Host:
    #     (user=Kebab '@')? addr=IPV4Addr (':' port=INT)?
    # ;
    def getIPV4HostAccess(self):
        """ generated source for method getIPV4HostAccess """
        return self.pIPV4Host

    def getIPV4HostRule(self):
        """ generated source for method getIPV4HostRule """
        return self.getIPV4HostAccess().getRule()

    # IPV6Host:
    #     ('[' (user=Kebab '@')? addr=IPV6Addr ']' (':' port=INT)?)
    # ;
    def getIPV6HostAccess(self):
        """ generated source for method getIPV6HostAccess """
        return self.pIPV6Host

    def getIPV6HostRule(self):
        """ generated source for method getIPV6HostRule """
        return self.getIPV6HostAccess().getRule()

    # NamedHost:
    #     (user=Kebab '@')? addr=HostName (':' port=INT)?
    # ;
    def getNamedHostAccess(self):
        """ generated source for method getNamedHostAccess """
        return self.pNamedHost

    def getNamedHostRule(self):
        """ generated source for method getNamedHostRule """
        return self.getNamedHostAccess().getRule()

    # Host:
    #     IPV4Host | IPV6Host | NamedHost
    # ;
    def getHostAccess(self):
        """ generated source for method getHostAccess """
        return self.pHost

    def getHostRule(self):
        """ generated source for method getHostRule """
        return self.getHostAccess().getRule()

    # HostName:
    #     (Kebab (('.') Kebab)*)
    # ;
    def getHostNameAccess(self):
        """ generated source for method getHostNameAccess """
        return self.pHostName

    def getHostNameRule(self):
        """ generated source for method getHostNameRule """
        return self.getHostNameAccess().getRule()

    # DottedName:
    #     (ID (('.'|'::') ID)*)
    # ;
    def getDottedNameAccess(self):
        """ generated source for method getDottedNameAccess """
        return self.pDottedName

    def getDottedNameRule(self):
        """ generated source for method getDottedNameRule """
        return self.getDottedNameAccess().getRule()

    # SignedInt:
    #     INT | NEGINT
    # ;
    def getSignedIntAccess(self):
        """ generated source for method getSignedIntAccess """
        return self.pSignedInt

    def getSignedIntRule(self):
        """ generated source for method getSignedIntRule """
        return self.getSignedIntAccess().getRule()

    # Literal:
    #     STRING | CHAR_LIT | SignedFloat | SignedInt | Boolean;
    def getLiteralAccess(self):
        """ generated source for method getLiteralAccess """
        return self.pLiteral

    def getLiteralRule(self):
        """ generated source for method getLiteralRule """
        return self.getLiteralAccess().getRule()

    # /////////// Elementary components
    # /////////// Lexical grammar
    # //// Terminals must be mutually exclusive. They are used by the lexer before parsing.
    # //// Note that the rest of the grammar implicitly defines
    # //// keywords for every string literal, eg 'reaction'.
    # terminal WS: (' '|'\t'|'\r'|'\n')+;
    def getWSRule(self):
        """ generated source for method getWSRule """
        return self.tWS

    # terminal TRUE:  'true' | 'True';
    def getTRUERule(self):
        """ generated source for method getTRUERule """
        return self.tTRUE

    # terminal FALSE: 'false' | 'False';
    def getFALSERule(self):
        """ generated source for method getFALSERule """
        return self.tFALSE

    # terminal ID: ('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
    def getIDRule(self):
        """ generated source for method getIDRule """
        return self.tID

    # terminal INT returns ecore::EInt:     ('0'..'9')+;
    def getINTRule(self):
        """ generated source for method getINTRule """
        return self.tINT

    # terminal NEGINT:                  '-' ('0'..'9')+;
    def getNEGINTRule(self):
        """ generated source for method getNEGINTRule """
        return self.tNEGINT

    # terminal FLOAT_EXP_SUFFIX: INT ('e' | 'E') ('+' | '-')? INT;
    def getFLOAT_EXP_SUFFIXRule(self):
        """ generated source for method getFLOAT_EXP_SUFFIXRule """
        return self.tFLOAT_EXP_SUFFIX

    # terminal SL_COMMENT: ('//' | '#') !('\n'|'\r')* ('\r'? '\n')?;
    def getSL_COMMENTRule(self):
        """ generated source for method getSL_COMMENTRule """
        return self.tSL_COMMENT

    # terminal ML_COMMENT: ('/*' -> '*/') | ("'''" -> "'''");
    def getML_COMMENTRule(self):
        """ generated source for method getML_COMMENTRule """
        return self.tML_COMMENT

    # terminal LT_ANNOT: "'" ID?;
    def getLT_ANNOTRule(self):
        """ generated source for method getLT_ANNOTRule """
        return self.tLT_ANNOT

    # terminal STRING:   '"' ( '\\' . | !('\\' | '"' | '\t' | '\r' | '\n') )* '"'
    #                  | '"""' -> '"""'
    #                  ;
    def getSTRINGRule(self):
        """ generated source for method getSTRINGRule """
        return self.tSTRING

    # terminal CHAR_LIT: "'" ( '\\' . | !('\\' | "'" | '\t' | '\r' | '\n') )  "'";
    def getCHAR_LITRule(self):
        """ generated source for method getCHAR_LITRule """
        return self.tCHAR_LIT

    # terminal ANY_OTHER: .;
    def getANY_OTHERRule(self):
        """ generated source for method getANY_OTHERRule """
        return self.tANY_OTHER

    # Kebab: (ID|"physical")('-'ID)*;
    def getKebabAccess(self):
        """ generated source for method getKebabAccess """
        return self.pKebab

    def getKebabRule(self):
        """ generated source for method getKebabRule """
        return self.getKebabAccess().getRule()

    # IPV4Addr:
    #     INT '.' INT '.' INT '.' INT
    # ;
    def getIPV4AddrAccess(self):
        """ generated source for method getIPV4AddrAccess """
        return self.pIPV4Addr

    def getIPV4AddrRule(self):
        """ generated source for method getIPV4AddrRule """
        return self.getIPV4AddrAccess().getRule()

    # IPV6Seg:
    #     // NOTE: This rule is too permissive by design.
    #     // Further checking is done during validation.
    #     (INT | (INT? ID))
    # ;
    def getIPV6SegAccess(self):
        """ generated source for method getIPV6SegAccess """
        return self.pIPV6Seg

    def getIPV6SegRule(self):
        """ generated source for method getIPV6SegRule """
        return self.getIPV6SegAccess().getRule()

    # IPV6Addr:
    #     // NOTE: This rule is too permissive by design.
    #     // Further checking is done during validation.
    #     // IPV6 with truncation.
    #     '::' | ('::' (IPV6Seg (':'))* IPV6Seg) | ((IPV6Seg (':'|'::'))+ IPV6Seg?) |
    #     // (Link-local IPv6 addresses with zone index) "fe80::7:8%1"
    #     (ID '::' IPV6Seg (':' IPV6Seg)* '%' (INT | ID)+) |
    #     // IPv4-mapped IPv6 addresses and IPv4-translated addresses
    #     ('::' IPV4Addr) | ('::' ID ':' (INT ':')? IPV4Addr) |
    #     // IPv4-Embedded IPv6 Address
    #     (((IPV6Seg (':' IPV6Seg)* '::') | (IPV6Seg (':' IPV6Seg)*) ':') IPV4Addr)
    # ;
    def getIPV6AddrAccess(self):
        """ generated source for method getIPV6AddrAccess """
        return self.pIPV6Addr

    def getIPV6AddrRule(self):
        """ generated source for method getIPV6AddrRule """
        return self.getIPV6AddrAccess().getRule()

    # SignedFloat:
    #     (SignedInt | '-')? '.' (INT | FLOAT_EXP_SUFFIX);
    def getSignedFloatAccess(self):
        """ generated source for method getSignedFloatAccess """
        return self.pSignedFloat

    def getSignedFloatRule(self):
        """ generated source for method getSignedFloatRule """
        return self.getSignedFloatAccess().getRule()

    # // FIXME: What if the code needs to contain '=}'?
    # // Just escaping with \ is not a good idea because then every \ has to be escaped \\.
    # // Perhaps the string EQUALS_BRACE could become '=}'?
    # Code:
    #     //{Code} '{=' (tokens+=Token)* '=}'
    #     {Code} '{=' body=Body '=}'
    # ;
    def getCodeAccess(self):
        """ generated source for method getCodeAccess """
        return self.pCode

    def getCodeRule(self):
        """ generated source for method getCodeRule """
        return self.getCodeAccess().getRule()

    # FSName:
    #     (ID | '.' | '_')+
    # ;
    def getFSNameAccess(self):
        """ generated source for method getFSNameAccess """
        return self.pFSName

    def getFSNameRule(self):
        """ generated source for method getFSNameRule """
        return self.getFSNameAccess().getRule()

    # // Absolute or relative directory path in Windows, Linux, or MacOS.
    # Path:
    #     (FSName ':\\')? ('\\' | '/')? FSName (('\\' | '/') FSName)*
    # ;
    def getPathAccess(self):
        """ generated source for method getPathAccess """
        return self.pPath

    def getPathRule(self):
        """ generated source for method getPathRule """
        return self.getPathAccess().getRule()

    # /////////// Enums
    # enum ActionOrigin:
    #     NONE | LOGICAL='logical' | PHYSICAL='physical';
    def getActionOriginAccess(self):
        """ generated source for method getActionOriginAccess """
        return self.eActionOrigin

    def getActionOriginRule(self):
        """ generated source for method getActionOriginRule """
        return self.getActionOriginAccess().getRule()

    # enum Visibility:
    #     NONE | PRIVATE='private' | PUBLIC='public';
    def getVisibilityAccess(self):
        """ generated source for method getVisibilityAccess """
        return self.eVisibility

    def getVisibilityRule(self):
        """ generated source for method getVisibilityRule """
        return self.getVisibilityAccess().getRule()

    # enum BuiltinTrigger:
    #     STARTUP='startup' | SHUTDOWN='shutdown' | RESET='reset';
    def getBuiltinTriggerAccess(self):
        """ generated source for method getBuiltinTriggerAccess """
        return self.eBuiltinTrigger

    def getBuiltinTriggerRule(self):
        """ generated source for method getBuiltinTriggerRule """
        return self.getBuiltinTriggerAccess().getRule()

    # enum ModeTransition:
    #     RESET='reset' | HISTORY='history';
    def getModeTransitionAccess(self):
        """ generated source for method getModeTransitionAccess """
        return self.eModeTransition

    def getModeTransitionRule(self):
        """ generated source for method getModeTransitionRule """
        return self.getModeTransitionAccess().getRule()

    # // Note: time units are not keywords, otherwise it would reserve
    # // a lot of useful identifiers (like 's' or 'd').
    # // The validator ensures the unit is valid.
    # TimeUnit: ID;
    def getTimeUnitAccess(self):
        """ generated source for method getTimeUnitAccess """
        return self.pTimeUnit

    def getTimeUnitRule(self):
        """ generated source for method getTimeUnitRule """
        return self.getTimeUnitAccess().getRule()

    # // An arbitrary sequence of terminals.
    # Body:
    #     Token*
    # ;
    def getBodyAccess(self):
        """ generated source for method getBodyAccess """
        return self.pBody

    def getBodyRule(self):
        """ generated source for method getBodyRule """
        return self.getBodyAccess().getRule()

    # // Production for the tokenization of target code. All terminals used in any
    # // of the productions in the grammar (except for `{=` and `=}`) have to be
    # // listed here. Whenever a terminal is encountered amid a sequence of target-
    # // language tokens that is not featured in this production, this will demarcate
    # // the end of a target-code segment.
    # Token:
    #     // Non-constant terminals
    #     ID | INT | FLOAT_EXP_SUFFIX | LT_ANNOT | STRING | CHAR_LIT | ML_COMMENT | SL_COMMENT | WS | ANY_OTHER |
    #     // Keywords
    #     'target' | 'import' | 'main' | 'realtime' | 'reactor' | 'state' | 'time' |
    #     'mutable' | 'input' | 'output' | 'timer' | 'action' | 'reaction' |
    #     'startup' | 'shutdown' | 'after' | 'deadline' | 'mutation' | 'preamble' |
    #     'new' | 'federated' | 'at' | 'as' | 'from' | 'widthof' | 'const' | 'method' |
    #     'interleaved' | 'mode' | 'initial' | 'reset' | 'history' |
    #     // Other terminals
    #     NEGINT | TRUE | FALSE |
    #     // Action origins
    #     'logical' | 'physical' |
    #     // Visibility modifiers
    #     'private' | 'public' |
    #     // Braces
    #     '(' | ')' | '{' | '}' |
    #     // Brackets
    #     '[' | ']' | '<' | '>' |
    #     // Punctuation
    #     ':' | ';' | ',' | '.' | '::' |
    #     // Slashes
    #     ':\\' | '\\' |
    #     // Arithmetic
    #     '+' | '-' | '*' | '/' |
    #     // Underscore
    #     '_' |
    #     // Arrow
    #     '->' |
    #     // Assignment
    #     '=' |
    #     // Percentage
    #     '%' |
    #     // Annotation
    #     '@' |
    #     // Single quotes
    #     "'"
    # ;
    def getTokenAccess(self):
        """ generated source for method getTokenAccess """
        return self.pToken

    def getTokenRule(self):
        """ generated source for method getTokenRule """
        return self.getTokenAccess().getRule()

class ModelElements(AbstractParserRuleElementFinder):
    """ generated source for class ModelElements """
    rule = GrammarUtil.findRuleForName(LFGrammarAccess.getGrammar(),"org.lflang.LF.Model")
    cGroup = rule.eContents().get(1)
    cTargetAssignment_0 = cGroup.eContents().get(0)
    cTargetTargetDeclParserRuleCall_0_0 = cTargetAssignment_0.eContents().get(0)
    cImportsAssignment_1 = cGroup.eContents().get(1)
    cImportsImportParserRuleCall_1_0 = cImportsAssignment_1.eContents().get(0)
    cPreamblesAssignment_2 = cGroup.eContents().get(2)
    cPreamblesPreambleParserRuleCall_2_0 = cPreamblesAssignment_2.eContents().get(0)
    cReactorsAssignment_3 = cGroup.eContents().get(3)
    cReactorsReactorParserRuleCall_3_0 = cReactorsAssignment_3.eContents().get(0)

    # /////////// Overall file
    # /**
    #  * Top-level AST node.
    #  
    # Model:
    #     target=TargetDecl
    #     (imports+=Import)*
    #     (preambles+=Preamble)*
    #     (reactors+=Reactor)+
    #     ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # target=TargetDecl
    # (imports+=Import)*
    # (preambles+=Preamble)*
    # (reactors+=Reactor)+
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # target=TargetDecl
    def getTargetAssignment_0(self):
        """ generated source for method getTargetAssignment_0 """
        return self.cTargetAssignment_0

    # TargetDecl
    def getTargetTargetDeclParserRuleCall_0_0(self):
        """ generated source for method getTargetTargetDeclParserRuleCall_0_0 """
        return self.cTargetTargetDeclParserRuleCall_0_0

    # (imports+=Import)*
    def getImportsAssignment_1(self):
        """ generated source for method getImportsAssignment_1 """
        return self.cImportsAssignment_1

    # Import
    def getImportsImportParserRuleCall_1_0(self):
        """ generated source for method getImportsImportParserRuleCall_1_0 """
        return self.cImportsImportParserRuleCall_1_0

    # (preambles+=Preamble)*
    def getPreamblesAssignment_2(self):
        """ generated source for method getPreamblesAssignment_2 """
        return self.cPreamblesAssignment_2

    # Preamble
    def getPreamblesPreambleParserRuleCall_2_0(self):
        """ generated source for method getPreamblesPreambleParserRuleCall_2_0 """
        return self.cPreamblesPreambleParserRuleCall_2_0

    # (reactors+=Reactor)+
    def getReactorsAssignment_3(self):
        """ generated source for method getReactorsAssignment_3 """
        return self.cReactorsAssignment_3

    # Reactor
    def getReactorsReactorParserRuleCall_3_0(self):
        """ generated source for method getReactorsReactorParserRuleCall_3_0 """
        return self.cReactorsReactorParserRuleCall_3_0


class ImportElements(AbstractParserRuleElementFinder):
    """ generated source for class ImportElements """
    rule = GrammarUtil.findRuleForName(LFGrammarAccess.getGrammar(), "org.lflang.LF.Import")
    cGroup = rule.eContents().get(1)
    cImportKeyword_0 = cGroup.eContents().get(0)
    cReactorClassesAssignment_1 = cGroup.eContents().get(1)
    cReactorClassesImportedReactorParserRuleCall_1_0 = cReactorClassesAssignment_1.eContents().get(0)
    cGroup_2 = cGroup.eContents().get(2)
    cCommaKeyword_2_0 = cGroup_2.eContents().get(0)
    cReactorClassesAssignment_2_1 = cGroup_2.eContents().get(1)
    cReactorClassesImportedReactorParserRuleCall_2_1_0 = cReactorClassesAssignment_2_1.eContents().get(0)
    cFromKeyword_3 = cGroup.eContents().get(3)
    cImportURIAssignment_4 = cGroup.eContents().get(4)
    cImportURISTRINGTerminalRuleCall_4_0 = cImportURIAssignment_4.eContents().get(0)
    cSemicolonKeyword_5 = cGroup.eContents().get(5)

    # /////////// Top level elements
    # /**
    #  * Import declaration.
    #  
    # Import: 'import' reactorClasses+=ImportedReactor (',' reactorClasses+=ImportedReactor)* 'from' importURI=STRING ';'?;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # 'import' reactorClasses+=ImportedReactor (',' reactorClasses+=ImportedReactor)* 'from' importURI=STRING ';'?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # 'import'
    def getImportKeyword_0(self):
        """ generated source for method getImportKeyword_0 """
        return self.cImportKeyword_0

    # reactorClasses+=ImportedReactor
    def getReactorClassesAssignment_1(self):
        """ generated source for method getReactorClassesAssignment_1 """
        return self.cReactorClassesAssignment_1

    # ImportedReactor
    def getReactorClassesImportedReactorParserRuleCall_1_0(self):
        """ generated source for method getReactorClassesImportedReactorParserRuleCall_1_0 """
        return self.cReactorClassesImportedReactorParserRuleCall_1_0

    # (',' reactorClasses+=ImportedReactor)*
    def getGroup_2(self):
        """ generated source for method getGroup_2 """
        return self.cGroup_2

    # ','
    def getCommaKeyword_2_0(self):
        """ generated source for method getCommaKeyword_2_0 """
        return self.cCommaKeyword_2_0

    # reactorClasses+=ImportedReactor
    def getReactorClassesAssignment_2_1(self):
        """ generated source for method getReactorClassesAssignment_2_1 """
        return self.cReactorClassesAssignment_2_1

    # ImportedReactor
    def getReactorClassesImportedReactorParserRuleCall_2_1_0(self):
        """ generated source for method getReactorClassesImportedReactorParserRuleCall_2_1_0 """
        return self.cReactorClassesImportedReactorParserRuleCall_2_1_0

    # 'from'
    def getFromKeyword_3(self):
        """ generated source for method getFromKeyword_3 """
        return self.cFromKeyword_3

    # importURI=STRING
    def getImportURIAssignment_4(self):
        """ generated source for method getImportURIAssignment_4 """
        return self.cImportURIAssignment_4

    # STRING
    def getImportURISTRINGTerminalRuleCall_4_0(self):
        """ generated source for method getImportURISTRINGTerminalRuleCall_4_0 """
        return self.cImportURISTRINGTerminalRuleCall_4_0

    # ';'?
    def getSemicolonKeyword_5(self):
        """ generated source for method getSemicolonKeyword_5 """
        return self.cSemicolonKeyword_5


class ReactorDeclElements(AbstractParserRuleElementFinder):
    """ generated source for class ReactorDeclElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.ReactorDecl")
    cAlternatives = rule.eContents().get(1)
    cReactorParserRuleCall_0 = cAlternatives.eContents().get(0)
    cImportedReactorParserRuleCall_1 = cAlternatives.eContents().get(1)

    # ReactorDecl: Reactor | ImportedReactor;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # Reactor | ImportedReactor
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # Reactor
    def getReactorParserRuleCall_0(self):
        """ generated source for method getReactorParserRuleCall_0 """
        return self.cReactorParserRuleCall_0

    # ImportedReactor
    def getImportedReactorParserRuleCall_1(self):
        """ generated source for method getImportedReactorParserRuleCall_1 """
        return self.cImportedReactorParserRuleCall_1


class ImportedReactorElements(AbstractParserRuleElementFinder):
    """ generated source for class ImportedReactorElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.ImportedReactor")
    cGroup = rule.eContents().get(1)
    cReactorClassAssignment_0 = cGroup.eContents().get(0)
    cReactorClassReactorCrossReference_0_0 = cReactorClassAssignment_0.eContents().get(0)
    cReactorClassReactorIDTerminalRuleCall_0_0_1 = cReactorClassReactorCrossReference_0_0.eContents().get(1)
    cGroup_1 = cGroup.eContents().get(1)
    cAsKeyword_1_0 = cGroup_1.eContents().get(0)
    cNameAssignment_1_1 = cGroup_1.eContents().get(1)
    cNameIDTerminalRuleCall_1_1_0 = cNameAssignment_1_1.eContents().get(0)

    # ImportedReactor: reactorClass=[Reactor] ('as' name=ID)?;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # reactorClass=[Reactor] ('as' name=ID)?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # reactorClass=[Reactor]
    def getReactorClassAssignment_0(self):
        """ generated source for method getReactorClassAssignment_0 """
        return self.cReactorClassAssignment_0

    # [Reactor]
    def getReactorClassReactorCrossReference_0_0(self):
        """ generated source for method getReactorClassReactorCrossReference_0_0 """
        return self.cReactorClassReactorCrossReference_0_0

    # ID
    def getReactorClassReactorIDTerminalRuleCall_0_0_1(self):
        """ generated source for method getReactorClassReactorIDTerminalRuleCall_0_0_1 """
        return self.cReactorClassReactorIDTerminalRuleCall_0_0_1

    # ('as' name=ID)?
    def getGroup_1(self):
        """ generated source for method getGroup_1 """
        return self.cGroup_1

    # 'as'
    def getAsKeyword_1_0(self):
        """ generated source for method getAsKeyword_1_0 """
        return self.cAsKeyword_1_0

    # name=ID
    def getNameAssignment_1_1(self):
        """ generated source for method getNameAssignment_1_1 """
        return self.cNameAssignment_1_1

    # ID
    def getNameIDTerminalRuleCall_1_1_0(self):
        """ generated source for method getNameIDTerminalRuleCall_1_1_0 """
        return self.cNameIDTerminalRuleCall_1_1_0


class ReactorElements(AbstractParserRuleElementFinder):
    """ generated source for class ReactorElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Reactor")
    cGroup = rule.eContents().get(1)
    cReactorAction_0 = cGroup.eContents().get(0)
    cAttributesAssignment_1 = cGroup.eContents().get(1)
    cAttributesAttributeParserRuleCall_1_0 = cAttributesAssignment_1.eContents().get(0)
    cUnorderedGroup_2 = cGroup.eContents().get(2)
    cAlternatives_2_0 = cUnorderedGroup_2.eContents().get(0)
    cFederatedAssignment_2_0_0 = cAlternatives_2_0.eContents().get(0)
    cFederatedFederatedKeyword_2_0_0_0 = cFederatedAssignment_2_0_0.eContents().get(0)
    cMainAssignment_2_0_1 = cAlternatives_2_0.eContents().get(1)
    cMainMainKeyword_2_0_1_0 = cMainAssignment_2_0_1.eContents().get(0)
    cRealtimeAssignment_2_1 = cUnorderedGroup_2.eContents().get(1)
    cRealtimeRealtimeKeyword_2_1_0 = cRealtimeAssignment_2_1.eContents().get(0)
    cReactorKeyword_3 = cGroup.eContents().get(3)
    cNameAssignment_4 = cGroup.eContents().get(4)
    cNameIDTerminalRuleCall_4_0 = cNameAssignment_4.eContents().get(0)
    cGroup_5 = cGroup.eContents().get(5)
    cLessThanSignKeyword_5_0 = cGroup_5.eContents().get(0)
    cTypeParmsAssignment_5_1 = cGroup_5.eContents().get(1)
    cTypeParmsTypeParmParserRuleCall_5_1_0 = cTypeParmsAssignment_5_1.eContents().get(0)
    cGroup_5_2 = cGroup_5.eContents().get(2)
    cCommaKeyword_5_2_0 = cGroup_5_2.eContents().get(0)
    cTypeParmsAssignment_5_2_1 = cGroup_5_2.eContents().get(1)
    cTypeParmsTypeParmParserRuleCall_5_2_1_0 = cTypeParmsAssignment_5_2_1.eContents().get(0)
    cGreaterThanSignKeyword_5_3 = cGroup_5.eContents().get(3)
    cGroup_6 = cGroup.eContents().get(6)
    cLeftParenthesisKeyword_6_0 = cGroup_6.eContents().get(0)
    cParametersAssignment_6_1 = cGroup_6.eContents().get(1)
    cParametersParameterParserRuleCall_6_1_0 = cParametersAssignment_6_1.eContents().get(0)
    cGroup_6_2 = cGroup_6.eContents().get(2)
    cCommaKeyword_6_2_0 = cGroup_6_2.eContents().get(0)
    cParametersAssignment_6_2_1 = cGroup_6_2.eContents().get(1)
    cParametersParameterParserRuleCall_6_2_1_0 = cParametersAssignment_6_2_1.eContents().get(0)
    cRightParenthesisKeyword_6_3 = cGroup_6.eContents().get(3)
    cGroup_7 = cGroup.eContents().get(7)
    cAtKeyword_7_0 = cGroup_7.eContents().get(0)
    cHostAssignment_7_1 = cGroup_7.eContents().get(1)
    cHostHostParserRuleCall_7_1_0 = cHostAssignment_7_1.eContents().get(0)
    cGroup_8 = cGroup.eContents().get(8)
    cExtendsKeyword_8_0 = cGroup_8.eContents().get(0)
    cGroup_8_1 = cGroup_8.eContents().get(1)
    cSuperClassesAssignment_8_1_0 = cGroup_8_1.eContents().get(0)
    cSuperClassesReactorDeclCrossReference_8_1_0_0 = cSuperClassesAssignment_8_1_0.eContents().get(0)
    cSuperClassesReactorDeclIDTerminalRuleCall_8_1_0_0_1 = cSuperClassesReactorDeclCrossReference_8_1_0_0.eContents().get(
        1)
    cGroup_8_1_1 = cGroup_8_1.eContents().get(1)
    cCommaKeyword_8_1_1_0 = cGroup_8_1_1.eContents().get(0)
    cSuperClassesAssignment_8_1_1_1 = cGroup_8_1_1.eContents().get(1)
    cSuperClassesReactorDeclCrossReference_8_1_1_1_0 = cSuperClassesAssignment_8_1_1_1.eContents().get(0)
    cSuperClassesReactorDeclIDTerminalRuleCall_8_1_1_1_0_1 = cSuperClassesReactorDeclCrossReference_8_1_1_1_0.eContents().get(
        1)
    cLeftCurlyBracketKeyword_9 = cGroup.eContents().get(9)
    cAlternatives_10 = cGroup.eContents().get(10)
    cPreamblesAssignment_10_0 = cAlternatives_10.eContents().get(0)
    cPreamblesPreambleParserRuleCall_10_0_0 = cPreamblesAssignment_10_0.eContents().get(0)
    cStateVarsAssignment_10_1 = cAlternatives_10.eContents().get(1)
    cStateVarsStateVarParserRuleCall_10_1_0 = cStateVarsAssignment_10_1.eContents().get(0)
    cMethodsAssignment_10_2 = cAlternatives_10.eContents().get(2)
    cMethodsMethodParserRuleCall_10_2_0 = cMethodsAssignment_10_2.eContents().get(0)
    cInputsAssignment_10_3 = cAlternatives_10.eContents().get(3)
    cInputsInputParserRuleCall_10_3_0 = cInputsAssignment_10_3.eContents().get(0)
    cOutputsAssignment_10_4 = cAlternatives_10.eContents().get(4)
    cOutputsOutputParserRuleCall_10_4_0 = cOutputsAssignment_10_4.eContents().get(0)
    cTimersAssignment_10_5 = cAlternatives_10.eContents().get(5)
    cTimersTimerParserRuleCall_10_5_0 = cTimersAssignment_10_5.eContents().get(0)
    cActionsAssignment_10_6 = cAlternatives_10.eContents().get(6)
    cActionsActionParserRuleCall_10_6_0 = cActionsAssignment_10_6.eContents().get(0)
    cInstantiationsAssignment_10_7 = cAlternatives_10.eContents().get(7)
    cInstantiationsInstantiationParserRuleCall_10_7_0 = cInstantiationsAssignment_10_7.eContents().get(0)
    cConnectionsAssignment_10_8 = cAlternatives_10.eContents().get(8)
    cConnectionsConnectionParserRuleCall_10_8_0 = cConnectionsAssignment_10_8.eContents().get(0)
    cReactionsAssignment_10_9 = cAlternatives_10.eContents().get(9)
    cReactionsReactionParserRuleCall_10_9_0 = cReactionsAssignment_10_9.eContents().get(0)
    cModesAssignment_10_10 = cAlternatives_10.eContents().get(10)
    cModesModeParserRuleCall_10_10_0 = cModesAssignment_10_10.eContents().get(0)
    cRightCurlyBracketKeyword_11 = cGroup.eContents().get(11)

    # /**
    #  * Declaration of a reactor class.
    #  
    # Reactor:
    #     {Reactor} (attributes+=Attribute)* ((federated?='federated' | main?='main')? & realtime?='realtime'?) 'reactor' (name=ID)?
    #     ('<' typeParms+=TypeParm (',' typeParms+=TypeParm)* '>')?
    #     ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
    #     ('at' host=Host)?
    #     ('extends' (superClasses+=[ReactorDecl] (',' superClasses+=[ReactorDecl])*))?
    #     '{'
    #     (     (preambles+=Preamble)
    #         | (stateVars+=StateVar)
    #         | (methods+=Method)
    #         | (inputs+=Input)
    #         | (outputs+=Output)
    #         | (timers+=Timer)
    #         | (actions+=Action)
    #         | (instantiations+=Instantiation)
    #         | (connections+=Connection)
    #         | (reactions+=Reaction)
    #         | (modes+=Mode)
    #     )* '}';
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # {Reactor} (attributes+=Attribute)* ((federated?='federated' | main?='main')? & realtime?='realtime'?) 'reactor' (name=ID)?
    # ('<' typeParms+=TypeParm (',' typeParms+=TypeParm)* '>')?
    # ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
    # ('at' host=Host)?
    # ('extends' (superClasses+=[ReactorDecl] (',' superClasses+=[ReactorDecl])*))?
    # '{'
    # (     (preambles+=Preamble)
    #     | (stateVars+=StateVar)
    #     | (methods+=Method)
    #     | (inputs+=Input)
    #     | (outputs+=Output)
    #     | (timers+=Timer)
    #     | (actions+=Action)
    #     | (instantiations+=Instantiation)
    #     | (connections+=Connection)
    #     | (reactions+=Reaction)
    #     | (modes+=Mode)
    # )* '}'
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # {Reactor}
    def getReactorAction_0(self):
        """ generated source for method getReactorAction_0 """
        return self.cReactorAction_0

    # (attributes+=Attribute)*
    def getAttributesAssignment_1(self):
        """ generated source for method getAttributesAssignment_1 """
        return self.cAttributesAssignment_1

    # Attribute
    def getAttributesAttributeParserRuleCall_1_0(self):
        """ generated source for method getAttributesAttributeParserRuleCall_1_0 """
        return self.cAttributesAttributeParserRuleCall_1_0

    # ((federated?='federated' | main?='main')? & realtime?='realtime'?)
    def getUnorderedGroup_2(self):
        """ generated source for method getUnorderedGroup_2 """
        return self.cUnorderedGroup_2

    # (federated?='federated' | main?='main')?
    def getAlternatives_2_0(self):
        """ generated source for method getAlternatives_2_0 """
        return self.cAlternatives_2_0

    # federated?='federated'
    def getFederatedAssignment_2_0_0(self):
        """ generated source for method getFederatedAssignment_2_0_0 """
        return self.cFederatedAssignment_2_0_0

    # 'federated'
    def getFederatedFederatedKeyword_2_0_0_0(self):
        """ generated source for method getFederatedFederatedKeyword_2_0_0_0 """
        return self.cFederatedFederatedKeyword_2_0_0_0

    # main?='main'
    def getMainAssignment_2_0_1(self):
        """ generated source for method getMainAssignment_2_0_1 """
        return self.cMainAssignment_2_0_1

    # 'main'
    def getMainMainKeyword_2_0_1_0(self):
        """ generated source for method getMainMainKeyword_2_0_1_0 """
        return self.cMainMainKeyword_2_0_1_0

    # realtime?='realtime'?
    def getRealtimeAssignment_2_1(self):
        """ generated source for method getRealtimeAssignment_2_1 """
        return self.cRealtimeAssignment_2_1

    # 'realtime'
    def getRealtimeRealtimeKeyword_2_1_0(self):
        """ generated source for method getRealtimeRealtimeKeyword_2_1_0 """
        return self.cRealtimeRealtimeKeyword_2_1_0

    # 'reactor'
    def getReactorKeyword_3(self):
        """ generated source for method getReactorKeyword_3 """
        return self.cReactorKeyword_3

    # (name=ID)?
    def getNameAssignment_4(self):
        """ generated source for method getNameAssignment_4 """
        return self.cNameAssignment_4

    # ID
    def getNameIDTerminalRuleCall_4_0(self):
        """ generated source for method getNameIDTerminalRuleCall_4_0 """
        return self.cNameIDTerminalRuleCall_4_0

    # ('<' typeParms+=TypeParm (',' typeParms+=TypeParm)* '>')?
    def getGroup_5(self):
        """ generated source for method getGroup_5 """
        return self.cGroup_5

    # '<'
    def getLessThanSignKeyword_5_0(self):
        """ generated source for method getLessThanSignKeyword_5_0 """
        return self.cLessThanSignKeyword_5_0

    # typeParms+=TypeParm
    def getTypeParmsAssignment_5_1(self):
        """ generated source for method getTypeParmsAssignment_5_1 """
        return self.cTypeParmsAssignment_5_1

    # TypeParm
    def getTypeParmsTypeParmParserRuleCall_5_1_0(self):
        """ generated source for method getTypeParmsTypeParmParserRuleCall_5_1_0 """
        return self.cTypeParmsTypeParmParserRuleCall_5_1_0

    # (',' typeParms+=TypeParm)*
    def getGroup_5_2(self):
        """ generated source for method getGroup_5_2 """
        return self.cGroup_5_2

    # ','
    def getCommaKeyword_5_2_0(self):
        """ generated source for method getCommaKeyword_5_2_0 """
        return self.cCommaKeyword_5_2_0

    # typeParms+=TypeParm
    def getTypeParmsAssignment_5_2_1(self):
        """ generated source for method getTypeParmsAssignment_5_2_1 """
        return self.cTypeParmsAssignment_5_2_1

    # TypeParm
    def getTypeParmsTypeParmParserRuleCall_5_2_1_0(self):
        """ generated source for method getTypeParmsTypeParmParserRuleCall_5_2_1_0 """
        return self.cTypeParmsTypeParmParserRuleCall_5_2_1_0

    # '>'
    def getGreaterThanSignKeyword_5_3(self):
        """ generated source for method getGreaterThanSignKeyword_5_3 """
        return self.cGreaterThanSignKeyword_5_3

    # ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
    def getGroup_6(self):
        """ generated source for method getGroup_6 """
        return self.cGroup_6

    # '('
    def getLeftParenthesisKeyword_6_0(self):
        """ generated source for method getLeftParenthesisKeyword_6_0 """
        return self.cLeftParenthesisKeyword_6_0

    # parameters+=Parameter
    def getParametersAssignment_6_1(self):
        """ generated source for method getParametersAssignment_6_1 """
        return self.cParametersAssignment_6_1

    # Parameter
    def getParametersParameterParserRuleCall_6_1_0(self):
        """ generated source for method getParametersParameterParserRuleCall_6_1_0 """
        return self.cParametersParameterParserRuleCall_6_1_0

    # (',' parameters+=Parameter)*
    def getGroup_6_2(self):
        """ generated source for method getGroup_6_2 """
        return self.cGroup_6_2

    # ','
    def getCommaKeyword_6_2_0(self):
        """ generated source for method getCommaKeyword_6_2_0 """
        return self.cCommaKeyword_6_2_0

    # parameters+=Parameter
    def getParametersAssignment_6_2_1(self):
        """ generated source for method getParametersAssignment_6_2_1 """
        return self.cParametersAssignment_6_2_1

    # Parameter
    def getParametersParameterParserRuleCall_6_2_1_0(self):
        """ generated source for method getParametersParameterParserRuleCall_6_2_1_0 """
        return self.cParametersParameterParserRuleCall_6_2_1_0

    # ')'
    def getRightParenthesisKeyword_6_3(self):
        """ generated source for method getRightParenthesisKeyword_6_3 """
        return self.cRightParenthesisKeyword_6_3

    # ('at' host=Host)?
    def getGroup_7(self):
        """ generated source for method getGroup_7 """
        return self.cGroup_7

    # 'at'
    def getAtKeyword_7_0(self):
        """ generated source for method getAtKeyword_7_0 """
        return self.cAtKeyword_7_0

    # host=Host
    def getHostAssignment_7_1(self):
        """ generated source for method getHostAssignment_7_1 """
        return self.cHostAssignment_7_1

    # Host
    def getHostHostParserRuleCall_7_1_0(self):
        """ generated source for method getHostHostParserRuleCall_7_1_0 """
        return self.cHostHostParserRuleCall_7_1_0

    # ('extends' (superClasses+=[ReactorDecl] (',' superClasses+=[ReactorDecl])*))?
    def getGroup_8(self):
        """ generated source for method getGroup_8 """
        return self.cGroup_8

    # 'extends'
    def getExtendsKeyword_8_0(self):
        """ generated source for method getExtendsKeyword_8_0 """
        return self.cExtendsKeyword_8_0

    # (superClasses+=[ReactorDecl] (',' superClasses+=[ReactorDecl])*)
    def getGroup_8_1(self):
        """ generated source for method getGroup_8_1 """
        return self.cGroup_8_1

    # superClasses+=[ReactorDecl]
    def getSuperClassesAssignment_8_1_0(self):
        """ generated source for method getSuperClassesAssignment_8_1_0 """
        return self.cSuperClassesAssignment_8_1_0

    # [ReactorDecl]
    def getSuperClassesReactorDeclCrossReference_8_1_0_0(self):
        """ generated source for method getSuperClassesReactorDeclCrossReference_8_1_0_0 """
        return self.cSuperClassesReactorDeclCrossReference_8_1_0_0

    # ID
    def getSuperClassesReactorDeclIDTerminalRuleCall_8_1_0_0_1(self):
        """ generated source for method getSuperClassesReactorDeclIDTerminalRuleCall_8_1_0_0_1 """
        return self.cSuperClassesReactorDeclIDTerminalRuleCall_8_1_0_0_1

    # (',' superClasses+=[ReactorDecl])*
    def getGroup_8_1_1(self):
        """ generated source for method getGroup_8_1_1 """
        return self.cGroup_8_1_1

    # ','
    def getCommaKeyword_8_1_1_0(self):
        """ generated source for method getCommaKeyword_8_1_1_0 """
        return self.cCommaKeyword_8_1_1_0

    # superClasses+=[ReactorDecl]
    def getSuperClassesAssignment_8_1_1_1(self):
        """ generated source for method getSuperClassesAssignment_8_1_1_1 """
        return self.cSuperClassesAssignment_8_1_1_1

    # [ReactorDecl]
    def getSuperClassesReactorDeclCrossReference_8_1_1_1_0(self):
        """ generated source for method getSuperClassesReactorDeclCrossReference_8_1_1_1_0 """
        return self.cSuperClassesReactorDeclCrossReference_8_1_1_1_0

    # ID
    def getSuperClassesReactorDeclIDTerminalRuleCall_8_1_1_1_0_1(self):
        """ generated source for method getSuperClassesReactorDeclIDTerminalRuleCall_8_1_1_1_0_1 """
        return self.cSuperClassesReactorDeclIDTerminalRuleCall_8_1_1_1_0_1

    # '{'
    def getLeftCurlyBracketKeyword_9(self):
        """ generated source for method getLeftCurlyBracketKeyword_9 """
        return self.cLeftCurlyBracketKeyword_9

    # (     (preambles+=Preamble)
    #     | (stateVars+=StateVar)
    #     | (methods+=Method)
    #     | (inputs+=Input)
    #     | (outputs+=Output)
    #     | (timers+=Timer)
    #     | (actions+=Action)
    #     | (instantiations+=Instantiation)
    #     | (connections+=Connection)
    #     | (reactions+=Reaction)
    #     | (modes+=Mode)
    # )*
    def getAlternatives_10(self):
        """ generated source for method getAlternatives_10 """
        return self.cAlternatives_10

    # (preambles+=Preamble)
    def getPreamblesAssignment_10_0(self):
        """ generated source for method getPreamblesAssignment_10_0 """
        return self.cPreamblesAssignment_10_0

    # Preamble
    def getPreamblesPreambleParserRuleCall_10_0_0(self):
        """ generated source for method getPreamblesPreambleParserRuleCall_10_0_0 """
        return self.cPreamblesPreambleParserRuleCall_10_0_0

    # (stateVars+=StateVar)
    def getStateVarsAssignment_10_1(self):
        """ generated source for method getStateVarsAssignment_10_1 """
        return self.cStateVarsAssignment_10_1

    # StateVar
    def getStateVarsStateVarParserRuleCall_10_1_0(self):
        """ generated source for method getStateVarsStateVarParserRuleCall_10_1_0 """
        return self.cStateVarsStateVarParserRuleCall_10_1_0

    # (methods+=Method)
    def getMethodsAssignment_10_2(self):
        """ generated source for method getMethodsAssignment_10_2 """
        return self.cMethodsAssignment_10_2

    # Method
    def getMethodsMethodParserRuleCall_10_2_0(self):
        """ generated source for method getMethodsMethodParserRuleCall_10_2_0 """
        return self.cMethodsMethodParserRuleCall_10_2_0

    # (inputs+=Input)
    def getInputsAssignment_10_3(self):
        """ generated source for method getInputsAssignment_10_3 """
        return self.cInputsAssignment_10_3

    # Input
    def getInputsInputParserRuleCall_10_3_0(self):
        """ generated source for method getInputsInputParserRuleCall_10_3_0 """
        return self.cInputsInputParserRuleCall_10_3_0

    # (outputs+=Output)
    def getOutputsAssignment_10_4(self):
        """ generated source for method getOutputsAssignment_10_4 """
        return self.cOutputsAssignment_10_4

    # Output
    def getOutputsOutputParserRuleCall_10_4_0(self):
        """ generated source for method getOutputsOutputParserRuleCall_10_4_0 """
        return self.cOutputsOutputParserRuleCall_10_4_0

    # (timers+=Timer)
    def getTimersAssignment_10_5(self):
        """ generated source for method getTimersAssignment_10_5 """
        return self.cTimersAssignment_10_5

    # Timer
    def getTimersTimerParserRuleCall_10_5_0(self):
        """ generated source for method getTimersTimerParserRuleCall_10_5_0 """
        return self.cTimersTimerParserRuleCall_10_5_0

    # (actions+=Action)
    def getActionsAssignment_10_6(self):
        """ generated source for method getActionsAssignment_10_6 """
        return self.cActionsAssignment_10_6

    # Action
    def getActionsActionParserRuleCall_10_6_0(self):
        """ generated source for method getActionsActionParserRuleCall_10_6_0 """
        return self.cActionsActionParserRuleCall_10_6_0

    # (instantiations+=Instantiation)
    def getInstantiationsAssignment_10_7(self):
        """ generated source for method getInstantiationsAssignment_10_7 """
        return self.cInstantiationsAssignment_10_7

    # Instantiation
    def getInstantiationsInstantiationParserRuleCall_10_7_0(self):
        """ generated source for method getInstantiationsInstantiationParserRuleCall_10_7_0 """
        return self.cInstantiationsInstantiationParserRuleCall_10_7_0

    # (connections+=Connection)
    def getConnectionsAssignment_10_8(self):
        """ generated source for method getConnectionsAssignment_10_8 """
        return self.cConnectionsAssignment_10_8

    # Connection
    def getConnectionsConnectionParserRuleCall_10_8_0(self):
        """ generated source for method getConnectionsConnectionParserRuleCall_10_8_0 """
        return self.cConnectionsConnectionParserRuleCall_10_8_0

    # (reactions+=Reaction)
    def getReactionsAssignment_10_9(self):
        """ generated source for method getReactionsAssignment_10_9 """
        return self.cReactionsAssignment_10_9

    # Reaction
    def getReactionsReactionParserRuleCall_10_9_0(self):
        """ generated source for method getReactionsReactionParserRuleCall_10_9_0 """
        return self.cReactionsReactionParserRuleCall_10_9_0

    # (modes+=Mode)
    def getModesAssignment_10_10(self):
        """ generated source for method getModesAssignment_10_10 """
        return self.cModesAssignment_10_10

    # Mode
    def getModesModeParserRuleCall_10_10_0(self):
        """ generated source for method getModesModeParserRuleCall_10_10_0 """
        return self.cModesModeParserRuleCall_10_10_0

    # '}'
    def getRightCurlyBracketKeyword_11(self):
        """ generated source for method getRightCurlyBracketKeyword_11 """
        return self.cRightCurlyBracketKeyword_11


class TypeParmElements(AbstractParserRuleElementFinder):
    """ generated source for class TypeParmElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.TypeParm")
    cAlternatives = rule.eContents().get(1)
    cLiteralAssignment_0 = cAlternatives.eContents().get(0)
    cLiteralTypeExprParserRuleCall_0_0 = cLiteralAssignment_0.eContents().get(0)
    cCodeAssignment_1 = cAlternatives.eContents().get(1)
    cCodeCodeParserRuleCall_1_0 = cCodeAssignment_1.eContents().get(0)

    # TypeParm:
    #     literal=TypeExpr | code=Code
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # literal=TypeExpr | code=Code
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # literal=TypeExpr
    def getLiteralAssignment_0(self):
        """ generated source for method getLiteralAssignment_0 """
        return self.cLiteralAssignment_0

    # TypeExpr
    def getLiteralTypeExprParserRuleCall_0_0(self):
        """ generated source for method getLiteralTypeExprParserRuleCall_0_0 """
        return self.cLiteralTypeExprParserRuleCall_0_0

    # code=Code
    def getCodeAssignment_1(self):
        """ generated source for method getCodeAssignment_1 """
        return self.cCodeAssignment_1

    # Code
    def getCodeCodeParserRuleCall_1_0(self):
        """ generated source for method getCodeCodeParserRuleCall_1_0 """
        return self.cCodeCodeParserRuleCall_1_0


class TypeExprElements(AbstractParserRuleElementFinder):
    """ generated source for class TypeExprElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.TypeExpr")
    cIDTerminalRuleCall = rule.eContents().get(1)

    # // Allows simple statements like "A extends B". We probably want to further expand this.
    # TypeExpr:
    #     ID+
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # ID+
    def getIDTerminalRuleCall(self):
        """ generated source for method getIDTerminalRuleCall """
        return self.cIDTerminalRuleCall


class TargetDeclElements(AbstractParserRuleElementFinder):
    """ generated source for class TargetDeclElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.TargetDecl")
    cGroup = rule.eContents().get(1)
    cTargetKeyword_0 = cGroup.eContents().get(0)
    cNameAssignment_1 = cGroup.eContents().get(1)
    cNameIDTerminalRuleCall_1_0 = cNameAssignment_1.eContents().get(0)
    cConfigAssignment_2 = cGroup.eContents().get(2)
    cConfigKeyValuePairsParserRuleCall_2_0 = cConfigAssignment_2.eContents().get(0)
    cSemicolonKeyword_3 = cGroup.eContents().get(3)

    # /**
    #  * Specification of the target language. Target properties can be specified in
    #  * YAML format to pass on configuration details to the runtime environment.
    #  
    # TargetDecl:
    #     'target' name=ID (config=KeyValuePairs)? ';'?;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # 'target' name=ID (config=KeyValuePairs)? ';'?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # 'target'
    def getTargetKeyword_0(self):
        """ generated source for method getTargetKeyword_0 """
        return self.cTargetKeyword_0

    # name=ID
    def getNameAssignment_1(self):
        """ generated source for method getNameAssignment_1 """
        return self.cNameAssignment_1

    # ID
    def getNameIDTerminalRuleCall_1_0(self):
        """ generated source for method getNameIDTerminalRuleCall_1_0 """
        return self.cNameIDTerminalRuleCall_1_0

    # (config=KeyValuePairs)?
    def getConfigAssignment_2(self):
        """ generated source for method getConfigAssignment_2 """
        return self.cConfigAssignment_2

    # KeyValuePairs
    def getConfigKeyValuePairsParserRuleCall_2_0(self):
        """ generated source for method getConfigKeyValuePairsParserRuleCall_2_0 """
        return self.cConfigKeyValuePairsParserRuleCall_2_0

    # ';'?
    def getSemicolonKeyword_3(self):
        """ generated source for method getSemicolonKeyword_3 """
        return self.cSemicolonKeyword_3


class StateVarElements(AbstractParserRuleElementFinder):
    """ generated source for class StateVarElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.StateVar")
    cGroup = rule.eContents().get(1)
    cAttributesAssignment_0 = cGroup.eContents().get(0)
    cAttributesAttributeParserRuleCall_0_0 = cAttributesAssignment_0.eContents().get(0)
    cResetAssignment_1 = cGroup.eContents().get(1)
    cResetResetKeyword_1_0 = cResetAssignment_1.eContents().get(0)
    cStateKeyword_2 = cGroup.eContents().get(2)
    cNameAssignment_3 = cGroup.eContents().get(3)
    cNameIDTerminalRuleCall_3_0 = cNameAssignment_3.eContents().get(0)
    cGroup_4 = cGroup.eContents().get(4)
    cGroup_4_0 = cGroup_4.eContents().get(0)
    cColonKeyword_4_0_0 = cGroup_4_0.eContents().get(0)
    cTypeAssignment_4_0_1 = cGroup_4_0.eContents().get(1)
    cTypeTypeParserRuleCall_4_0_1_0 = cTypeAssignment_4_0_1.eContents().get(0)
    cAlternatives_4_1 = cGroup_4.eContents().get(1)
    cGroup_4_1_0 = cAlternatives_4_1.eContents().get(0)
    cParensAssignment_4_1_0_0 = cGroup_4_1_0.eContents().get(0)
    cParensLeftParenthesisKeyword_4_1_0_0_0 = cParensAssignment_4_1_0_0.eContents().get(0)
    cGroup_4_1_0_1 = cGroup_4_1_0.eContents().get(1)
    cInitAssignment_4_1_0_1_0 = cGroup_4_1_0_1.eContents().get(0)
    cInitExpressionParserRuleCall_4_1_0_1_0_0 = cInitAssignment_4_1_0_1_0.eContents().get(0)
    cGroup_4_1_0_1_1 = cGroup_4_1_0_1.eContents().get(1)
    cCommaKeyword_4_1_0_1_1_0 = cGroup_4_1_0_1_1.eContents().get(0)
    cInitAssignment_4_1_0_1_1_1 = cGroup_4_1_0_1_1.eContents().get(1)
    cInitExpressionParserRuleCall_4_1_0_1_1_1_0 = cInitAssignment_4_1_0_1_1_1.eContents().get(0)
    cParensAssignment_4_1_0_2 = cGroup_4_1_0.eContents().get(2)
    cParensRightParenthesisKeyword_4_1_0_2_0 = cParensAssignment_4_1_0_2.eContents().get(0)
    cGroup_4_1_1 = cAlternatives_4_1.eContents().get(1)
    cBracesAssignment_4_1_1_0 = cGroup_4_1_1.eContents().get(0)
    cBracesLeftCurlyBracketKeyword_4_1_1_0_0 = cBracesAssignment_4_1_1_0.eContents().get(0)
    cGroup_4_1_1_1 = cGroup_4_1_1.eContents().get(1)
    cInitAssignment_4_1_1_1_0 = cGroup_4_1_1_1.eContents().get(0)
    cInitExpressionParserRuleCall_4_1_1_1_0_0 = cInitAssignment_4_1_1_1_0.eContents().get(0)
    cGroup_4_1_1_1_1 = cGroup_4_1_1_1.eContents().get(1)
    cCommaKeyword_4_1_1_1_1_0 = cGroup_4_1_1_1_1.eContents().get(0)
    cInitAssignment_4_1_1_1_1_1 = cGroup_4_1_1_1_1.eContents().get(1)
    cInitExpressionParserRuleCall_4_1_1_1_1_1_0 = cInitAssignment_4_1_1_1_1_1.eContents().get(0)
    cBracesAssignment_4_1_1_2 = cGroup_4_1_1.eContents().get(2)
    cBracesRightCurlyBracketKeyword_4_1_1_2_0 = cBracesAssignment_4_1_1_2.eContents().get(0)
    cSemicolonKeyword_5 = cGroup.eContents().get(5)

    # /////////// Statements
    # /**
    #  * Declaration of a state variable. Types are optional, but may be required
    #  * during validation (depending on the target language). Initialization is also
    #  * optional. A state variable can be initialized by assigning a `Expression` or list
    #  * of these. Note that a `Expression` may also be a reference to a parameter.
    #  * The following checks must be carried out during validation:
    #  *  - if the list of initialization expressions has more than one element in it, a
    #  *  type must be specified;
    #  *  - if the `time` type is specified, there can only be a single initialization
    #  *  element, which has to denote a time or a reference to a parameter that
    #  *  denotes a time; and
    #  *  - if the `time` type is specified, either a proper time interval and unit
    #  *  must be given, or a literal or code that denotes zero.
    #  
    #  StateVar:
    #     (attributes+=Attribute)*
    #     (reset?='reset')? 'state' name=ID (
    #         (':' (type=Type))?
    #         ((parens+='(' (init+=Expression (','  init+=Expression)*)? parens+=')')
    #             | (braces+='{' (init+=Expression (','  init+=Expression)*)? braces+='}')
    #         )?
    #     ) ';'?
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (attributes+=Attribute)*
    # (reset?='reset')? 'state' name=ID (
    #     (':' (type=Type))?
    #     ((parens+='(' (init+=Expression (','  init+=Expression)*)? parens+=')')
    #         | (braces+='{' (init+=Expression (','  init+=Expression)*)? braces+='}')
    #     )?
    # ) ';'?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # (attributes+=Attribute)*
    def getAttributesAssignment_0(self):
        """ generated source for method getAttributesAssignment_0 """
        return self.cAttributesAssignment_0

    # Attribute
    def getAttributesAttributeParserRuleCall_0_0(self):
        """ generated source for method getAttributesAttributeParserRuleCall_0_0 """
        return self.cAttributesAttributeParserRuleCall_0_0

    # (reset?='reset')?
    def getResetAssignment_1(self):
        """ generated source for method getResetAssignment_1 """
        return self.cResetAssignment_1

    # 'reset'
    def getResetResetKeyword_1_0(self):
        """ generated source for method getResetResetKeyword_1_0 """
        return self.cResetResetKeyword_1_0

    # 'state'
    def getStateKeyword_2(self):
        """ generated source for method getStateKeyword_2 """
        return self.cStateKeyword_2

    # name=ID
    def getNameAssignment_3(self):
        """ generated source for method getNameAssignment_3 """
        return self.cNameAssignment_3

    # ID
    def getNameIDTerminalRuleCall_3_0(self):
        """ generated source for method getNameIDTerminalRuleCall_3_0 """
        return self.cNameIDTerminalRuleCall_3_0

    # (
    #        (':' (type=Type))?
    #        ((parens+='(' (init+=Expression (','  init+=Expression)*)? parens+=')')
    #            | (braces+='{' (init+=Expression (','  init+=Expression)*)? braces+='}')
    #        )?
    #    )
    def getGroup_4(self):
        """ generated source for method getGroup_4 """
        return self.cGroup_4

    # (':' (type=Type))?
    def getGroup_4_0(self):
        """ generated source for method getGroup_4_0 """
        return self.cGroup_4_0

    # ':'
    def getColonKeyword_4_0_0(self):
        """ generated source for method getColonKeyword_4_0_0 """
        return self.cColonKeyword_4_0_0

    # (type=Type)
    def getTypeAssignment_4_0_1(self):
        """ generated source for method getTypeAssignment_4_0_1 """
        return self.cTypeAssignment_4_0_1

    # Type
    def getTypeTypeParserRuleCall_4_0_1_0(self):
        """ generated source for method getTypeTypeParserRuleCall_4_0_1_0 """
        return self.cTypeTypeParserRuleCall_4_0_1_0

    # ((parens+='(' (init+=Expression (','  init+=Expression)*)? parens+=')')
    #     | (braces+='{' (init+=Expression (','  init+=Expression)*)? braces+='}')
    # )?
    def getAlternatives_4_1(self):
        """ generated source for method getAlternatives_4_1 """
        return self.cAlternatives_4_1

    # (parens+='(' (init+=Expression (','  init+=Expression)*)? parens+=')')
    def getGroup_4_1_0(self):
        """ generated source for method getGroup_4_1_0 """
        return self.cGroup_4_1_0

    # parens+='('
    def getParensAssignment_4_1_0_0(self):
        """ generated source for method getParensAssignment_4_1_0_0 """
        return self.cParensAssignment_4_1_0_0

    # '('
    def getParensLeftParenthesisKeyword_4_1_0_0_0(self):
        """ generated source for method getParensLeftParenthesisKeyword_4_1_0_0_0 """
        return self.cParensLeftParenthesisKeyword_4_1_0_0_0

    # (init+=Expression (','  init+=Expression)*)?
    def getGroup_4_1_0_1(self):
        """ generated source for method getGroup_4_1_0_1 """
        return self.cGroup_4_1_0_1

    # init+=Expression
    def getInitAssignment_4_1_0_1_0(self):
        """ generated source for method getInitAssignment_4_1_0_1_0 """
        return self.cInitAssignment_4_1_0_1_0

    # Expression
    def getInitExpressionParserRuleCall_4_1_0_1_0_0(self):
        """ generated source for method getInitExpressionParserRuleCall_4_1_0_1_0_0 """
        return self.cInitExpressionParserRuleCall_4_1_0_1_0_0

    # (','  init+=Expression)*
    def getGroup_4_1_0_1_1(self):
        """ generated source for method getGroup_4_1_0_1_1 """
        return self.cGroup_4_1_0_1_1

    # ','
    def getCommaKeyword_4_1_0_1_1_0(self):
        """ generated source for method getCommaKeyword_4_1_0_1_1_0 """
        return self.cCommaKeyword_4_1_0_1_1_0

    # init+=Expression
    def getInitAssignment_4_1_0_1_1_1(self):
        """ generated source for method getInitAssignment_4_1_0_1_1_1 """
        return self.cInitAssignment_4_1_0_1_1_1

    # Expression
    def getInitExpressionParserRuleCall_4_1_0_1_1_1_0(self):
        """ generated source for method getInitExpressionParserRuleCall_4_1_0_1_1_1_0 """
        return self.cInitExpressionParserRuleCall_4_1_0_1_1_1_0

    # parens+=')'
    def getParensAssignment_4_1_0_2(self):
        """ generated source for method getParensAssignment_4_1_0_2 """
        return self.cParensAssignment_4_1_0_2

    # ')'
    def getParensRightParenthesisKeyword_4_1_0_2_0(self):
        """ generated source for method getParensRightParenthesisKeyword_4_1_0_2_0 """
        return self.cParensRightParenthesisKeyword_4_1_0_2_0

    # (braces+='{' (init+=Expression (','  init+=Expression)*)? braces+='}')
    def getGroup_4_1_1(self):
        """ generated source for method getGroup_4_1_1 """
        return self.cGroup_4_1_1

    # braces+='{'
    def getBracesAssignment_4_1_1_0(self):
        """ generated source for method getBracesAssignment_4_1_1_0 """
        return self.cBracesAssignment_4_1_1_0

    # '{'
    def getBracesLeftCurlyBracketKeyword_4_1_1_0_0(self):
        """ generated source for method getBracesLeftCurlyBracketKeyword_4_1_1_0_0 """
        return self.cBracesLeftCurlyBracketKeyword_4_1_1_0_0

    # (init+=Expression (','  init+=Expression)*)?
    def getGroup_4_1_1_1(self):
        """ generated source for method getGroup_4_1_1_1 """
        return self.cGroup_4_1_1_1

    # init+=Expression
    def getInitAssignment_4_1_1_1_0(self):
        """ generated source for method getInitAssignment_4_1_1_1_0 """
        return self.cInitAssignment_4_1_1_1_0

    # Expression
    def getInitExpressionParserRuleCall_4_1_1_1_0_0(self):
        """ generated source for method getInitExpressionParserRuleCall_4_1_1_1_0_0 """
        return self.cInitExpressionParserRuleCall_4_1_1_1_0_0

    # (','  init+=Expression)*
    def getGroup_4_1_1_1_1(self):
        """ generated source for method getGroup_4_1_1_1_1 """
        return self.cGroup_4_1_1_1_1

    # ','
    def getCommaKeyword_4_1_1_1_1_0(self):
        """ generated source for method getCommaKeyword_4_1_1_1_1_0 """
        return self.cCommaKeyword_4_1_1_1_1_0

    # init+=Expression
    def getInitAssignment_4_1_1_1_1_1(self):
        """ generated source for method getInitAssignment_4_1_1_1_1_1 """
        return self.cInitAssignment_4_1_1_1_1_1

    # Expression
    def getInitExpressionParserRuleCall_4_1_1_1_1_1_0(self):
        """ generated source for method getInitExpressionParserRuleCall_4_1_1_1_1_1_0 """
        return self.cInitExpressionParserRuleCall_4_1_1_1_1_1_0

    # braces+='}'
    def getBracesAssignment_4_1_1_2(self):
        """ generated source for method getBracesAssignment_4_1_1_2 """
        return self.cBracesAssignment_4_1_1_2

    # '}'
    def getBracesRightCurlyBracketKeyword_4_1_1_2_0(self):
        """ generated source for method getBracesRightCurlyBracketKeyword_4_1_1_2_0 """
        return self.cBracesRightCurlyBracketKeyword_4_1_1_2_0

    # ';'?
    def getSemicolonKeyword_5(self):
        """ generated source for method getSemicolonKeyword_5 """
        return self.cSemicolonKeyword_5


class MethodElements(AbstractParserRuleElementFinder):
    """ generated source for class MethodElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Method")
    cGroup = rule.eContents().get(1)
    cConstAssignment_0 = cGroup.eContents().get(0)
    cConstConstKeyword_0_0 = cConstAssignment_0.eContents().get(0)
    cMethodKeyword_1 = cGroup.eContents().get(1)
    cNameAssignment_2 = cGroup.eContents().get(2)
    cNameIDTerminalRuleCall_2_0 = cNameAssignment_2.eContents().get(0)
    cLeftParenthesisKeyword_3 = cGroup.eContents().get(3)
    cGroup_4 = cGroup.eContents().get(4)
    cArgumentsAssignment_4_0 = cGroup_4.eContents().get(0)
    cArgumentsMethodArgumentParserRuleCall_4_0_0 = cArgumentsAssignment_4_0.eContents().get(0)
    cGroup_4_1 = cGroup_4.eContents().get(1)
    cCommaKeyword_4_1_0 = cGroup_4_1.eContents().get(0)
    cArgumentsAssignment_4_1_1 = cGroup_4_1.eContents().get(1)
    cArgumentsMethodArgumentParserRuleCall_4_1_1_0 = cArgumentsAssignment_4_1_1.eContents().get(0)
    cRightParenthesisKeyword_5 = cGroup.eContents().get(5)
    cGroup_6 = cGroup.eContents().get(6)
    cColonKeyword_6_0 = cGroup_6.eContents().get(0)
    cReturnAssignment_6_1 = cGroup_6.eContents().get(1)
    cReturnTypeParserRuleCall_6_1_0 = cReturnAssignment_6_1.eContents().get(0)
    cCodeAssignment_7 = cGroup.eContents().get(7)
    cCodeCodeParserRuleCall_7_0 = cCodeAssignment_7.eContents().get(0)
    cSemicolonKeyword_8 = cGroup.eContents().get(8)

    # Method:
    #     const?='const'? 'method' name=ID
    #     '(' (arguments+=MethodArgument (',' arguments+=MethodArgument)*)? ')'
    #     (':' return=Type)?
    #     code=Code
    #     ';'?
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # const?='const'? 'method' name=ID
    # '(' (arguments+=MethodArgument (',' arguments+=MethodArgument)*)? ')'
    # (':' return=Type)?
    # code=Code
    # ';'?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # const?='const'?
    def getConstAssignment_0(self):
        """ generated source for method getConstAssignment_0 """
        return self.cConstAssignment_0

    # 'const'
    def getConstConstKeyword_0_0(self):
        """ generated source for method getConstConstKeyword_0_0 """
        return self.cConstConstKeyword_0_0

    # 'method'
    def getMethodKeyword_1(self):
        """ generated source for method getMethodKeyword_1 """
        return self.cMethodKeyword_1

    # name=ID
    def getNameAssignment_2(self):
        """ generated source for method getNameAssignment_2 """
        return self.cNameAssignment_2

    # ID
    def getNameIDTerminalRuleCall_2_0(self):
        """ generated source for method getNameIDTerminalRuleCall_2_0 """
        return self.cNameIDTerminalRuleCall_2_0

    # '('
    def getLeftParenthesisKeyword_3(self):
        """ generated source for method getLeftParenthesisKeyword_3 """
        return self.cLeftParenthesisKeyword_3

    # (arguments+=MethodArgument (',' arguments+=MethodArgument)*)?
    def getGroup_4(self):
        """ generated source for method getGroup_4 """
        return self.cGroup_4

    # arguments+=MethodArgument
    def getArgumentsAssignment_4_0(self):
        """ generated source for method getArgumentsAssignment_4_0 """
        return self.cArgumentsAssignment_4_0

    # MethodArgument
    def getArgumentsMethodArgumentParserRuleCall_4_0_0(self):
        """ generated source for method getArgumentsMethodArgumentParserRuleCall_4_0_0 """
        return self.cArgumentsMethodArgumentParserRuleCall_4_0_0

    # (',' arguments+=MethodArgument)*
    def getGroup_4_1(self):
        """ generated source for method getGroup_4_1 """
        return self.cGroup_4_1

    # ','
    def getCommaKeyword_4_1_0(self):
        """ generated source for method getCommaKeyword_4_1_0 """
        return self.cCommaKeyword_4_1_0

    # arguments+=MethodArgument
    def getArgumentsAssignment_4_1_1(self):
        """ generated source for method getArgumentsAssignment_4_1_1 """
        return self.cArgumentsAssignment_4_1_1

    # MethodArgument
    def getArgumentsMethodArgumentParserRuleCall_4_1_1_0(self):
        """ generated source for method getArgumentsMethodArgumentParserRuleCall_4_1_1_0 """
        return self.cArgumentsMethodArgumentParserRuleCall_4_1_1_0

    # ')'
    def getRightParenthesisKeyword_5(self):
        """ generated source for method getRightParenthesisKeyword_5 """
        return self.cRightParenthesisKeyword_5

    # (':' return=Type)?
    def getGroup_6(self):
        """ generated source for method getGroup_6 """
        return self.cGroup_6

    # ':'
    def getColonKeyword_6_0(self):
        """ generated source for method getColonKeyword_6_0 """
        return self.cColonKeyword_6_0

    # return=Type
    def getReturnAssignment_6_1(self):
        """ generated source for method getReturnAssignment_6_1 """
        return self.cReturnAssignment_6_1

    # Type
    def getReturnTypeParserRuleCall_6_1_0(self):
        """ generated source for method getReturnTypeParserRuleCall_6_1_0 """
        return self.cReturnTypeParserRuleCall_6_1_0

    # code=Code
    def getCodeAssignment_7(self):
        """ generated source for method getCodeAssignment_7 """
        return self.cCodeAssignment_7

    # Code
    def getCodeCodeParserRuleCall_7_0(self):
        """ generated source for method getCodeCodeParserRuleCall_7_0 """
        return self.cCodeCodeParserRuleCall_7_0

    # ';'?
    def getSemicolonKeyword_8(self):
        """ generated source for method getSemicolonKeyword_8 """
        return self.cSemicolonKeyword_8


class MethodArgumentElements(AbstractParserRuleElementFinder):
    """ generated source for class MethodArgumentElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.MethodArgument")
    cGroup = rule.eContents().get(1)
    cNameAssignment_0 = cGroup.eContents().get(0)
    cNameIDTerminalRuleCall_0_0 = cNameAssignment_0.eContents().get(0)
    cGroup_1 = cGroup.eContents().get(1)
    cColonKeyword_1_0 = cGroup_1.eContents().get(0)
    cTypeAssignment_1_1 = cGroup_1.eContents().get(1)
    cTypeTypeParserRuleCall_1_1_0 = cTypeAssignment_1_1.eContents().get(0)

    # MethodArgument:
    #     name=ID (':' type=Type)?
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # name=ID (':' type=Type)?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # name=ID
    def getNameAssignment_0(self):
        """ generated source for method getNameAssignment_0 """
        return self.cNameAssignment_0

    # ID
    def getNameIDTerminalRuleCall_0_0(self):
        """ generated source for method getNameIDTerminalRuleCall_0_0 """
        return self.cNameIDTerminalRuleCall_0_0

    # (':' type=Type)?
    def getGroup_1(self):
        """ generated source for method getGroup_1 """
        return self.cGroup_1

    # ':'
    def getColonKeyword_1_0(self):
        """ generated source for method getColonKeyword_1_0 """
        return self.cColonKeyword_1_0

    # type=Type
    def getTypeAssignment_1_1(self):
        """ generated source for method getTypeAssignment_1_1 """
        return self.cTypeAssignment_1_1

    # Type
    def getTypeTypeParserRuleCall_1_1_0(self):
        """ generated source for method getTypeTypeParserRuleCall_1_1_0 """
        return self.cTypeTypeParserRuleCall_1_1_0


class InputElements(AbstractParserRuleElementFinder):
    """ generated source for class InputElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Input")
    cGroup = rule.eContents().get(1)
    cAttributesAssignment_0 = cGroup.eContents().get(0)
    cAttributesAttributeParserRuleCall_0_0 = cAttributesAssignment_0.eContents().get(0)
    cMutableAssignment_1 = cGroup.eContents().get(1)
    cMutableMutableKeyword_1_0 = cMutableAssignment_1.eContents().get(0)
    cInputKeyword_2 = cGroup.eContents().get(2)
    cWidthSpecAssignment_3 = cGroup.eContents().get(3)
    cWidthSpecWidthSpecParserRuleCall_3_0 = cWidthSpecAssignment_3.eContents().get(0)
    cNameAssignment_4 = cGroup.eContents().get(4)
    cNameIDTerminalRuleCall_4_0 = cNameAssignment_4.eContents().get(0)
    cGroup_5 = cGroup.eContents().get(5)
    cColonKeyword_5_0 = cGroup_5.eContents().get(0)
    cTypeAssignment_5_1 = cGroup_5.eContents().get(1)
    cTypeTypeParserRuleCall_5_1_0 = cTypeAssignment_5_1.eContents().get(0)
    cSemicolonKeyword_6 = cGroup.eContents().get(6)

    # Input:
    #     (attributes+=Attribute)* mutable?='mutable'? 'input' (widthSpec=WidthSpec)? name=ID (':' type=Type)? ';'?;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (attributes+=Attribute)* mutable?='mutable'? 'input' (widthSpec=WidthSpec)? name=ID (':' type=Type)? ';'?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # (attributes+=Attribute)*
    def getAttributesAssignment_0(self):
        """ generated source for method getAttributesAssignment_0 """
        return self.cAttributesAssignment_0

    # Attribute
    def getAttributesAttributeParserRuleCall_0_0(self):
        """ generated source for method getAttributesAttributeParserRuleCall_0_0 """
        return self.cAttributesAttributeParserRuleCall_0_0

    # mutable?='mutable'?
    def getMutableAssignment_1(self):
        """ generated source for method getMutableAssignment_1 """
        return self.cMutableAssignment_1

    # 'mutable'
    def getMutableMutableKeyword_1_0(self):
        """ generated source for method getMutableMutableKeyword_1_0 """
        return self.cMutableMutableKeyword_1_0

    # 'input'
    def getInputKeyword_2(self):
        """ generated source for method getInputKeyword_2 """
        return self.cInputKeyword_2

    # (widthSpec=WidthSpec)?
    def getWidthSpecAssignment_3(self):
        """ generated source for method getWidthSpecAssignment_3 """
        return self.cWidthSpecAssignment_3

    # WidthSpec
    def getWidthSpecWidthSpecParserRuleCall_3_0(self):
        """ generated source for method getWidthSpecWidthSpecParserRuleCall_3_0 """
        return self.cWidthSpecWidthSpecParserRuleCall_3_0

    # name=ID
    def getNameAssignment_4(self):
        """ generated source for method getNameAssignment_4 """
        return self.cNameAssignment_4

    # ID
    def getNameIDTerminalRuleCall_4_0(self):
        """ generated source for method getNameIDTerminalRuleCall_4_0 """
        return self.cNameIDTerminalRuleCall_4_0

    # (':' type=Type)?
    def getGroup_5(self):
        """ generated source for method getGroup_5 """
        return self.cGroup_5

    # ':'
    def getColonKeyword_5_0(self):
        """ generated source for method getColonKeyword_5_0 """
        return self.cColonKeyword_5_0

    # type=Type
    def getTypeAssignment_5_1(self):
        """ generated source for method getTypeAssignment_5_1 """
        return self.cTypeAssignment_5_1

    # Type
    def getTypeTypeParserRuleCall_5_1_0(self):
        """ generated source for method getTypeTypeParserRuleCall_5_1_0 """
        return self.cTypeTypeParserRuleCall_5_1_0

    # ';'?
    def getSemicolonKeyword_6(self):
        """ generated source for method getSemicolonKeyword_6 """
        return self.cSemicolonKeyword_6


class OutputElements(AbstractParserRuleElementFinder):
    """ generated source for class OutputElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Output")
    cGroup = rule.eContents().get(1)
    cAttributesAssignment_0 = cGroup.eContents().get(0)
    cAttributesAttributeParserRuleCall_0_0 = cAttributesAssignment_0.eContents().get(0)
    cOutputKeyword_1 = cGroup.eContents().get(1)
    cWidthSpecAssignment_2 = cGroup.eContents().get(2)
    cWidthSpecWidthSpecParserRuleCall_2_0 = cWidthSpecAssignment_2.eContents().get(0)
    cNameAssignment_3 = cGroup.eContents().get(3)
    cNameIDTerminalRuleCall_3_0 = cNameAssignment_3.eContents().get(0)
    cGroup_4 = cGroup.eContents().get(4)
    cColonKeyword_4_0 = cGroup_4.eContents().get(0)
    cTypeAssignment_4_1 = cGroup_4.eContents().get(1)
    cTypeTypeParserRuleCall_4_1_0 = cTypeAssignment_4_1.eContents().get(0)
    cSemicolonKeyword_5 = cGroup.eContents().get(5)

    # Output:
    #     (attributes+=Attribute)* 'output' (widthSpec=WidthSpec)? name=ID (':' type=Type)? ';'?;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (attributes+=Attribute)* 'output' (widthSpec=WidthSpec)? name=ID (':' type=Type)? ';'?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # (attributes+=Attribute)*
    def getAttributesAssignment_0(self):
        """ generated source for method getAttributesAssignment_0 """
        return self.cAttributesAssignment_0

    # Attribute
    def getAttributesAttributeParserRuleCall_0_0(self):
        """ generated source for method getAttributesAttributeParserRuleCall_0_0 """
        return self.cAttributesAttributeParserRuleCall_0_0

    # 'output'
    def getOutputKeyword_1(self):
        """ generated source for method getOutputKeyword_1 """
        return self.cOutputKeyword_1

    # (widthSpec=WidthSpec)?
    def getWidthSpecAssignment_2(self):
        """ generated source for method getWidthSpecAssignment_2 """
        return self.cWidthSpecAssignment_2

    # WidthSpec
    def getWidthSpecWidthSpecParserRuleCall_2_0(self):
        """ generated source for method getWidthSpecWidthSpecParserRuleCall_2_0 """
        return self.cWidthSpecWidthSpecParserRuleCall_2_0

    # name=ID
    def getNameAssignment_3(self):
        """ generated source for method getNameAssignment_3 """
        return self.cNameAssignment_3

    # ID
    def getNameIDTerminalRuleCall_3_0(self):
        """ generated source for method getNameIDTerminalRuleCall_3_0 """
        return self.cNameIDTerminalRuleCall_3_0

    # (':' type=Type)?
    def getGroup_4(self):
        """ generated source for method getGroup_4 """
        return self.cGroup_4

    # ':'
    def getColonKeyword_4_0(self):
        """ generated source for method getColonKeyword_4_0 """
        return self.cColonKeyword_4_0

    # type=Type
    def getTypeAssignment_4_1(self):
        """ generated source for method getTypeAssignment_4_1 """
        return self.cTypeAssignment_4_1

    # Type
    def getTypeTypeParserRuleCall_4_1_0(self):
        """ generated source for method getTypeTypeParserRuleCall_4_1_0 """
        return self.cTypeTypeParserRuleCall_4_1_0

    # ';'?
    def getSemicolonKeyword_5(self):
        """ generated source for method getSemicolonKeyword_5 """
        return self.cSemicolonKeyword_5


class TimerElements(AbstractParserRuleElementFinder):
    """ generated source for class TimerElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Timer")
    cGroup = rule.eContents().get(1)
    cAttributesAssignment_0 = cGroup.eContents().get(0)
    cAttributesAttributeParserRuleCall_0_0 = cAttributesAssignment_0.eContents().get(0)
    cTimerKeyword_1 = cGroup.eContents().get(1)
    cNameAssignment_2 = cGroup.eContents().get(2)
    cNameIDTerminalRuleCall_2_0 = cNameAssignment_2.eContents().get(0)
    cGroup_3 = cGroup.eContents().get(3)
    cLeftParenthesisKeyword_3_0 = cGroup_3.eContents().get(0)
    cOffsetAssignment_3_1 = cGroup_3.eContents().get(1)
    cOffsetExpressionParserRuleCall_3_1_0 = cOffsetAssignment_3_1.eContents().get(0)
    cGroup_3_2 = cGroup_3.eContents().get(2)
    cCommaKeyword_3_2_0 = cGroup_3_2.eContents().get(0)
    cPeriodAssignment_3_2_1 = cGroup_3_2.eContents().get(1)
    cPeriodExpressionParserRuleCall_3_2_1_0 = cPeriodAssignment_3_2_1.eContents().get(0)
    cRightParenthesisKeyword_3_3 = cGroup_3.eContents().get(3)
    cSemicolonKeyword_4 = cGroup.eContents().get(4)

    # // Timing specification for a timer: (offset, period)
    # // Can be empty, which means (0,0) = (NOW, ONCE).
    # // E.g. (0) or (NOW) or (NOW, ONCE) or (100, 1000)
    # // The latter means fire with period 1000, offset 100.
    # Timer:
    #    (attributes+=Attribute)* 'timer' name=ID ('(' offset=Expression (',' period=Expression)? ')')? ';'?;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (attributes+=Attribute)* 'timer' name=ID ('(' offset=Expression (',' period=Expression)? ')')? ';'?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # (attributes+=Attribute)*
    def getAttributesAssignment_0(self):
        """ generated source for method getAttributesAssignment_0 """
        return self.cAttributesAssignment_0

    # Attribute
    def getAttributesAttributeParserRuleCall_0_0(self):
        """ generated source for method getAttributesAttributeParserRuleCall_0_0 """
        return self.cAttributesAttributeParserRuleCall_0_0

    # 'timer'
    def getTimerKeyword_1(self):
        """ generated source for method getTimerKeyword_1 """
        return self.cTimerKeyword_1

    # name=ID
    def getNameAssignment_2(self):
        """ generated source for method getNameAssignment_2 """
        return self.cNameAssignment_2

    # ID
    def getNameIDTerminalRuleCall_2_0(self):
        """ generated source for method getNameIDTerminalRuleCall_2_0 """
        return self.cNameIDTerminalRuleCall_2_0

    # ('(' offset=Expression (',' period=Expression)? ')')?
    def getGroup_3(self):
        """ generated source for method getGroup_3 """
        return self.cGroup_3

    # '('
    def getLeftParenthesisKeyword_3_0(self):
        """ generated source for method getLeftParenthesisKeyword_3_0 """
        return self.cLeftParenthesisKeyword_3_0

    # offset=Expression
    def getOffsetAssignment_3_1(self):
        """ generated source for method getOffsetAssignment_3_1 """
        return self.cOffsetAssignment_3_1

    # Expression
    def getOffsetExpressionParserRuleCall_3_1_0(self):
        """ generated source for method getOffsetExpressionParserRuleCall_3_1_0 """
        return self.cOffsetExpressionParserRuleCall_3_1_0

    # (',' period=Expression)?
    def getGroup_3_2(self):
        """ generated source for method getGroup_3_2 """
        return self.cGroup_3_2

    # ','
    def getCommaKeyword_3_2_0(self):
        """ generated source for method getCommaKeyword_3_2_0 """
        return self.cCommaKeyword_3_2_0

    # period=Expression
    def getPeriodAssignment_3_2_1(self):
        """ generated source for method getPeriodAssignment_3_2_1 """
        return self.cPeriodAssignment_3_2_1

    # Expression
    def getPeriodExpressionParserRuleCall_3_2_1_0(self):
        """ generated source for method getPeriodExpressionParserRuleCall_3_2_1_0 """
        return self.cPeriodExpressionParserRuleCall_3_2_1_0

    # ')'
    def getRightParenthesisKeyword_3_3(self):
        """ generated source for method getRightParenthesisKeyword_3_3 """
        return self.cRightParenthesisKeyword_3_3

    # ';'?
    def getSemicolonKeyword_4(self):
        """ generated source for method getSemicolonKeyword_4 """
        return self.cSemicolonKeyword_4


class BooleanElements(AbstractParserRuleElementFinder):
    """ generated source for class BooleanElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Boolean")
    cAlternatives = rule.eContents().get(1)
    cTRUETerminalRuleCall_0 = cAlternatives.eContents().get(0)
    cFALSETerminalRuleCall_1 = cAlternatives.eContents().get(1)

    # Boolean:
    #     TRUE | FALSE
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # TRUE | FALSE
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # TRUE
    def getTRUETerminalRuleCall_0(self):
        """ generated source for method getTRUETerminalRuleCall_0 """
        return self.cTRUETerminalRuleCall_0

    # FALSE
    def getFALSETerminalRuleCall_1(self):
        """ generated source for method getFALSETerminalRuleCall_1 """
        return self.cFALSETerminalRuleCall_1


class ModeElements(AbstractParserRuleElementFinder):
    """ generated source for class ModeElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Mode")
    cGroup = rule.eContents().get(1)
    cModeAction_0 = cGroup.eContents().get(0)
    cInitialAssignment_1 = cGroup.eContents().get(1)
    cInitialInitialKeyword_1_0 = cInitialAssignment_1.eContents().get(0)
    cModeKeyword_2 = cGroup.eContents().get(2)
    cNameAssignment_3 = cGroup.eContents().get(3)
    cNameIDTerminalRuleCall_3_0 = cNameAssignment_3.eContents().get(0)
    cLeftCurlyBracketKeyword_4 = cGroup.eContents().get(4)
    cAlternatives_5 = cGroup.eContents().get(5)
    cStateVarsAssignment_5_0 = cAlternatives_5.eContents().get(0)
    cStateVarsStateVarParserRuleCall_5_0_0 = cStateVarsAssignment_5_0.eContents().get(0)
    cTimersAssignment_5_1 = cAlternatives_5.eContents().get(1)
    cTimersTimerParserRuleCall_5_1_0 = cTimersAssignment_5_1.eContents().get(0)
    cActionsAssignment_5_2 = cAlternatives_5.eContents().get(2)
    cActionsActionParserRuleCall_5_2_0 = cActionsAssignment_5_2.eContents().get(0)
    cInstantiationsAssignment_5_3 = cAlternatives_5.eContents().get(3)
    cInstantiationsInstantiationParserRuleCall_5_3_0 = cInstantiationsAssignment_5_3.eContents().get(0)
    cConnectionsAssignment_5_4 = cAlternatives_5.eContents().get(4)
    cConnectionsConnectionParserRuleCall_5_4_0 = cConnectionsAssignment_5_4.eContents().get(0)
    cReactionsAssignment_5_5 = cAlternatives_5.eContents().get(5)
    cReactionsReactionParserRuleCall_5_5_0 = cReactionsAssignment_5_5.eContents().get(0)
    cRightCurlyBracketKeyword_6 = cGroup.eContents().get(6)

    # Mode:
    #     {Mode} (initial?='initial')? 'mode' (name=ID)?
    #     '{' (
    #         (stateVars+=StateVar) |
    #         (timers+=Timer) |
    #         (actions+=Action) |
    #         (instantiations+=Instantiation) |
    #         (connections+=Connection) |
    #         (reactions+=Reaction)
    #     )* '}';
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # {Mode} (initial?='initial')? 'mode' (name=ID)?
    # '{' (
    #     (stateVars+=StateVar) |
    #     (timers+=Timer) |
    #     (actions+=Action) |
    #     (instantiations+=Instantiation) |
    #     (connections+=Connection) |
    #     (reactions+=Reaction)
    # )* '}'
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # {Mode}
    def getModeAction_0(self):
        """ generated source for method getModeAction_0 """
        return self.cModeAction_0

    # (initial?='initial')?
    def getInitialAssignment_1(self):
        """ generated source for method getInitialAssignment_1 """
        return self.cInitialAssignment_1

    # 'initial'
    def getInitialInitialKeyword_1_0(self):
        """ generated source for method getInitialInitialKeyword_1_0 """
        return self.cInitialInitialKeyword_1_0

    # 'mode'
    def getModeKeyword_2(self):
        """ generated source for method getModeKeyword_2 """
        return self.cModeKeyword_2

    # (name=ID)?
    def getNameAssignment_3(self):
        """ generated source for method getNameAssignment_3 """
        return self.cNameAssignment_3

    # ID
    def getNameIDTerminalRuleCall_3_0(self):
        """ generated source for method getNameIDTerminalRuleCall_3_0 """
        return self.cNameIDTerminalRuleCall_3_0

    # '{'
    def getLeftCurlyBracketKeyword_4(self):
        """ generated source for method getLeftCurlyBracketKeyword_4 """
        return self.cLeftCurlyBracketKeyword_4

    # (
    #        (stateVars+=StateVar) |
    #        (timers+=Timer) |
    #        (actions+=Action) |
    #        (instantiations+=Instantiation) |
    #        (connections+=Connection) |
    #        (reactions+=Reaction)
    #    )*
    def getAlternatives_5(self):
        """ generated source for method getAlternatives_5 """
        return self.cAlternatives_5

    # (stateVars+=StateVar)
    def getStateVarsAssignment_5_0(self):
        """ generated source for method getStateVarsAssignment_5_0 """
        return self.cStateVarsAssignment_5_0

    # StateVar
    def getStateVarsStateVarParserRuleCall_5_0_0(self):
        """ generated source for method getStateVarsStateVarParserRuleCall_5_0_0 """
        return self.cStateVarsStateVarParserRuleCall_5_0_0

    # (timers+=Timer)
    def getTimersAssignment_5_1(self):
        """ generated source for method getTimersAssignment_5_1 """
        return self.cTimersAssignment_5_1

    # Timer
    def getTimersTimerParserRuleCall_5_1_0(self):
        """ generated source for method getTimersTimerParserRuleCall_5_1_0 """
        return self.cTimersTimerParserRuleCall_5_1_0

    # (actions+=Action)
    def getActionsAssignment_5_2(self):
        """ generated source for method getActionsAssignment_5_2 """
        return self.cActionsAssignment_5_2

    # Action
    def getActionsActionParserRuleCall_5_2_0(self):
        """ generated source for method getActionsActionParserRuleCall_5_2_0 """
        return self.cActionsActionParserRuleCall_5_2_0

    # (instantiations+=Instantiation)
    def getInstantiationsAssignment_5_3(self):
        """ generated source for method getInstantiationsAssignment_5_3 """
        return self.cInstantiationsAssignment_5_3

    # Instantiation
    def getInstantiationsInstantiationParserRuleCall_5_3_0(self):
        """ generated source for method getInstantiationsInstantiationParserRuleCall_5_3_0 """
        return self.cInstantiationsInstantiationParserRuleCall_5_3_0

    # (connections+=Connection)
    def getConnectionsAssignment_5_4(self):
        """ generated source for method getConnectionsAssignment_5_4 """
        return self.cConnectionsAssignment_5_4

    # Connection
    def getConnectionsConnectionParserRuleCall_5_4_0(self):
        """ generated source for method getConnectionsConnectionParserRuleCall_5_4_0 """
        return self.cConnectionsConnectionParserRuleCall_5_4_0

    # (reactions+=Reaction)
    def getReactionsAssignment_5_5(self):
        """ generated source for method getReactionsAssignment_5_5 """
        return self.cReactionsAssignment_5_5

    # Reaction
    def getReactionsReactionParserRuleCall_5_5_0(self):
        """ generated source for method getReactionsReactionParserRuleCall_5_5_0 """
        return self.cReactionsReactionParserRuleCall_5_5_0

    # '}'
    def getRightCurlyBracketKeyword_6(self):
        """ generated source for method getRightCurlyBracketKeyword_6 """
        return self.cRightCurlyBracketKeyword_6


class ActionElements(AbstractParserRuleElementFinder):
    """ generated source for class ActionElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Action")
    cGroup = rule.eContents().get(1)
    cAttributesAssignment_0 = cGroup.eContents().get(0)
    cAttributesAttributeParserRuleCall_0_0 = cAttributesAssignment_0.eContents().get(0)
    cOriginAssignment_1 = cGroup.eContents().get(1)
    cOriginActionOriginEnumRuleCall_1_0 = cOriginAssignment_1.eContents().get(0)
    cActionKeyword_2 = cGroup.eContents().get(2)
    cNameAssignment_3 = cGroup.eContents().get(3)
    cNameIDTerminalRuleCall_3_0 = cNameAssignment_3.eContents().get(0)
    cGroup_4 = cGroup.eContents().get(4)
    cLeftParenthesisKeyword_4_0 = cGroup_4.eContents().get(0)
    cMinDelayAssignment_4_1 = cGroup_4.eContents().get(1)
    cMinDelayExpressionParserRuleCall_4_1_0 = cMinDelayAssignment_4_1.eContents().get(0)
    cGroup_4_2 = cGroup_4.eContents().get(2)
    cCommaKeyword_4_2_0 = cGroup_4_2.eContents().get(0)
    cMinSpacingAssignment_4_2_1 = cGroup_4_2.eContents().get(1)
    cMinSpacingExpressionParserRuleCall_4_2_1_0 = cMinSpacingAssignment_4_2_1.eContents().get(0)
    cGroup_4_2_2 = cGroup_4_2.eContents().get(2)
    cCommaKeyword_4_2_2_0 = cGroup_4_2_2.eContents().get(0)
    cPolicyAssignment_4_2_2_1 = cGroup_4_2_2.eContents().get(1)
    cPolicySTRINGTerminalRuleCall_4_2_2_1_0 = cPolicyAssignment_4_2_2_1.eContents().get(0)
    cRightParenthesisKeyword_4_3 = cGroup_4.eContents().get(3)
    cGroup_5 = cGroup.eContents().get(5)
    cColonKeyword_5_0 = cGroup_5.eContents().get(0)
    cTypeAssignment_5_1 = cGroup_5.eContents().get(1)
    cTypeTypeParserRuleCall_5_1_0 = cTypeAssignment_5_1.eContents().get(0)
    cSemicolonKeyword_6 = cGroup.eContents().get(6)

    # // Action that has either a physical or logical origin.
    # //
    # // If the origin is logical, the minDelay is a minimum logical delay
    # // after the logical time at which schedule() is called that the
    # // action will occur. If the origin is physical, then the
    # // minDelay is a minimum logical delay after the physical time
    # // at which schedule() is called that the action will occur.
    # //
    # // For all actions, minSpacing is the minimum difference between
    # // the tags of two subsequently scheduled events.
    # Action:
    #     (attributes+=Attribute)*
    #     (origin=ActionOrigin)? 'action' name=ID
    #     ('(' minDelay=Expression (',' minSpacing=Expression (',' policy=STRING)? )? ')')?
    #     (':' type=Type)? ';'?;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (attributes+=Attribute)*
    # (origin=ActionOrigin)? 'action' name=ID
    # ('(' minDelay=Expression (',' minSpacing=Expression (',' policy=STRING)? )? ')')?
    # (':' type=Type)? ';'?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # (attributes+=Attribute)*
    def getAttributesAssignment_0(self):
        """ generated source for method getAttributesAssignment_0 """
        return self.cAttributesAssignment_0

    # Attribute
    def getAttributesAttributeParserRuleCall_0_0(self):
        """ generated source for method getAttributesAttributeParserRuleCall_0_0 """
        return self.cAttributesAttributeParserRuleCall_0_0

    # (origin=ActionOrigin)?
    def getOriginAssignment_1(self):
        """ generated source for method getOriginAssignment_1 """
        return self.cOriginAssignment_1

    # ActionOrigin
    def getOriginActionOriginEnumRuleCall_1_0(self):
        """ generated source for method getOriginActionOriginEnumRuleCall_1_0 """
        return self.cOriginActionOriginEnumRuleCall_1_0

    # 'action'
    def getActionKeyword_2(self):
        """ generated source for method getActionKeyword_2 """
        return self.cActionKeyword_2

    # name=ID
    def getNameAssignment_3(self):
        """ generated source for method getNameAssignment_3 """
        return self.cNameAssignment_3

    # ID
    def getNameIDTerminalRuleCall_3_0(self):
        """ generated source for method getNameIDTerminalRuleCall_3_0 """
        return self.cNameIDTerminalRuleCall_3_0

    # ('(' minDelay=Expression (',' minSpacing=Expression (',' policy=STRING)? )? ')')?
    def getGroup_4(self):
        """ generated source for method getGroup_4 """
        return self.cGroup_4

    # '('
    def getLeftParenthesisKeyword_4_0(self):
        """ generated source for method getLeftParenthesisKeyword_4_0 """
        return self.cLeftParenthesisKeyword_4_0

    # minDelay=Expression
    def getMinDelayAssignment_4_1(self):
        """ generated source for method getMinDelayAssignment_4_1 """
        return self.cMinDelayAssignment_4_1

    # Expression
    def getMinDelayExpressionParserRuleCall_4_1_0(self):
        """ generated source for method getMinDelayExpressionParserRuleCall_4_1_0 """
        return self.cMinDelayExpressionParserRuleCall_4_1_0

    # (',' minSpacing=Expression (',' policy=STRING)? )?
    def getGroup_4_2(self):
        """ generated source for method getGroup_4_2 """
        return self.cGroup_4_2

    # ','
    def getCommaKeyword_4_2_0(self):
        """ generated source for method getCommaKeyword_4_2_0 """
        return self.cCommaKeyword_4_2_0

    # minSpacing=Expression
    def getMinSpacingAssignment_4_2_1(self):
        """ generated source for method getMinSpacingAssignment_4_2_1 """
        return self.cMinSpacingAssignment_4_2_1

    # Expression
    def getMinSpacingExpressionParserRuleCall_4_2_1_0(self):
        """ generated source for method getMinSpacingExpressionParserRuleCall_4_2_1_0 """
        return self.cMinSpacingExpressionParserRuleCall_4_2_1_0

    # (',' policy=STRING)?
    def getGroup_4_2_2(self):
        """ generated source for method getGroup_4_2_2 """
        return self.cGroup_4_2_2

    # ','
    def getCommaKeyword_4_2_2_0(self):
        """ generated source for method getCommaKeyword_4_2_2_0 """
        return self.cCommaKeyword_4_2_2_0

    # policy=STRING
    def getPolicyAssignment_4_2_2_1(self):
        """ generated source for method getPolicyAssignment_4_2_2_1 """
        return self.cPolicyAssignment_4_2_2_1

    # STRING
    def getPolicySTRINGTerminalRuleCall_4_2_2_1_0(self):
        """ generated source for method getPolicySTRINGTerminalRuleCall_4_2_2_1_0 """
        return self.cPolicySTRINGTerminalRuleCall_4_2_2_1_0

    # ')'
    def getRightParenthesisKeyword_4_3(self):
        """ generated source for method getRightParenthesisKeyword_4_3 """
        return self.cRightParenthesisKeyword_4_3

    # (':' type=Type)?
    def getGroup_5(self):
        """ generated source for method getGroup_5 """
        return self.cGroup_5

    # ':'
    def getColonKeyword_5_0(self):
        """ generated source for method getColonKeyword_5_0 """
        return self.cColonKeyword_5_0

    # type=Type
    def getTypeAssignment_5_1(self):
        """ generated source for method getTypeAssignment_5_1 """
        return self.cTypeAssignment_5_1

    # Type
    def getTypeTypeParserRuleCall_5_1_0(self):
        """ generated source for method getTypeTypeParserRuleCall_5_1_0 """
        return self.cTypeTypeParserRuleCall_5_1_0

    # ';'?
    def getSemicolonKeyword_6(self):
        """ generated source for method getSemicolonKeyword_6 """
        return self.cSemicolonKeyword_6


class ReactionElements(AbstractParserRuleElementFinder):
    """ generated source for class ReactionElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Reaction")
    cGroup = rule.eContents().get(1)
    cAttributesAssignment_0 = cGroup.eContents().get(0)
    cAttributesAttributeParserRuleCall_0_0 = cAttributesAssignment_0.eContents().get(0)
    cAlternatives_1 = cGroup.eContents().get(1)
    cReactionKeyword_1_0 = cAlternatives_1.eContents().get(0)
    cMutationAssignment_1_1 = cAlternatives_1.eContents().get(1)
    cMutationMutationKeyword_1_1_0 = cMutationAssignment_1_1.eContents().get(0)
    cGroup_2 = cGroup.eContents().get(2)
    cLeftParenthesisKeyword_2_0 = cGroup_2.eContents().get(0)
    cGroup_2_1 = cGroup_2.eContents().get(1)
    cTriggersAssignment_2_1_0 = cGroup_2_1.eContents().get(0)
    cTriggersTriggerRefParserRuleCall_2_1_0_0 = cTriggersAssignment_2_1_0.eContents().get(0)
    cGroup_2_1_1 = cGroup_2_1.eContents().get(1)
    cCommaKeyword_2_1_1_0 = cGroup_2_1_1.eContents().get(0)
    cTriggersAssignment_2_1_1_1 = cGroup_2_1_1.eContents().get(1)
    cTriggersTriggerRefParserRuleCall_2_1_1_1_0 = cTriggersAssignment_2_1_1_1.eContents().get(0)
    cRightParenthesisKeyword_2_2 = cGroup_2.eContents().get(2)
    cGroup_3 = cGroup.eContents().get(3)
    cSourcesAssignment_3_0 = cGroup_3.eContents().get(0)
    cSourcesVarRefParserRuleCall_3_0_0 = cSourcesAssignment_3_0.eContents().get(0)
    cGroup_3_1 = cGroup_3.eContents().get(1)
    cCommaKeyword_3_1_0 = cGroup_3_1.eContents().get(0)
    cSourcesAssignment_3_1_1 = cGroup_3_1.eContents().get(1)
    cSourcesVarRefParserRuleCall_3_1_1_0 = cSourcesAssignment_3_1_1.eContents().get(0)
    cGroup_4 = cGroup.eContents().get(4)
    cHyphenMinusGreaterThanSignKeyword_4_0 = cGroup_4.eContents().get(0)
    cEffectsAssignment_4_1 = cGroup_4.eContents().get(1)
    cEffectsVarRefOrModeTransitionParserRuleCall_4_1_0 = cEffectsAssignment_4_1.eContents().get(0)
    cGroup_4_2 = cGroup_4.eContents().get(2)
    cCommaKeyword_4_2_0 = cGroup_4_2.eContents().get(0)
    cEffectsAssignment_4_2_1 = cGroup_4_2.eContents().get(1)
    cEffectsVarRefOrModeTransitionParserRuleCall_4_2_1_0 = cEffectsAssignment_4_2_1.eContents().get(0)
    cCodeAssignment_5 = cGroup.eContents().get(5)
    cCodeCodeParserRuleCall_5_0 = cCodeAssignment_5.eContents().get(0)
    cStpAssignment_6 = cGroup.eContents().get(6)
    cStpSTPParserRuleCall_6_0 = cStpAssignment_6.eContents().get(0)
    cDeadlineAssignment_7 = cGroup.eContents().get(7)
    cDeadlineDeadlineParserRuleCall_7_0 = cDeadlineAssignment_7.eContents().get(0)

    # Reaction:
    #     (attributes+=Attribute)*
    #     (('reaction') | mutation ?= 'mutation')
    #     ('(' (triggers+=TriggerRef (',' triggers+=TriggerRef)*)? ')')?
    #     (sources+=VarRef (',' sources+=VarRef)*)?
    #     ('->' effects+=VarRefOrModeTransition (',' effects+=VarRefOrModeTransition)*)?
    #     code=Code
    #     (stp=STP)?
    #     (deadline=Deadline)?;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (attributes+=Attribute)*
    # (('reaction') | mutation ?= 'mutation')
    # ('(' (triggers+=TriggerRef (',' triggers+=TriggerRef)*)? ')')?
    # (sources+=VarRef (',' sources+=VarRef)*)?
    # ('->' effects+=VarRefOrModeTransition (',' effects+=VarRefOrModeTransition)*)?
    # code=Code
    # (stp=STP)?
    # (deadline=Deadline)?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # (attributes+=Attribute)*
    def getAttributesAssignment_0(self):
        """ generated source for method getAttributesAssignment_0 """
        return self.cAttributesAssignment_0

    # Attribute
    def getAttributesAttributeParserRuleCall_0_0(self):
        """ generated source for method getAttributesAttributeParserRuleCall_0_0 """
        return self.cAttributesAttributeParserRuleCall_0_0

    # (('reaction') | mutation ?= 'mutation')
    def getAlternatives_1(self):
        """ generated source for method getAlternatives_1 """
        return self.cAlternatives_1

    # ('reaction')
    def getReactionKeyword_1_0(self):
        """ generated source for method getReactionKeyword_1_0 """
        return self.cReactionKeyword_1_0

    # mutation ?= 'mutation'
    def getMutationAssignment_1_1(self):
        """ generated source for method getMutationAssignment_1_1 """
        return self.cMutationAssignment_1_1

    # 'mutation'
    def getMutationMutationKeyword_1_1_0(self):
        """ generated source for method getMutationMutationKeyword_1_1_0 """
        return self.cMutationMutationKeyword_1_1_0

    # ('(' (triggers+=TriggerRef (',' triggers+=TriggerRef)*)? ')')?
    def getGroup_2(self):
        """ generated source for method getGroup_2 """
        return self.cGroup_2

    # '('
    def getLeftParenthesisKeyword_2_0(self):
        """ generated source for method getLeftParenthesisKeyword_2_0 """
        return self.cLeftParenthesisKeyword_2_0

    # (triggers+=TriggerRef (',' triggers+=TriggerRef)*)?
    def getGroup_2_1(self):
        """ generated source for method getGroup_2_1 """
        return self.cGroup_2_1

    # triggers+=TriggerRef
    def getTriggersAssignment_2_1_0(self):
        """ generated source for method getTriggersAssignment_2_1_0 """
        return self.cTriggersAssignment_2_1_0

    # TriggerRef
    def getTriggersTriggerRefParserRuleCall_2_1_0_0(self):
        """ generated source for method getTriggersTriggerRefParserRuleCall_2_1_0_0 """
        return self.cTriggersTriggerRefParserRuleCall_2_1_0_0

    # (',' triggers+=TriggerRef)*
    def getGroup_2_1_1(self):
        """ generated source for method getGroup_2_1_1 """
        return self.cGroup_2_1_1

    # ','
    def getCommaKeyword_2_1_1_0(self):
        """ generated source for method getCommaKeyword_2_1_1_0 """
        return self.cCommaKeyword_2_1_1_0

    # triggers+=TriggerRef
    def getTriggersAssignment_2_1_1_1(self):
        """ generated source for method getTriggersAssignment_2_1_1_1 """
        return self.cTriggersAssignment_2_1_1_1

    # TriggerRef
    def getTriggersTriggerRefParserRuleCall_2_1_1_1_0(self):
        """ generated source for method getTriggersTriggerRefParserRuleCall_2_1_1_1_0 """
        return self.cTriggersTriggerRefParserRuleCall_2_1_1_1_0

    # ')'
    def getRightParenthesisKeyword_2_2(self):
        """ generated source for method getRightParenthesisKeyword_2_2 """
        return self.cRightParenthesisKeyword_2_2

    # (sources+=VarRef (',' sources+=VarRef)*)?
    def getGroup_3(self):
        """ generated source for method getGroup_3 """
        return self.cGroup_3

    # sources+=VarRef
    def getSourcesAssignment_3_0(self):
        """ generated source for method getSourcesAssignment_3_0 """
        return self.cSourcesAssignment_3_0

    # VarRef
    def getSourcesVarRefParserRuleCall_3_0_0(self):
        """ generated source for method getSourcesVarRefParserRuleCall_3_0_0 """
        return self.cSourcesVarRefParserRuleCall_3_0_0

    # (',' sources+=VarRef)*
    def getGroup_3_1(self):
        """ generated source for method getGroup_3_1 """
        return self.cGroup_3_1

    # ','
    def getCommaKeyword_3_1_0(self):
        """ generated source for method getCommaKeyword_3_1_0 """
        return self.cCommaKeyword_3_1_0

    # sources+=VarRef
    def getSourcesAssignment_3_1_1(self):
        """ generated source for method getSourcesAssignment_3_1_1 """
        return self.cSourcesAssignment_3_1_1

    # VarRef
    def getSourcesVarRefParserRuleCall_3_1_1_0(self):
        """ generated source for method getSourcesVarRefParserRuleCall_3_1_1_0 """
        return self.cSourcesVarRefParserRuleCall_3_1_1_0

    # ('->' effects+=VarRefOrModeTransition (',' effects+=VarRefOrModeTransition)*)?
    def getGroup_4(self):
        """ generated source for method getGroup_4 """
        return self.cGroup_4

    # '->'
    def getHyphenMinusGreaterThanSignKeyword_4_0(self):
        """ generated source for method getHyphenMinusGreaterThanSignKeyword_4_0 """
        return self.cHyphenMinusGreaterThanSignKeyword_4_0

    # effects+=VarRefOrModeTransition
    def getEffectsAssignment_4_1(self):
        """ generated source for method getEffectsAssignment_4_1 """
        return self.cEffectsAssignment_4_1

    # VarRefOrModeTransition
    def getEffectsVarRefOrModeTransitionParserRuleCall_4_1_0(self):
        """ generated source for method getEffectsVarRefOrModeTransitionParserRuleCall_4_1_0 """
        return self.cEffectsVarRefOrModeTransitionParserRuleCall_4_1_0

    # (',' effects+=VarRefOrModeTransition)*
    def getGroup_4_2(self):
        """ generated source for method getGroup_4_2 """
        return self.cGroup_4_2

    # ','
    def getCommaKeyword_4_2_0(self):
        """ generated source for method getCommaKeyword_4_2_0 """
        return self.cCommaKeyword_4_2_0

    # effects+=VarRefOrModeTransition
    def getEffectsAssignment_4_2_1(self):
        """ generated source for method getEffectsAssignment_4_2_1 """
        return self.cEffectsAssignment_4_2_1

    # VarRefOrModeTransition
    def getEffectsVarRefOrModeTransitionParserRuleCall_4_2_1_0(self):
        """ generated source for method getEffectsVarRefOrModeTransitionParserRuleCall_4_2_1_0 """
        return self.cEffectsVarRefOrModeTransitionParserRuleCall_4_2_1_0

    # code=Code
    def getCodeAssignment_5(self):
        """ generated source for method getCodeAssignment_5 """
        return self.cCodeAssignment_5

    # Code
    def getCodeCodeParserRuleCall_5_0(self):
        """ generated source for method getCodeCodeParserRuleCall_5_0 """
        return self.cCodeCodeParserRuleCall_5_0

    # (stp=STP)?
    def getStpAssignment_6(self):
        """ generated source for method getStpAssignment_6 """
        return self.cStpAssignment_6

    # STP
    def getStpSTPParserRuleCall_6_0(self):
        """ generated source for method getStpSTPParserRuleCall_6_0 """
        return self.cStpSTPParserRuleCall_6_0

    # (deadline=Deadline)?
    def getDeadlineAssignment_7(self):
        """ generated source for method getDeadlineAssignment_7 """
        return self.cDeadlineAssignment_7

    # Deadline
    def getDeadlineDeadlineParserRuleCall_7_0(self):
        """ generated source for method getDeadlineDeadlineParserRuleCall_7_0 """
        return self.cDeadlineDeadlineParserRuleCall_7_0


class TriggerRefElements(AbstractParserRuleElementFinder):
    """ generated source for class TriggerRefElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.TriggerRef")
    cAlternatives = rule.eContents().get(1)
    cBuiltinTriggerRefParserRuleCall_0 = cAlternatives.eContents().get(0)
    cVarRefParserRuleCall_1 = cAlternatives.eContents().get(1)

    # TriggerRef:
    #     BuiltinTriggerRef | VarRef;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # BuiltinTriggerRef | VarRef
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # BuiltinTriggerRef
    def getBuiltinTriggerRefParserRuleCall_0(self):
        """ generated source for method getBuiltinTriggerRefParserRuleCall_0 """
        return self.cBuiltinTriggerRefParserRuleCall_0

    # VarRef
    def getVarRefParserRuleCall_1(self):
        """ generated source for method getVarRefParserRuleCall_1 """
        return self.cVarRefParserRuleCall_1


class BuiltinTriggerRefElements(AbstractParserRuleElementFinder):
    """ generated source for class BuiltinTriggerRefElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.BuiltinTriggerRef")
    cTypeAssignment = rule.eContents().get(1)
    cTypeBuiltinTriggerEnumRuleCall_0 = cTypeAssignment.eContents().get(0)

    # BuiltinTriggerRef:
    #     type = BuiltinTrigger;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # type = BuiltinTrigger
    def getTypeAssignment(self):
        """ generated source for method getTypeAssignment """
        return self.cTypeAssignment

    # BuiltinTrigger
    def getTypeBuiltinTriggerEnumRuleCall_0(self):
        """ generated source for method getTypeBuiltinTriggerEnumRuleCall_0 """
        return self.cTypeBuiltinTriggerEnumRuleCall_0


class DeadlineElements(AbstractParserRuleElementFinder):
    """ generated source for class DeadlineElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Deadline")
    cGroup = rule.eContents().get(1)
    cDeadlineKeyword_0 = cGroup.eContents().get(0)
    cLeftParenthesisKeyword_1 = cGroup.eContents().get(1)
    cDelayAssignment_2 = cGroup.eContents().get(2)
    cDelayExpressionParserRuleCall_2_0 = cDelayAssignment_2.eContents().get(0)
    cRightParenthesisKeyword_3 = cGroup.eContents().get(3)
    cCodeAssignment_4 = cGroup.eContents().get(4)
    cCodeCodeParserRuleCall_4_0 = cCodeAssignment_4.eContents().get(0)

    # Deadline:
    #     'deadline' '(' delay=Expression ')' code=Code;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # 'deadline' '(' delay=Expression ')' code=Code
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # 'deadline'
    def getDeadlineKeyword_0(self):
        """ generated source for method getDeadlineKeyword_0 """
        return self.cDeadlineKeyword_0

    # '('
    def getLeftParenthesisKeyword_1(self):
        """ generated source for method getLeftParenthesisKeyword_1 """
        return self.cLeftParenthesisKeyword_1

    # delay=Expression
    def getDelayAssignment_2(self):
        """ generated source for method getDelayAssignment_2 """
        return self.cDelayAssignment_2

    # Expression
    def getDelayExpressionParserRuleCall_2_0(self):
        """ generated source for method getDelayExpressionParserRuleCall_2_0 """
        return self.cDelayExpressionParserRuleCall_2_0

    # ')'
    def getRightParenthesisKeyword_3(self):
        """ generated source for method getRightParenthesisKeyword_3 """
        return self.cRightParenthesisKeyword_3

    # code=Code
    def getCodeAssignment_4(self):
        """ generated source for method getCodeAssignment_4 """
        return self.cCodeAssignment_4

    # Code
    def getCodeCodeParserRuleCall_4_0(self):
        """ generated source for method getCodeCodeParserRuleCall_4_0 """
        return self.cCodeCodeParserRuleCall_4_0


class STPElements(AbstractParserRuleElementFinder):
    """ generated source for class STPElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.STP")
    cGroup = rule.eContents().get(1)
    cSTPKeyword_0 = cGroup.eContents().get(0)
    cLeftParenthesisKeyword_1 = cGroup.eContents().get(1)
    cValueAssignment_2 = cGroup.eContents().get(2)
    cValueExpressionParserRuleCall_2_0 = cValueAssignment_2.eContents().get(0)
    cRightParenthesisKeyword_3 = cGroup.eContents().get(3)
    cCodeAssignment_4 = cGroup.eContents().get(4)
    cCodeCodeParserRuleCall_4_0 = cCodeAssignment_4.eContents().get(0)

    # STP:
    #     'STP' '(' value=Expression ')' code=Code;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # 'STP' '(' value=Expression ')' code=Code
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # 'STP'
    def getSTPKeyword_0(self):
        """ generated source for method getSTPKeyword_0 """
        return self.cSTPKeyword_0

    # '('
    def getLeftParenthesisKeyword_1(self):
        """ generated source for method getLeftParenthesisKeyword_1 """
        return self.cLeftParenthesisKeyword_1

    # value=Expression
    def getValueAssignment_2(self):
        """ generated source for method getValueAssignment_2 """
        return self.cValueAssignment_2

    # Expression
    def getValueExpressionParserRuleCall_2_0(self):
        """ generated source for method getValueExpressionParserRuleCall_2_0 """
        return self.cValueExpressionParserRuleCall_2_0

    # ')'
    def getRightParenthesisKeyword_3(self):
        """ generated source for method getRightParenthesisKeyword_3 """
        return self.cRightParenthesisKeyword_3

    # code=Code
    def getCodeAssignment_4(self):
        """ generated source for method getCodeAssignment_4 """
        return self.cCodeAssignment_4

    # Code
    def getCodeCodeParserRuleCall_4_0(self):
        """ generated source for method getCodeCodeParserRuleCall_4_0 """
        return self.cCodeCodeParserRuleCall_4_0


class PreambleElements(AbstractParserRuleElementFinder):
    """ generated source for class PreambleElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Preamble")
    cGroup = rule.eContents().get(1)
    cVisibilityAssignment_0 = cGroup.eContents().get(0)
    cVisibilityVisibilityEnumRuleCall_0_0 = cVisibilityAssignment_0.eContents().get(0)
    cPreambleKeyword_1 = cGroup.eContents().get(1)
    cCodeAssignment_2 = cGroup.eContents().get(2)
    cCodeCodeParserRuleCall_2_0 = cCodeAssignment_2.eContents().get(0)

    # Preamble:
    #     (visibility=Visibility)? 'preamble' code=Code;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (visibility=Visibility)? 'preamble' code=Code
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # (visibility=Visibility)?
    def getVisibilityAssignment_0(self):
        """ generated source for method getVisibilityAssignment_0 """
        return self.cVisibilityAssignment_0

    # Visibility
    def getVisibilityVisibilityEnumRuleCall_0_0(self):
        """ generated source for method getVisibilityVisibilityEnumRuleCall_0_0 """
        return self.cVisibilityVisibilityEnumRuleCall_0_0

    # 'preamble'
    def getPreambleKeyword_1(self):
        """ generated source for method getPreambleKeyword_1 """
        return self.cPreambleKeyword_1

    # code=Code
    def getCodeAssignment_2(self):
        """ generated source for method getCodeAssignment_2 """
        return self.cCodeAssignment_2

    # Code
    def getCodeCodeParserRuleCall_2_0(self):
        """ generated source for method getCodeCodeParserRuleCall_2_0 """
        return self.cCodeCodeParserRuleCall_2_0


class InstantiationElements(AbstractParserRuleElementFinder):
    """ generated source for class InstantiationElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Instantiation")
    cGroup = rule.eContents().get(1)
    cNameAssignment_0 = cGroup.eContents().get(0)
    cNameIDTerminalRuleCall_0_0 = cNameAssignment_0.eContents().get(0)
    cEqualsSignKeyword_1 = cGroup.eContents().get(1)
    cNewKeyword_2 = cGroup.eContents().get(2)
    cWidthSpecAssignment_3 = cGroup.eContents().get(3)
    cWidthSpecWidthSpecParserRuleCall_3_0 = cWidthSpecAssignment_3.eContents().get(0)
    cReactorClassAssignment_4 = cGroup.eContents().get(4)
    cReactorClassReactorDeclCrossReference_4_0 = cReactorClassAssignment_4.eContents().get(0)
    cReactorClassReactorDeclIDTerminalRuleCall_4_0_1 = cReactorClassReactorDeclCrossReference_4_0.eContents().get(1)
    cGroup_5 = cGroup.eContents().get(5)
    cLessThanSignKeyword_5_0 = cGroup_5.eContents().get(0)
    cTypeParmsAssignment_5_1 = cGroup_5.eContents().get(1)
    cTypeParmsTypeParmParserRuleCall_5_1_0 = cTypeParmsAssignment_5_1.eContents().get(0)
    cGroup_5_2 = cGroup_5.eContents().get(2)
    cCommaKeyword_5_2_0 = cGroup_5_2.eContents().get(0)
    cTypeParmsAssignment_5_2_1 = cGroup_5_2.eContents().get(1)
    cTypeParmsTypeParmParserRuleCall_5_2_1_0 = cTypeParmsAssignment_5_2_1.eContents().get(0)
    cGreaterThanSignKeyword_5_3 = cGroup_5.eContents().get(3)
    cLeftParenthesisKeyword_6 = cGroup.eContents().get(6)
    cGroup_7 = cGroup.eContents().get(7)
    cParametersAssignment_7_0 = cGroup_7.eContents().get(0)
    cParametersAssignmentParserRuleCall_7_0_0 = cParametersAssignment_7_0.eContents().get(0)
    cGroup_7_1 = cGroup_7.eContents().get(1)
    cCommaKeyword_7_1_0 = cGroup_7_1.eContents().get(0)
    cParametersAssignment_7_1_1 = cGroup_7_1.eContents().get(1)
    cParametersAssignmentParserRuleCall_7_1_1_0 = cParametersAssignment_7_1_1.eContents().get(0)
    cRightParenthesisKeyword_8 = cGroup.eContents().get(8)
    cAlternatives_9 = cGroup.eContents().get(9)
    cGroup_9_0 = cAlternatives_9.eContents().get(0)
    cAtKeyword_9_0_0 = cGroup_9_0.eContents().get(0)
    cHostAssignment_9_0_1 = cGroup_9_0.eContents().get(1)
    cHostHostParserRuleCall_9_0_1_0 = cHostAssignment_9_0_1.eContents().get(0)
    cSemicolonKeyword_9_0_2 = cGroup_9_0.eContents().get(2)
    cSemicolonKeyword_9_1 = cAlternatives_9.eContents().get(1)

    # Instantiation:
    #     name=ID '=' 'new' (widthSpec=WidthSpec)?
    #     reactorClass=[ReactorDecl] ('<' typeParms+=TypeParm (',' typeParms+=TypeParm)* '>')? '('
    #     (parameters+=Assignment (',' parameters+=Assignment)*)?
    #     ')' (('at' host=Host ';') | ';'?);
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # name=ID '=' 'new' (widthSpec=WidthSpec)?
    # reactorClass=[ReactorDecl] ('<' typeParms+=TypeParm (',' typeParms+=TypeParm)* '>')? '('
    # (parameters+=Assignment (',' parameters+=Assignment)*)?
    # ')' (('at' host=Host ';') | ';'?)
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # name=ID
    def getNameAssignment_0(self):
        """ generated source for method getNameAssignment_0 """
        return self.cNameAssignment_0

    # ID
    def getNameIDTerminalRuleCall_0_0(self):
        """ generated source for method getNameIDTerminalRuleCall_0_0 """
        return self.cNameIDTerminalRuleCall_0_0

    # '='
    def getEqualsSignKeyword_1(self):
        """ generated source for method getEqualsSignKeyword_1 """
        return self.cEqualsSignKeyword_1

    # 'new'
    def getNewKeyword_2(self):
        """ generated source for method getNewKeyword_2 """
        return self.cNewKeyword_2

    # (widthSpec=WidthSpec)?
    def getWidthSpecAssignment_3(self):
        """ generated source for method getWidthSpecAssignment_3 """
        return self.cWidthSpecAssignment_3

    # WidthSpec
    def getWidthSpecWidthSpecParserRuleCall_3_0(self):
        """ generated source for method getWidthSpecWidthSpecParserRuleCall_3_0 """
        return self.cWidthSpecWidthSpecParserRuleCall_3_0

    # reactorClass=[ReactorDecl]
    def getReactorClassAssignment_4(self):
        """ generated source for method getReactorClassAssignment_4 """
        return self.cReactorClassAssignment_4

    # [ReactorDecl]
    def getReactorClassReactorDeclCrossReference_4_0(self):
        """ generated source for method getReactorClassReactorDeclCrossReference_4_0 """
        return self.cReactorClassReactorDeclCrossReference_4_0

    # ID
    def getReactorClassReactorDeclIDTerminalRuleCall_4_0_1(self):
        """ generated source for method getReactorClassReactorDeclIDTerminalRuleCall_4_0_1 """
        return self.cReactorClassReactorDeclIDTerminalRuleCall_4_0_1

    # ('<' typeParms+=TypeParm (',' typeParms+=TypeParm)* '>')?
    def getGroup_5(self):
        """ generated source for method getGroup_5 """
        return self.cGroup_5

    # '<'
    def getLessThanSignKeyword_5_0(self):
        """ generated source for method getLessThanSignKeyword_5_0 """
        return self.cLessThanSignKeyword_5_0

    # typeParms+=TypeParm
    def getTypeParmsAssignment_5_1(self):
        """ generated source for method getTypeParmsAssignment_5_1 """
        return self.cTypeParmsAssignment_5_1

    # TypeParm
    def getTypeParmsTypeParmParserRuleCall_5_1_0(self):
        """ generated source for method getTypeParmsTypeParmParserRuleCall_5_1_0 """
        return self.cTypeParmsTypeParmParserRuleCall_5_1_0

    # (',' typeParms+=TypeParm)*
    def getGroup_5_2(self):
        """ generated source for method getGroup_5_2 """
        return self.cGroup_5_2

    # ','
    def getCommaKeyword_5_2_0(self):
        """ generated source for method getCommaKeyword_5_2_0 """
        return self.cCommaKeyword_5_2_0

    # typeParms+=TypeParm
    def getTypeParmsAssignment_5_2_1(self):
        """ generated source for method getTypeParmsAssignment_5_2_1 """
        return self.cTypeParmsAssignment_5_2_1

    # TypeParm
    def getTypeParmsTypeParmParserRuleCall_5_2_1_0(self):
        """ generated source for method getTypeParmsTypeParmParserRuleCall_5_2_1_0 """
        return self.cTypeParmsTypeParmParserRuleCall_5_2_1_0

    # '>'
    def getGreaterThanSignKeyword_5_3(self):
        """ generated source for method getGreaterThanSignKeyword_5_3 """
        return self.cGreaterThanSignKeyword_5_3

    # '('
    def getLeftParenthesisKeyword_6(self):
        """ generated source for method getLeftParenthesisKeyword_6 """
        return self.cLeftParenthesisKeyword_6

    # (parameters+=Assignment (',' parameters+=Assignment)*)?
    def getGroup_7(self):
        """ generated source for method getGroup_7 """
        return self.cGroup_7

    # parameters+=Assignment
    def getParametersAssignment_7_0(self):
        """ generated source for method getParametersAssignment_7_0 """
        return self.cParametersAssignment_7_0

    # Assignment
    def getParametersAssignmentParserRuleCall_7_0_0(self):
        """ generated source for method getParametersAssignmentParserRuleCall_7_0_0 """
        return self.cParametersAssignmentParserRuleCall_7_0_0

    # (',' parameters+=Assignment)*
    def getGroup_7_1(self):
        """ generated source for method getGroup_7_1 """
        return self.cGroup_7_1

    # ','
    def getCommaKeyword_7_1_0(self):
        """ generated source for method getCommaKeyword_7_1_0 """
        return self.cCommaKeyword_7_1_0

    # parameters+=Assignment
    def getParametersAssignment_7_1_1(self):
        """ generated source for method getParametersAssignment_7_1_1 """
        return self.cParametersAssignment_7_1_1

    # Assignment
    def getParametersAssignmentParserRuleCall_7_1_1_0(self):
        """ generated source for method getParametersAssignmentParserRuleCall_7_1_1_0 """
        return self.cParametersAssignmentParserRuleCall_7_1_1_0

    # ')'
    def getRightParenthesisKeyword_8(self):
        """ generated source for method getRightParenthesisKeyword_8 """
        return self.cRightParenthesisKeyword_8

    # (('at' host=Host ';') | ';'?)
    def getAlternatives_9(self):
        """ generated source for method getAlternatives_9 """
        return self.cAlternatives_9

    # ('at' host=Host ';')
    def getGroup_9_0(self):
        """ generated source for method getGroup_9_0 """
        return self.cGroup_9_0

    # 'at'
    def getAtKeyword_9_0_0(self):
        """ generated source for method getAtKeyword_9_0_0 """
        return self.cAtKeyword_9_0_0

    # host=Host
    def getHostAssignment_9_0_1(self):
        """ generated source for method getHostAssignment_9_0_1 """
        return self.cHostAssignment_9_0_1

    # Host
    def getHostHostParserRuleCall_9_0_1_0(self):
        """ generated source for method getHostHostParserRuleCall_9_0_1_0 """
        return self.cHostHostParserRuleCall_9_0_1_0

    # ';'
    def getSemicolonKeyword_9_0_2(self):
        """ generated source for method getSemicolonKeyword_9_0_2 """
        return self.cSemicolonKeyword_9_0_2

    # ';'?
    def getSemicolonKeyword_9_1(self):
        """ generated source for method getSemicolonKeyword_9_1 """
        return self.cSemicolonKeyword_9_1


class ConnectionElements(AbstractParserRuleElementFinder):
    """ generated source for class ConnectionElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Connection")
    cGroup = rule.eContents().get(1)
    cAlternatives_0 = cGroup.eContents().get(0)
    cGroup_0_0 = cAlternatives_0.eContents().get(0)
    cLeftPortsAssignment_0_0_0 = cGroup_0_0.eContents().get(0)
    cLeftPortsVarRefParserRuleCall_0_0_0_0 = cLeftPortsAssignment_0_0_0.eContents().get(0)
    cGroup_0_0_1 = cGroup_0_0.eContents().get(1)
    cCommaKeyword_0_0_1_0 = cGroup_0_0_1.eContents().get(0)
    cLeftPortsAssignment_0_0_1_1 = cGroup_0_0_1.eContents().get(1)
    cLeftPortsVarRefParserRuleCall_0_0_1_1_0 = cLeftPortsAssignment_0_0_1_1.eContents().get(0)
    cGroup_0_1 = cAlternatives_0.eContents().get(1)
    cLeftParenthesisKeyword_0_1_0 = cGroup_0_1.eContents().get(0)
    cLeftPortsAssignment_0_1_1 = cGroup_0_1.eContents().get(1)
    cLeftPortsVarRefParserRuleCall_0_1_1_0 = cLeftPortsAssignment_0_1_1.eContents().get(0)
    cGroup_0_1_2 = cGroup_0_1.eContents().get(2)
    cCommaKeyword_0_1_2_0 = cGroup_0_1_2.eContents().get(0)
    cLeftPortsAssignment_0_1_2_1 = cGroup_0_1_2.eContents().get(1)
    cLeftPortsVarRefParserRuleCall_0_1_2_1_0 = cLeftPortsAssignment_0_1_2_1.eContents().get(0)
    cRightParenthesisKeyword_0_1_3 = cGroup_0_1.eContents().get(3)
    cIteratedAssignment_0_1_4 = cGroup_0_1.eContents().get(4)
    cIteratedPlusSignKeyword_0_1_4_0 = cIteratedAssignment_0_1_4.eContents().get(0)
    cAlternatives_1 = cGroup.eContents().get(1)
    cHyphenMinusGreaterThanSignKeyword_1_0 = cAlternatives_1.eContents().get(0)
    cPhysicalAssignment_1_1 = cAlternatives_1.eContents().get(1)
    cPhysicalTildeGreaterThanSignKeyword_1_1_0 = cPhysicalAssignment_1_1.eContents().get(0)
    cRightPortsAssignment_2 = cGroup.eContents().get(2)
    cRightPortsVarRefParserRuleCall_2_0 = cRightPortsAssignment_2.eContents().get(0)
    cGroup_3 = cGroup.eContents().get(3)
    cCommaKeyword_3_0 = cGroup_3.eContents().get(0)
    cRightPortsAssignment_3_1 = cGroup_3.eContents().get(1)
    cRightPortsVarRefParserRuleCall_3_1_0 = cRightPortsAssignment_3_1.eContents().get(0)
    cGroup_4 = cGroup.eContents().get(4)
    cAfterKeyword_4_0 = cGroup_4.eContents().get(0)
    cDelayAssignment_4_1 = cGroup_4.eContents().get(1)
    cDelayExpressionParserRuleCall_4_1_0 = cDelayAssignment_4_1.eContents().get(0)
    cSerializerAssignment_5 = cGroup.eContents().get(5)
    cSerializerSerializerParserRuleCall_5_0 = cSerializerAssignment_5.eContents().get(0)
    cSemicolonKeyword_6 = cGroup.eContents().get(6)

    # Connection:
    #     ((leftPorts += VarRef (',' leftPorts += VarRef)*)
    #     | ( '(' leftPorts += VarRef (',' leftPorts += VarRef)* ')' iterated ?= '+'?))
    #     ('->' | physical?='~>')
    #     rightPorts += VarRef (',' rightPorts += VarRef)*
    #     ('after' delay=Expression)?
    #     (serializer=Serializer)?
    #     ';'?
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # ((leftPorts += VarRef (',' leftPorts += VarRef)*)
    # | ( '(' leftPorts += VarRef (',' leftPorts += VarRef)* ')' iterated ?= '+'?))
    # ('->' | physical?='~>')
    # rightPorts += VarRef (',' rightPorts += VarRef)*
    # ('after' delay=Expression)?
    # (serializer=Serializer)?
    # ';'?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # ((leftPorts += VarRef (',' leftPorts += VarRef)*)
    # | ( '(' leftPorts += VarRef (',' leftPorts += VarRef)* ')' iterated ?= '+'?))
    def getAlternatives_0(self):
        """ generated source for method getAlternatives_0 """
        return self.cAlternatives_0

    # (leftPorts += VarRef (',' leftPorts += VarRef)*)
    def getGroup_0_0(self):
        """ generated source for method getGroup_0_0 """
        return self.cGroup_0_0

    # leftPorts += VarRef
    def getLeftPortsAssignment_0_0_0(self):
        """ generated source for method getLeftPortsAssignment_0_0_0 """
        return self.cLeftPortsAssignment_0_0_0

    # VarRef
    def getLeftPortsVarRefParserRuleCall_0_0_0_0(self):
        """ generated source for method getLeftPortsVarRefParserRuleCall_0_0_0_0 """
        return self.cLeftPortsVarRefParserRuleCall_0_0_0_0

    # (',' leftPorts += VarRef)*
    def getGroup_0_0_1(self):
        """ generated source for method getGroup_0_0_1 """
        return self.cGroup_0_0_1

    # ','
    def getCommaKeyword_0_0_1_0(self):
        """ generated source for method getCommaKeyword_0_0_1_0 """
        return self.cCommaKeyword_0_0_1_0

    # leftPorts += VarRef
    def getLeftPortsAssignment_0_0_1_1(self):
        """ generated source for method getLeftPortsAssignment_0_0_1_1 """
        return self.cLeftPortsAssignment_0_0_1_1

    # VarRef
    def getLeftPortsVarRefParserRuleCall_0_0_1_1_0(self):
        """ generated source for method getLeftPortsVarRefParserRuleCall_0_0_1_1_0 """
        return self.cLeftPortsVarRefParserRuleCall_0_0_1_1_0

    # ( '(' leftPorts += VarRef (',' leftPorts += VarRef)* ')' iterated ?= '+'?)
    def getGroup_0_1(self):
        """ generated source for method getGroup_0_1 """
        return self.cGroup_0_1

    # '('
    def getLeftParenthesisKeyword_0_1_0(self):
        """ generated source for method getLeftParenthesisKeyword_0_1_0 """
        return self.cLeftParenthesisKeyword_0_1_0

    # leftPorts += VarRef
    def getLeftPortsAssignment_0_1_1(self):
        """ generated source for method getLeftPortsAssignment_0_1_1 """
        return self.cLeftPortsAssignment_0_1_1

    # VarRef
    def getLeftPortsVarRefParserRuleCall_0_1_1_0(self):
        """ generated source for method getLeftPortsVarRefParserRuleCall_0_1_1_0 """
        return self.cLeftPortsVarRefParserRuleCall_0_1_1_0

    # (',' leftPorts += VarRef)*
    def getGroup_0_1_2(self):
        """ generated source for method getGroup_0_1_2 """
        return self.cGroup_0_1_2

    # ','
    def getCommaKeyword_0_1_2_0(self):
        """ generated source for method getCommaKeyword_0_1_2_0 """
        return self.cCommaKeyword_0_1_2_0

    # leftPorts += VarRef
    def getLeftPortsAssignment_0_1_2_1(self):
        """ generated source for method getLeftPortsAssignment_0_1_2_1 """
        return self.cLeftPortsAssignment_0_1_2_1

    # VarRef
    def getLeftPortsVarRefParserRuleCall_0_1_2_1_0(self):
        """ generated source for method getLeftPortsVarRefParserRuleCall_0_1_2_1_0 """
        return self.cLeftPortsVarRefParserRuleCall_0_1_2_1_0

    # ')'
    def getRightParenthesisKeyword_0_1_3(self):
        """ generated source for method getRightParenthesisKeyword_0_1_3 """
        return self.cRightParenthesisKeyword_0_1_3

    # iterated ?= '+'?
    def getIteratedAssignment_0_1_4(self):
        """ generated source for method getIteratedAssignment_0_1_4 """
        return self.cIteratedAssignment_0_1_4

    # '+'
    def getIteratedPlusSignKeyword_0_1_4_0(self):
        """ generated source for method getIteratedPlusSignKeyword_0_1_4_0 """
        return self.cIteratedPlusSignKeyword_0_1_4_0

    # ('->' | physical?='~>')
    def getAlternatives_1(self):
        """ generated source for method getAlternatives_1 """
        return self.cAlternatives_1

    # '->'
    def getHyphenMinusGreaterThanSignKeyword_1_0(self):
        """ generated source for method getHyphenMinusGreaterThanSignKeyword_1_0 """
        return self.cHyphenMinusGreaterThanSignKeyword_1_0

    # physical?='~>'
    def getPhysicalAssignment_1_1(self):
        """ generated source for method getPhysicalAssignment_1_1 """
        return self.cPhysicalAssignment_1_1

    # '~>'
    def getPhysicalTildeGreaterThanSignKeyword_1_1_0(self):
        """ generated source for method getPhysicalTildeGreaterThanSignKeyword_1_1_0 """
        return self.cPhysicalTildeGreaterThanSignKeyword_1_1_0

    # rightPorts += VarRef
    def getRightPortsAssignment_2(self):
        """ generated source for method getRightPortsAssignment_2 """
        return self.cRightPortsAssignment_2

    # VarRef
    def getRightPortsVarRefParserRuleCall_2_0(self):
        """ generated source for method getRightPortsVarRefParserRuleCall_2_0 """
        return self.cRightPortsVarRefParserRuleCall_2_0

    # (',' rightPorts += VarRef)*
    def getGroup_3(self):
        """ generated source for method getGroup_3 """
        return self.cGroup_3

    # ','
    def getCommaKeyword_3_0(self):
        """ generated source for method getCommaKeyword_3_0 """
        return self.cCommaKeyword_3_0

    # rightPorts += VarRef
    def getRightPortsAssignment_3_1(self):
        """ generated source for method getRightPortsAssignment_3_1 """
        return self.cRightPortsAssignment_3_1

    # VarRef
    def getRightPortsVarRefParserRuleCall_3_1_0(self):
        """ generated source for method getRightPortsVarRefParserRuleCall_3_1_0 """
        return self.cRightPortsVarRefParserRuleCall_3_1_0

    # ('after' delay=Expression)?
    def getGroup_4(self):
        """ generated source for method getGroup_4 """
        return self.cGroup_4

    # 'after'
    def getAfterKeyword_4_0(self):
        """ generated source for method getAfterKeyword_4_0 """
        return self.cAfterKeyword_4_0

    # delay=Expression
    def getDelayAssignment_4_1(self):
        """ generated source for method getDelayAssignment_4_1 """
        return self.cDelayAssignment_4_1

    # Expression
    def getDelayExpressionParserRuleCall_4_1_0(self):
        """ generated source for method getDelayExpressionParserRuleCall_4_1_0 """
        return self.cDelayExpressionParserRuleCall_4_1_0

    # (serializer=Serializer)?
    def getSerializerAssignment_5(self):
        """ generated source for method getSerializerAssignment_5 """
        return self.cSerializerAssignment_5

    # Serializer
    def getSerializerSerializerParserRuleCall_5_0(self):
        """ generated source for method getSerializerSerializerParserRuleCall_5_0 """
        return self.cSerializerSerializerParserRuleCall_5_0

    # ';'?
    def getSemicolonKeyword_6(self):
        """ generated source for method getSemicolonKeyword_6 """
        return self.cSemicolonKeyword_6


class SerializerElements(AbstractParserRuleElementFinder):
    """ generated source for class SerializerElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Serializer")
    cGroup = rule.eContents().get(1)
    cSerializerKeyword_0 = cGroup.eContents().get(0)
    cTypeAssignment_1 = cGroup.eContents().get(1)
    cTypeSTRINGTerminalRuleCall_1_0 = cTypeAssignment_1.eContents().get(0)

    # // Chooses the serializer to use for the connection
    # Serializer:
    #     'serializer' type=STRING
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # 'serializer' type=STRING
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # 'serializer'
    def getSerializerKeyword_0(self):
        """ generated source for method getSerializerKeyword_0 """
        return self.cSerializerKeyword_0

    # type=STRING
    def getTypeAssignment_1(self):
        """ generated source for method getTypeAssignment_1 """
        return self.cTypeAssignment_1

    # STRING
    def getTypeSTRINGTerminalRuleCall_1_0(self):
        """ generated source for method getTypeSTRINGTerminalRuleCall_1_0 """
        return self.cTypeSTRINGTerminalRuleCall_1_0


class AttributeElements(AbstractParserRuleElementFinder):
    """ generated source for class AttributeElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Attribute")
    cGroup = rule.eContents().get(1)
    cCommercialAtKeyword_0 = cGroup.eContents().get(0)
    cAttrNameAssignment_1 = cGroup.eContents().get(1)
    cAttrNameIDTerminalRuleCall_1_0 = cAttrNameAssignment_1.eContents().get(0)
    cGroup_2 = cGroup.eContents().get(2)
    cLeftParenthesisKeyword_2_0 = cGroup_2.eContents().get(0)
    cGroup_2_1 = cGroup_2.eContents().get(1)
    cAttrParmsAssignment_2_1_0 = cGroup_2_1.eContents().get(0)
    cAttrParmsAttrParmParserRuleCall_2_1_0_0 = cAttrParmsAssignment_2_1_0.eContents().get(0)
    cGroup_2_1_1 = cGroup_2_1.eContents().get(1)
    cCommaKeyword_2_1_1_0 = cGroup_2_1_1.eContents().get(0)
    cAttrParmsAssignment_2_1_1_1 = cGroup_2_1_1.eContents().get(1)
    cAttrParmsAttrParmParserRuleCall_2_1_1_1_0 = cAttrParmsAssignment_2_1_1_1.eContents().get(0)
    cCommaKeyword_2_1_2 = cGroup_2_1.eContents().get(2)
    cRightParenthesisKeyword_2_2 = cGroup_2.eContents().get(2)

    # /////////// Attributes
    # Attribute:
    #     '@' attrName=ID ('(' (attrParms+=AttrParm (',' attrParms+=AttrParm)* ','?)? ')')?
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # '@' attrName=ID ('(' (attrParms+=AttrParm (',' attrParms+=AttrParm)* ','?)? ')')?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # '@'
    def getCommercialAtKeyword_0(self):
        """ generated source for method getCommercialAtKeyword_0 """
        return self.cCommercialAtKeyword_0

    # attrName=ID
    def getAttrNameAssignment_1(self):
        """ generated source for method getAttrNameAssignment_1 """
        return self.cAttrNameAssignment_1

    # ID
    def getAttrNameIDTerminalRuleCall_1_0(self):
        """ generated source for method getAttrNameIDTerminalRuleCall_1_0 """
        return self.cAttrNameIDTerminalRuleCall_1_0

    # ('(' (attrParms+=AttrParm (',' attrParms+=AttrParm)* ','?)? ')')?
    def getGroup_2(self):
        """ generated source for method getGroup_2 """
        return self.cGroup_2

    # '('
    def getLeftParenthesisKeyword_2_0(self):
        """ generated source for method getLeftParenthesisKeyword_2_0 """
        return self.cLeftParenthesisKeyword_2_0

    # (attrParms+=AttrParm (',' attrParms+=AttrParm)* ','?)?
    def getGroup_2_1(self):
        """ generated source for method getGroup_2_1 """
        return self.cGroup_2_1

    # attrParms+=AttrParm
    def getAttrParmsAssignment_2_1_0(self):
        """ generated source for method getAttrParmsAssignment_2_1_0 """
        return self.cAttrParmsAssignment_2_1_0

    # AttrParm
    def getAttrParmsAttrParmParserRuleCall_2_1_0_0(self):
        """ generated source for method getAttrParmsAttrParmParserRuleCall_2_1_0_0 """
        return self.cAttrParmsAttrParmParserRuleCall_2_1_0_0

    # (',' attrParms+=AttrParm)*
    def getGroup_2_1_1(self):
        """ generated source for method getGroup_2_1_1 """
        return self.cGroup_2_1_1

    # ','
    def getCommaKeyword_2_1_1_0(self):
        """ generated source for method getCommaKeyword_2_1_1_0 """
        return self.cCommaKeyword_2_1_1_0

    # attrParms+=AttrParm
    def getAttrParmsAssignment_2_1_1_1(self):
        """ generated source for method getAttrParmsAssignment_2_1_1_1 """
        return self.cAttrParmsAssignment_2_1_1_1

    # AttrParm
    def getAttrParmsAttrParmParserRuleCall_2_1_1_1_0(self):
        """ generated source for method getAttrParmsAttrParmParserRuleCall_2_1_1_1_0 """
        return self.cAttrParmsAttrParmParserRuleCall_2_1_1_1_0

    # ','?
    def getCommaKeyword_2_1_2(self):
        """ generated source for method getCommaKeyword_2_1_2 """
        return self.cCommaKeyword_2_1_2

    # ')'
    def getRightParenthesisKeyword_2_2(self):
        """ generated source for method getRightParenthesisKeyword_2_2 """
        return self.cRightParenthesisKeyword_2_2


class AttrParmElements(AbstractParserRuleElementFinder):
    """ generated source for class AttrParmElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.AttrParm")
    cGroup = rule.eContents().get(1)
    cGroup_0 = cGroup.eContents().get(0)
    cNameAssignment_0_0 = cGroup_0.eContents().get(0)
    cNameIDTerminalRuleCall_0_0_0 = cNameAssignment_0_0.eContents().get(0)
    cEqualsSignKeyword_0_1 = cGroup_0.eContents().get(1)
    cValueAssignment_1 = cGroup.eContents().get(1)
    cValueAttrParmValueParserRuleCall_1_0 = cValueAssignment_1.eContents().get(0)

    # AttrParm:
    #     (name=ID '=')? value=AttrParmValue;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (name=ID '=')? value=AttrParmValue
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # (name=ID '=')?
    def getGroup_0(self):
        """ generated source for method getGroup_0 """
        return self.cGroup_0

    # name=ID
    def getNameAssignment_0_0(self):
        """ generated source for method getNameAssignment_0_0 """
        return self.cNameAssignment_0_0

    # ID
    def getNameIDTerminalRuleCall_0_0_0(self):
        """ generated source for method getNameIDTerminalRuleCall_0_0_0 """
        return self.cNameIDTerminalRuleCall_0_0_0

    # '='
    def getEqualsSignKeyword_0_1(self):
        """ generated source for method getEqualsSignKeyword_0_1 """
        return self.cEqualsSignKeyword_0_1

    # value=AttrParmValue
    def getValueAssignment_1(self):
        """ generated source for method getValueAssignment_1 """
        return self.cValueAssignment_1

    # AttrParmValue
    def getValueAttrParmValueParserRuleCall_1_0(self):
        """ generated source for method getValueAttrParmValueParserRuleCall_1_0 """
        return self.cValueAttrParmValueParserRuleCall_1_0


class AttrParmValueElements(AbstractParserRuleElementFinder):
    """ generated source for class AttrParmValueElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.AttrParmValue")
    cAlternatives = rule.eContents().get(1)
    cStrAssignment_0 = cAlternatives.eContents().get(0)
    cStrSTRINGTerminalRuleCall_0_0 = cStrAssignment_0.eContents().get(0)
    cIntAssignment_1 = cAlternatives.eContents().get(1)
    cIntSignedIntParserRuleCall_1_0 = cIntAssignment_1.eContents().get(0)
    cBoolAssignment_2 = cAlternatives.eContents().get(2)
    cBoolBooleanParserRuleCall_2_0 = cBoolAssignment_2.eContents().get(0)
    cFloatAssignment_3 = cAlternatives.eContents().get(3)
    cFloatSignedFloatParserRuleCall_3_0 = cFloatAssignment_3.eContents().get(0)

    # AttrParmValue:
    #     str=STRING
    #     | int=SignedInt
    #     | bool=Boolean
    #     | float=SignedFloat
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # str=STRING
    # | int=SignedInt
    # | bool=Boolean
    # | float=SignedFloat
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # str=STRING
    def getStrAssignment_0(self):
        """ generated source for method getStrAssignment_0 """
        return self.cStrAssignment_0

    # STRING
    def getStrSTRINGTerminalRuleCall_0_0(self):
        """ generated source for method getStrSTRINGTerminalRuleCall_0_0 """
        return self.cStrSTRINGTerminalRuleCall_0_0

    # int=SignedInt
    def getIntAssignment_1(self):
        """ generated source for method getIntAssignment_1 """
        return self.cIntAssignment_1

    # SignedInt
    def getIntSignedIntParserRuleCall_1_0(self):
        """ generated source for method getIntSignedIntParserRuleCall_1_0 """
        return self.cIntSignedIntParserRuleCall_1_0

    # bool=Boolean
    def getBoolAssignment_2(self):
        """ generated source for method getBoolAssignment_2 """
        return self.cBoolAssignment_2

    # Boolean
    def getBoolBooleanParserRuleCall_2_0(self):
        """ generated source for method getBoolBooleanParserRuleCall_2_0 """
        return self.cBoolBooleanParserRuleCall_2_0

    # float=SignedFloat
    def getFloatAssignment_3(self):
        """ generated source for method getFloatAssignment_3 """
        return self.cFloatAssignment_3

    # SignedFloat
    def getFloatSignedFloatParserRuleCall_3_0(self):
        """ generated source for method getFloatSignedFloatParserRuleCall_3_0 """
        return self.cFloatSignedFloatParserRuleCall_3_0


class KeyValuePairsElements(AbstractParserRuleElementFinder):
    """ generated source for class KeyValuePairsElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.KeyValuePairs")
    cGroup = rule.eContents().get(1)
    cKeyValuePairsAction_0 = cGroup.eContents().get(0)
    cLeftCurlyBracketKeyword_1 = cGroup.eContents().get(1)
    cGroup_2 = cGroup.eContents().get(2)
    cPairsAssignment_2_0 = cGroup_2.eContents().get(0)
    cPairsKeyValuePairParserRuleCall_2_0_0 = cPairsAssignment_2_0.eContents().get(0)
    cGroup_2_1 = cGroup_2.eContents().get(1)
    cCommaKeyword_2_1_0 = cGroup_2_1.eContents().get(0)
    cPairsAssignment_2_1_1 = cGroup_2_1.eContents().get(1)
    cPairsKeyValuePairParserRuleCall_2_1_1_0 = cPairsAssignment_2_1_1.eContents().get(0)
    cCommaKeyword_2_2 = cGroup_2.eContents().get(2)
    cRightCurlyBracketKeyword_3 = cGroup.eContents().get(3)

    # /////////// For target parameters
    # KeyValuePairs:
    #     {KeyValuePairs} '{' (pairs+=KeyValuePair (',' (pairs+=KeyValuePair))* ','?)? '}';
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # {KeyValuePairs} '{' (pairs+=KeyValuePair (',' (pairs+=KeyValuePair))* ','?)? '}'
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # {KeyValuePairs}
    def getKeyValuePairsAction_0(self):
        """ generated source for method getKeyValuePairsAction_0 """
        return self.cKeyValuePairsAction_0

    # '{'
    def getLeftCurlyBracketKeyword_1(self):
        """ generated source for method getLeftCurlyBracketKeyword_1 """
        return self.cLeftCurlyBracketKeyword_1

    # (pairs+=KeyValuePair (',' (pairs+=KeyValuePair))* ','?)?
    def getGroup_2(self):
        """ generated source for method getGroup_2 """
        return self.cGroup_2

    # pairs+=KeyValuePair
    def getPairsAssignment_2_0(self):
        """ generated source for method getPairsAssignment_2_0 """
        return self.cPairsAssignment_2_0

    # KeyValuePair
    def getPairsKeyValuePairParserRuleCall_2_0_0(self):
        """ generated source for method getPairsKeyValuePairParserRuleCall_2_0_0 """
        return self.cPairsKeyValuePairParserRuleCall_2_0_0

    # (',' (pairs+=KeyValuePair))*
    def getGroup_2_1(self):
        """ generated source for method getGroup_2_1 """
        return self.cGroup_2_1

    # ','
    def getCommaKeyword_2_1_0(self):
        """ generated source for method getCommaKeyword_2_1_0 """
        return self.cCommaKeyword_2_1_0

    # (pairs+=KeyValuePair)
    def getPairsAssignment_2_1_1(self):
        """ generated source for method getPairsAssignment_2_1_1 """
        return self.cPairsAssignment_2_1_1

    # KeyValuePair
    def getPairsKeyValuePairParserRuleCall_2_1_1_0(self):
        """ generated source for method getPairsKeyValuePairParserRuleCall_2_1_1_0 """
        return self.cPairsKeyValuePairParserRuleCall_2_1_1_0

    # ','?
    def getCommaKeyword_2_2(self):
        """ generated source for method getCommaKeyword_2_2 """
        return self.cCommaKeyword_2_2

    # '}'
    def getRightCurlyBracketKeyword_3(self):
        """ generated source for method getRightCurlyBracketKeyword_3 """
        return self.cRightCurlyBracketKeyword_3


class KeyValuePairElements(AbstractParserRuleElementFinder):
    """ generated source for class KeyValuePairElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.KeyValuePair")
    cGroup = rule.eContents().get(1)
    cNameAssignment_0 = cGroup.eContents().get(0)
    cNameKebabParserRuleCall_0_0 = cNameAssignment_0.eContents().get(0)
    cColonKeyword_1 = cGroup.eContents().get(1)
    cValueAssignment_2 = cGroup.eContents().get(2)
    cValueElementParserRuleCall_2_0 = cValueAssignment_2.eContents().get(0)

    # KeyValuePair:
    #     name=Kebab ':' value=Element;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # name=Kebab ':' value=Element
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # name=Kebab
    def getNameAssignment_0(self):
        """ generated source for method getNameAssignment_0 """
        return self.cNameAssignment_0

    # Kebab
    def getNameKebabParserRuleCall_0_0(self):
        """ generated source for method getNameKebabParserRuleCall_0_0 """
        return self.cNameKebabParserRuleCall_0_0

    # ':'
    def getColonKeyword_1(self):
        """ generated source for method getColonKeyword_1 """
        return self.cColonKeyword_1

    # value=Element
    def getValueAssignment_2(self):
        """ generated source for method getValueAssignment_2 """
        return self.cValueAssignment_2

    # Element
    def getValueElementParserRuleCall_2_0(self):
        """ generated source for method getValueElementParserRuleCall_2_0 """
        return self.cValueElementParserRuleCall_2_0


class ArrayElements(AbstractParserRuleElementFinder):
    """ generated source for class ArrayElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Array")
    cGroup = rule.eContents().get(1)
    cLeftSquareBracketKeyword_0 = cGroup.eContents().get(0)
    cElementsAssignment_1 = cGroup.eContents().get(1)
    cElementsElementParserRuleCall_1_0 = cElementsAssignment_1.eContents().get(0)
    cGroup_2 = cGroup.eContents().get(2)
    cCommaKeyword_2_0 = cGroup_2.eContents().get(0)
    cElementsAssignment_2_1 = cGroup_2.eContents().get(1)
    cElementsElementParserRuleCall_2_1_0 = cElementsAssignment_2_1.eContents().get(0)
    cCommaKeyword_3 = cGroup.eContents().get(3)
    cRightSquareBracketKeyword_4 = cGroup.eContents().get(4)

    # Array: // todo allow empty array in grammar, replace with validator error
    #     '[' elements+=Element (',' (elements+=Element))* ','? ']';
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # // todo allow empty array in grammar, replace with validator error
    #    '[' elements+=Element (',' (elements+=Element))* ','? ']'
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # // todo allow empty array in grammar, replace with validator error
    #    '['
    def getLeftSquareBracketKeyword_0(self):
        """ generated source for method getLeftSquareBracketKeyword_0 """
        return self.cLeftSquareBracketKeyword_0

    # elements+=Element
    def getElementsAssignment_1(self):
        """ generated source for method getElementsAssignment_1 """
        return self.cElementsAssignment_1

    # Element
    def getElementsElementParserRuleCall_1_0(self):
        """ generated source for method getElementsElementParserRuleCall_1_0 """
        return self.cElementsElementParserRuleCall_1_0

    # (',' (elements+=Element))*
    def getGroup_2(self):
        """ generated source for method getGroup_2 """
        return self.cGroup_2

    # ','
    def getCommaKeyword_2_0(self):
        """ generated source for method getCommaKeyword_2_0 """
        return self.cCommaKeyword_2_0

    # (elements+=Element)
    def getElementsAssignment_2_1(self):
        """ generated source for method getElementsAssignment_2_1 """
        return self.cElementsAssignment_2_1

    # Element
    def getElementsElementParserRuleCall_2_1_0(self):
        """ generated source for method getElementsElementParserRuleCall_2_1_0 """
        return self.cElementsElementParserRuleCall_2_1_0

    # ','?
    def getCommaKeyword_3(self):
        """ generated source for method getCommaKeyword_3 """
        return self.cCommaKeyword_3

    # ']'
    def getRightSquareBracketKeyword_4(self):
        """ generated source for method getRightSquareBracketKeyword_4 """
        return self.cRightSquareBracketKeyword_4


class ElementElements(AbstractParserRuleElementFinder):
    """ generated source for class ElementElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Element")
    cAlternatives = rule.eContents().get(1)
    cKeyvalueAssignment_0 = cAlternatives.eContents().get(0)
    cKeyvalueKeyValuePairsParserRuleCall_0_0 = cKeyvalueAssignment_0.eContents().get(0)
    cArrayAssignment_1 = cAlternatives.eContents().get(1)
    cArrayArrayParserRuleCall_1_0 = cArrayAssignment_1.eContents().get(0)
    cLiteralAssignment_2 = cAlternatives.eContents().get(2)
    cLiteralLiteralParserRuleCall_2_0 = cLiteralAssignment_2.eContents().get(0)
    cGroup_3 = cAlternatives.eContents().get(3)
    cTimeAssignment_3_0 = cGroup_3.eContents().get(0)
    cTimeINTTerminalRuleCall_3_0_0 = cTimeAssignment_3_0.eContents().get(0)
    cUnitAssignment_3_1 = cGroup_3.eContents().get(1)
    cUnitTimeUnitParserRuleCall_3_1_0 = cUnitAssignment_3_1.eContents().get(0)
    cIdAssignment_4 = cAlternatives.eContents().get(4)
    cIdPathParserRuleCall_4_0 = cIdAssignment_4.eContents().get(0)

    # Element:
    #     keyvalue=KeyValuePairs
    #     | array=Array
    #     | literal=Literal
    #     | (time=INT unit=TimeUnit)
    #     | id=Path;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # keyvalue=KeyValuePairs
    # | array=Array
    # | literal=Literal
    # | (time=INT unit=TimeUnit)
    # | id=Path
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # keyvalue=KeyValuePairs
    def getKeyvalueAssignment_0(self):
        """ generated source for method getKeyvalueAssignment_0 """
        return self.cKeyvalueAssignment_0

    # KeyValuePairs
    def getKeyvalueKeyValuePairsParserRuleCall_0_0(self):
        """ generated source for method getKeyvalueKeyValuePairsParserRuleCall_0_0 """
        return self.cKeyvalueKeyValuePairsParserRuleCall_0_0

    # array=Array
    def getArrayAssignment_1(self):
        """ generated source for method getArrayAssignment_1 """
        return self.cArrayAssignment_1

    # Array
    def getArrayArrayParserRuleCall_1_0(self):
        """ generated source for method getArrayArrayParserRuleCall_1_0 """
        return self.cArrayArrayParserRuleCall_1_0

    # literal=Literal
    def getLiteralAssignment_2(self):
        """ generated source for method getLiteralAssignment_2 """
        return self.cLiteralAssignment_2

    # Literal
    def getLiteralLiteralParserRuleCall_2_0(self):
        """ generated source for method getLiteralLiteralParserRuleCall_2_0 """
        return self.cLiteralLiteralParserRuleCall_2_0

    # (time=INT unit=TimeUnit)
    def getGroup_3(self):
        """ generated source for method getGroup_3 """
        return self.cGroup_3

    # time=INT
    def getTimeAssignment_3_0(self):
        """ generated source for method getTimeAssignment_3_0 """
        return self.cTimeAssignment_3_0

    # INT
    def getTimeINTTerminalRuleCall_3_0_0(self):
        """ generated source for method getTimeINTTerminalRuleCall_3_0_0 """
        return self.cTimeINTTerminalRuleCall_3_0_0

    # unit=TimeUnit
    def getUnitAssignment_3_1(self):
        """ generated source for method getUnitAssignment_3_1 """
        return self.cUnitAssignment_3_1

    # TimeUnit
    def getUnitTimeUnitParserRuleCall_3_1_0(self):
        """ generated source for method getUnitTimeUnitParserRuleCall_3_1_0 """
        return self.cUnitTimeUnitParserRuleCall_3_1_0

    # id=Path
    def getIdAssignment_4(self):
        """ generated source for method getIdAssignment_4 """
        return self.cIdAssignment_4

    # Path
    def getIdPathParserRuleCall_4_0(self):
        """ generated source for method getIdPathParserRuleCall_4_0 """
        return self.cIdPathParserRuleCall_4_0


class TypedVariableElements(AbstractParserRuleElementFinder):
    """ generated source for class TypedVariableElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.TypedVariable")
    cAlternatives = rule.eContents().get(1)
    cPortParserRuleCall_0 = cAlternatives.eContents().get(0)
    cActionParserRuleCall_1 = cAlternatives.eContents().get(1)

    # ///////// Pieces
    # TypedVariable:
    #     Port | Action
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # Port | Action
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # Port
    def getPortParserRuleCall_0(self):
        """ generated source for method getPortParserRuleCall_0 """
        return self.cPortParserRuleCall_0

    # Action
    def getActionParserRuleCall_1(self):
        """ generated source for method getActionParserRuleCall_1 """
        return self.cActionParserRuleCall_1


class VariableElements(AbstractParserRuleElementFinder):
    """ generated source for class VariableElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Variable")
    cAlternatives = rule.eContents().get(1)
    cTypedVariableParserRuleCall_0 = cAlternatives.eContents().get(0)
    cTimerParserRuleCall_1 = cAlternatives.eContents().get(1)
    cModeParserRuleCall_2 = cAlternatives.eContents().get(2)

    # Variable:
    #     TypedVariable | Timer | Mode;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # TypedVariable | Timer | Mode
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # TypedVariable
    def getTypedVariableParserRuleCall_0(self):
        """ generated source for method getTypedVariableParserRuleCall_0 """
        return self.cTypedVariableParserRuleCall_0

    # Timer
    def getTimerParserRuleCall_1(self):
        """ generated source for method getTimerParserRuleCall_1 """
        return self.cTimerParserRuleCall_1

    # Mode
    def getModeParserRuleCall_2(self):
        """ generated source for method getModeParserRuleCall_2 """
        return self.cModeParserRuleCall_2


class VarRefElements(AbstractParserRuleElementFinder):
    """ generated source for class VarRefElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.VarRef")
    cAlternatives = rule.eContents().get(1)
    cVariableAssignment_0 = cAlternatives.eContents().get(0)
    cVariableVariableCrossReference_0_0 = cVariableAssignment_0.eContents().get(0)
    cVariableVariableIDTerminalRuleCall_0_0_1 = cVariableVariableCrossReference_0_0.eContents().get(1)
    cGroup_1 = cAlternatives.eContents().get(1)
    cContainerAssignment_1_0 = cGroup_1.eContents().get(0)
    cContainerInstantiationCrossReference_1_0_0 = cContainerAssignment_1_0.eContents().get(0)
    cContainerInstantiationIDTerminalRuleCall_1_0_0_1 = cContainerInstantiationCrossReference_1_0_0.eContents().get(1)
    cFullStopKeyword_1_1 = cGroup_1.eContents().get(1)
    cVariableAssignment_1_2 = cGroup_1.eContents().get(2)
    cVariableVariableCrossReference_1_2_0 = cVariableAssignment_1_2.eContents().get(0)
    cVariableVariableIDTerminalRuleCall_1_2_0_1 = cVariableVariableCrossReference_1_2_0.eContents().get(1)
    cGroup_2 = cAlternatives.eContents().get(2)
    cInterleavedAssignment_2_0 = cGroup_2.eContents().get(0)
    cInterleavedInterleavedKeyword_2_0_0 = cInterleavedAssignment_2_0.eContents().get(0)
    cLeftParenthesisKeyword_2_1 = cGroup_2.eContents().get(1)
    cAlternatives_2_2 = cGroup_2.eContents().get(2)
    cVariableAssignment_2_2_0 = cAlternatives_2_2.eContents().get(0)
    cVariableVariableCrossReference_2_2_0_0 = cVariableAssignment_2_2_0.eContents().get(0)
    cVariableVariableIDTerminalRuleCall_2_2_0_0_1 = cVariableVariableCrossReference_2_2_0_0.eContents().get(1)
    cGroup_2_2_1 = cAlternatives_2_2.eContents().get(1)
    cContainerAssignment_2_2_1_0 = cGroup_2_2_1.eContents().get(0)
    cContainerInstantiationCrossReference_2_2_1_0_0 = cContainerAssignment_2_2_1_0.eContents().get(0)
    cContainerInstantiationIDTerminalRuleCall_2_2_1_0_0_1 = cContainerInstantiationCrossReference_2_2_1_0_0.eContents().get(
        1)
    cFullStopKeyword_2_2_1_1 = cGroup_2_2_1.eContents().get(1)
    cVariableAssignment_2_2_1_2 = cGroup_2_2_1.eContents().get(2)
    cVariableVariableCrossReference_2_2_1_2_0 = cVariableAssignment_2_2_1_2.eContents().get(0)
    cVariableVariableIDTerminalRuleCall_2_2_1_2_0_1 = cVariableVariableCrossReference_2_2_1_2_0.eContents().get(1)
    cRightParenthesisKeyword_2_3 = cGroup_2.eContents().get(3)

    # VarRef:
    #     variable=[Variable] | container=[Instantiation] '.' variable=[Variable]
    #     | interleaved?='interleaved' '(' (variable=[Variable] | container=[Instantiation] '.' variable=[Variable]) ')'
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # variable=[Variable] | container=[Instantiation] '.' variable=[Variable]
    # | interleaved?='interleaved' '(' (variable=[Variable] | container=[Instantiation] '.' variable=[Variable]) ')'
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # variable=[Variable]
    def getVariableAssignment_0(self):
        """ generated source for method getVariableAssignment_0 """
        return self.cVariableAssignment_0

    # [Variable]
    def getVariableVariableCrossReference_0_0(self):
        """ generated source for method getVariableVariableCrossReference_0_0 """
        return self.cVariableVariableCrossReference_0_0

    # ID
    def getVariableVariableIDTerminalRuleCall_0_0_1(self):
        """ generated source for method getVariableVariableIDTerminalRuleCall_0_0_1 """
        return self.cVariableVariableIDTerminalRuleCall_0_0_1

    # container=[Instantiation] '.' variable=[Variable]
    def getGroup_1(self):
        """ generated source for method getGroup_1 """
        return self.cGroup_1

    # container=[Instantiation]
    def getContainerAssignment_1_0(self):
        """ generated source for method getContainerAssignment_1_0 """
        return self.cContainerAssignment_1_0

    # [Instantiation]
    def getContainerInstantiationCrossReference_1_0_0(self):
        """ generated source for method getContainerInstantiationCrossReference_1_0_0 """
        return self.cContainerInstantiationCrossReference_1_0_0

    # ID
    def getContainerInstantiationIDTerminalRuleCall_1_0_0_1(self):
        """ generated source for method getContainerInstantiationIDTerminalRuleCall_1_0_0_1 """
        return self.cContainerInstantiationIDTerminalRuleCall_1_0_0_1

    # '.'
    def getFullStopKeyword_1_1(self):
        """ generated source for method getFullStopKeyword_1_1 """
        return self.cFullStopKeyword_1_1

    # variable=[Variable]
    def getVariableAssignment_1_2(self):
        """ generated source for method getVariableAssignment_1_2 """
        return self.cVariableAssignment_1_2

    # [Variable]
    def getVariableVariableCrossReference_1_2_0(self):
        """ generated source for method getVariableVariableCrossReference_1_2_0 """
        return self.cVariableVariableCrossReference_1_2_0

    # ID
    def getVariableVariableIDTerminalRuleCall_1_2_0_1(self):
        """ generated source for method getVariableVariableIDTerminalRuleCall_1_2_0_1 """
        return self.cVariableVariableIDTerminalRuleCall_1_2_0_1

    # interleaved?='interleaved' '(' (variable=[Variable] | container=[Instantiation] '.' variable=[Variable]) ')'
    def getGroup_2(self):
        """ generated source for method getGroup_2 """
        return self.cGroup_2

    # interleaved?='interleaved'
    def getInterleavedAssignment_2_0(self):
        """ generated source for method getInterleavedAssignment_2_0 """
        return self.cInterleavedAssignment_2_0

    # 'interleaved'
    def getInterleavedInterleavedKeyword_2_0_0(self):
        """ generated source for method getInterleavedInterleavedKeyword_2_0_0 """
        return self.cInterleavedInterleavedKeyword_2_0_0

    # '('
    def getLeftParenthesisKeyword_2_1(self):
        """ generated source for method getLeftParenthesisKeyword_2_1 """
        return self.cLeftParenthesisKeyword_2_1

    # (variable=[Variable] | container=[Instantiation] '.' variable=[Variable])
    def getAlternatives_2_2(self):
        """ generated source for method getAlternatives_2_2 """
        return self.cAlternatives_2_2

    # variable=[Variable]
    def getVariableAssignment_2_2_0(self):
        """ generated source for method getVariableAssignment_2_2_0 """
        return self.cVariableAssignment_2_2_0

    # [Variable]
    def getVariableVariableCrossReference_2_2_0_0(self):
        """ generated source for method getVariableVariableCrossReference_2_2_0_0 """
        return self.cVariableVariableCrossReference_2_2_0_0

    # ID
    def getVariableVariableIDTerminalRuleCall_2_2_0_0_1(self):
        """ generated source for method getVariableVariableIDTerminalRuleCall_2_2_0_0_1 """
        return self.cVariableVariableIDTerminalRuleCall_2_2_0_0_1

    # container=[Instantiation] '.' variable=[Variable]
    def getGroup_2_2_1(self):
        """ generated source for method getGroup_2_2_1 """
        return self.cGroup_2_2_1

    # container=[Instantiation]
    def getContainerAssignment_2_2_1_0(self):
        """ generated source for method getContainerAssignment_2_2_1_0 """
        return self.cContainerAssignment_2_2_1_0

    # [Instantiation]
    def getContainerInstantiationCrossReference_2_2_1_0_0(self):
        """ generated source for method getContainerInstantiationCrossReference_2_2_1_0_0 """
        return self.cContainerInstantiationCrossReference_2_2_1_0_0

    # ID
    def getContainerInstantiationIDTerminalRuleCall_2_2_1_0_0_1(self):
        """ generated source for method getContainerInstantiationIDTerminalRuleCall_2_2_1_0_0_1 """
        return self.cContainerInstantiationIDTerminalRuleCall_2_2_1_0_0_1

    # '.'
    def getFullStopKeyword_2_2_1_1(self):
        """ generated source for method getFullStopKeyword_2_2_1_1 """
        return self.cFullStopKeyword_2_2_1_1

    # variable=[Variable]
    def getVariableAssignment_2_2_1_2(self):
        """ generated source for method getVariableAssignment_2_2_1_2 """
        return self.cVariableAssignment_2_2_1_2

    # [Variable]
    def getVariableVariableCrossReference_2_2_1_2_0(self):
        """ generated source for method getVariableVariableCrossReference_2_2_1_2_0 """
        return self.cVariableVariableCrossReference_2_2_1_2_0

    # ID
    def getVariableVariableIDTerminalRuleCall_2_2_1_2_0_1(self):
        """ generated source for method getVariableVariableIDTerminalRuleCall_2_2_1_2_0_1 """
        return self.cVariableVariableIDTerminalRuleCall_2_2_1_2_0_1

    # ')'
    def getRightParenthesisKeyword_2_3(self):
        """ generated source for method getRightParenthesisKeyword_2_3 """
        return self.cRightParenthesisKeyword_2_3


class VarRefOrModeTransitionElements(AbstractParserRuleElementFinder):
    """ generated source for class VarRefOrModeTransitionElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.VarRefOrModeTransition")
    cAlternatives = rule.eContents().get(1)
    cVarRefParserRuleCall_0 = cAlternatives.eContents().get(0)
    cGroup_1 = cAlternatives.eContents().get(1)
    cTransitionAssignment_1_0 = cGroup_1.eContents().get(0)
    cTransitionModeTransitionEnumRuleCall_1_0_0 = cTransitionAssignment_1_0.eContents().get(0)
    cLeftParenthesisKeyword_1_1 = cGroup_1.eContents().get(1)
    cVariableAssignment_1_2 = cGroup_1.eContents().get(2)
    cVariableModeCrossReference_1_2_0 = cVariableAssignment_1_2.eContents().get(0)
    cVariableModeIDTerminalRuleCall_1_2_0_1 = cVariableModeCrossReference_1_2_0.eContents().get(1)
    cRightParenthesisKeyword_1_3 = cGroup_1.eContents().get(3)

    # VarRefOrModeTransition returns VarRef:
    #     VarRef | transition=ModeTransition '(' variable=[Mode] ')';
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # VarRef | transition=ModeTransition '(' variable=[Mode] ')'
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # VarRef
    def getVarRefParserRuleCall_0(self):
        """ generated source for method getVarRefParserRuleCall_0 """
        return self.cVarRefParserRuleCall_0

    # transition=ModeTransition '(' variable=[Mode] ')'
    def getGroup_1(self):
        """ generated source for method getGroup_1 """
        return self.cGroup_1

    # transition=ModeTransition
    def getTransitionAssignment_1_0(self):
        """ generated source for method getTransitionAssignment_1_0 """
        return self.cTransitionAssignment_1_0

    # ModeTransition
    def getTransitionModeTransitionEnumRuleCall_1_0_0(self):
        """ generated source for method getTransitionModeTransitionEnumRuleCall_1_0_0 """
        return self.cTransitionModeTransitionEnumRuleCall_1_0_0

    # '('
    def getLeftParenthesisKeyword_1_1(self):
        """ generated source for method getLeftParenthesisKeyword_1_1 """
        return self.cLeftParenthesisKeyword_1_1

    # variable=[Mode]
    def getVariableAssignment_1_2(self):
        """ generated source for method getVariableAssignment_1_2 """
        return self.cVariableAssignment_1_2

    # [Mode]
    def getVariableModeCrossReference_1_2_0(self):
        """ generated source for method getVariableModeCrossReference_1_2_0 """
        return self.cVariableModeCrossReference_1_2_0

    # ID
    def getVariableModeIDTerminalRuleCall_1_2_0_1(self):
        """ generated source for method getVariableModeIDTerminalRuleCall_1_2_0_1 """
        return self.cVariableModeIDTerminalRuleCall_1_2_0_1

    # ')'
    def getRightParenthesisKeyword_1_3(self):
        """ generated source for method getRightParenthesisKeyword_1_3 """
        return self.cRightParenthesisKeyword_1_3


class AssignmentElements(AbstractParserRuleElementFinder):
    """ generated source for class AssignmentElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Assignment")
    cGroup = rule.eContents().get(1)
    cLhsAssignment_0 = cGroup.eContents().get(0)
    cLhsParameterCrossReference_0_0 = cLhsAssignment_0.eContents().get(0)
    cLhsParameterIDTerminalRuleCall_0_0_1 = cLhsParameterCrossReference_0_0.eContents().get(1)
    cAlternatives_1 = cGroup.eContents().get(1)
    cGroup_1_0 = cAlternatives_1.eContents().get(0)
    cEqualsAssignment_1_0_0 = cGroup_1_0.eContents().get(0)
    cEqualsEqualsSignKeyword_1_0_0_0 = cEqualsAssignment_1_0_0.eContents().get(0)
    cRhsAssignment_1_0_1 = cGroup_1_0.eContents().get(1)
    cRhsExpressionParserRuleCall_1_0_1_0 = cRhsAssignment_1_0_1.eContents().get(0)
    cGroup_1_1 = cAlternatives_1.eContents().get(1)
    cEqualsAssignment_1_1_0 = cGroup_1_1.eContents().get(0)
    cEqualsEqualsSignKeyword_1_1_0_0 = cEqualsAssignment_1_1_0.eContents().get(0)
    cAlternatives_1_1_1 = cGroup_1_1.eContents().get(1)
    cGroup_1_1_1_0 = cAlternatives_1_1_1.eContents().get(0)
    cParensAssignment_1_1_1_0_0 = cGroup_1_1_1_0.eContents().get(0)
    cParensLeftParenthesisKeyword_1_1_1_0_0_0 = cParensAssignment_1_1_1_0_0.eContents().get(0)
    cGroup_1_1_1_0_1 = cGroup_1_1_1_0.eContents().get(1)
    cRhsAssignment_1_1_1_0_1_0 = cGroup_1_1_1_0_1.eContents().get(0)
    cRhsExpressionParserRuleCall_1_1_1_0_1_0_0 = cRhsAssignment_1_1_1_0_1_0.eContents().get(0)
    cGroup_1_1_1_0_1_1 = cGroup_1_1_1_0_1.eContents().get(1)
    cCommaKeyword_1_1_1_0_1_1_0 = cGroup_1_1_1_0_1_1.eContents().get(0)
    cRhsAssignment_1_1_1_0_1_1_1 = cGroup_1_1_1_0_1_1.eContents().get(1)
    cRhsExpressionParserRuleCall_1_1_1_0_1_1_1_0 = cRhsAssignment_1_1_1_0_1_1_1.eContents().get(0)
    cParensAssignment_1_1_1_0_2 = cGroup_1_1_1_0.eContents().get(2)
    cParensRightParenthesisKeyword_1_1_1_0_2_0 = cParensAssignment_1_1_1_0_2.eContents().get(0)
    cGroup_1_1_1_1 = cAlternatives_1_1_1.eContents().get(1)
    cBracesAssignment_1_1_1_1_0 = cGroup_1_1_1_1.eContents().get(0)
    cBracesLeftCurlyBracketKeyword_1_1_1_1_0_0 = cBracesAssignment_1_1_1_1_0.eContents().get(0)
    cGroup_1_1_1_1_1 = cGroup_1_1_1_1.eContents().get(1)
    cRhsAssignment_1_1_1_1_1_0 = cGroup_1_1_1_1_1.eContents().get(0)
    cRhsExpressionParserRuleCall_1_1_1_1_1_0_0 = cRhsAssignment_1_1_1_1_1_0.eContents().get(0)
    cGroup_1_1_1_1_1_1 = cGroup_1_1_1_1_1.eContents().get(1)
    cCommaKeyword_1_1_1_1_1_1_0 = cGroup_1_1_1_1_1_1.eContents().get(0)
    cRhsAssignment_1_1_1_1_1_1_1 = cGroup_1_1_1_1_1_1.eContents().get(1)
    cRhsExpressionParserRuleCall_1_1_1_1_1_1_1_0 = cRhsAssignment_1_1_1_1_1_1_1.eContents().get(0)
    cBracesAssignment_1_1_1_1_2 = cGroup_1_1_1_1.eContents().get(2)
    cBracesRightCurlyBracketKeyword_1_1_1_1_2_0 = cBracesAssignment_1_1_1_1_2.eContents().get(0)

    # Assignment:
    #     (lhs=[Parameter] (
    #         (equals='=' rhs+=Expression)
    #         | ((equals='=')? (
    #             parens+='(' (rhs+=Expression (',' rhs+=Expression)*)? parens+=')'
    #             | braces+='{' (rhs+=Expression (',' rhs+=Expression)*)? braces+='}'))
    #     ));
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (lhs=[Parameter] (
    #     (equals='=' rhs+=Expression)
    #     | ((equals='=')? (
    #         parens+='(' (rhs+=Expression (',' rhs+=Expression)*)? parens+=')'
    #         | braces+='{' (rhs+=Expression (',' rhs+=Expression)*)? braces+='}'))
    # ))
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # lhs=[Parameter]
    def getLhsAssignment_0(self):
        """ generated source for method getLhsAssignment_0 """
        return self.cLhsAssignment_0

    # [Parameter]
    def getLhsParameterCrossReference_0_0(self):
        """ generated source for method getLhsParameterCrossReference_0_0 """
        return self.cLhsParameterCrossReference_0_0

    # ID
    def getLhsParameterIDTerminalRuleCall_0_0_1(self):
        """ generated source for method getLhsParameterIDTerminalRuleCall_0_0_1 """
        return self.cLhsParameterIDTerminalRuleCall_0_0_1

    # (
    #        (equals='=' rhs+=Expression)
    #        | ((equals='=')? (
    #            parens+='(' (rhs+=Expression (',' rhs+=Expression)*)? parens+=')'
    #            | braces+='{' (rhs+=Expression (',' rhs+=Expression)*)? braces+='}'))
    #    )
    def getAlternatives_1(self):
        """ generated source for method getAlternatives_1 """
        return self.cAlternatives_1

    # (equals='=' rhs+=Expression)
    def getGroup_1_0(self):
        """ generated source for method getGroup_1_0 """
        return self.cGroup_1_0

    # equals='='
    def getEqualsAssignment_1_0_0(self):
        """ generated source for method getEqualsAssignment_1_0_0 """
        return self.cEqualsAssignment_1_0_0

    # '='
    def getEqualsEqualsSignKeyword_1_0_0_0(self):
        """ generated source for method getEqualsEqualsSignKeyword_1_0_0_0 """
        return self.cEqualsEqualsSignKeyword_1_0_0_0

    # rhs+=Expression
    def getRhsAssignment_1_0_1(self):
        """ generated source for method getRhsAssignment_1_0_1 """
        return self.cRhsAssignment_1_0_1

    # Expression
    def getRhsExpressionParserRuleCall_1_0_1_0(self):
        """ generated source for method getRhsExpressionParserRuleCall_1_0_1_0 """
        return self.cRhsExpressionParserRuleCall_1_0_1_0

    # ((equals='=')? (
    #            parens+='(' (rhs+=Expression (',' rhs+=Expression)*)? parens+=')'
    #            | braces+='{' (rhs+=Expression (',' rhs+=Expression)*)? braces+='}'))
    def getGroup_1_1(self):
        """ generated source for method getGroup_1_1 """
        return self.cGroup_1_1

    # (equals='=')?
    def getEqualsAssignment_1_1_0(self):
        """ generated source for method getEqualsAssignment_1_1_0 """
        return self.cEqualsAssignment_1_1_0

    # '='
    def getEqualsEqualsSignKeyword_1_1_0_0(self):
        """ generated source for method getEqualsEqualsSignKeyword_1_1_0_0 """
        return self.cEqualsEqualsSignKeyword_1_1_0_0

    # (
    #            parens+='(' (rhs+=Expression (',' rhs+=Expression)*)? parens+=')'
    #            | braces+='{' (rhs+=Expression (',' rhs+=Expression)*)? braces+='}')
    def getAlternatives_1_1_1(self):
        """ generated source for method getAlternatives_1_1_1 """
        return self.cAlternatives_1_1_1

    # parens+='(' (rhs+=Expression (',' rhs+=Expression)*)? parens+=')'
    def getGroup_1_1_1_0(self):
        """ generated source for method getGroup_1_1_1_0 """
        return self.cGroup_1_1_1_0

    # parens+='('
    def getParensAssignment_1_1_1_0_0(self):
        """ generated source for method getParensAssignment_1_1_1_0_0 """
        return self.cParensAssignment_1_1_1_0_0

    # '('
    def getParensLeftParenthesisKeyword_1_1_1_0_0_0(self):
        """ generated source for method getParensLeftParenthesisKeyword_1_1_1_0_0_0 """
        return self.cParensLeftParenthesisKeyword_1_1_1_0_0_0

    # (rhs+=Expression (',' rhs+=Expression)*)?
    def getGroup_1_1_1_0_1(self):
        """ generated source for method getGroup_1_1_1_0_1 """
        return self.cGroup_1_1_1_0_1

    # rhs+=Expression
    def getRhsAssignment_1_1_1_0_1_0(self):
        """ generated source for method getRhsAssignment_1_1_1_0_1_0 """
        return self.cRhsAssignment_1_1_1_0_1_0

    # Expression
    def getRhsExpressionParserRuleCall_1_1_1_0_1_0_0(self):
        """ generated source for method getRhsExpressionParserRuleCall_1_1_1_0_1_0_0 """
        return self.cRhsExpressionParserRuleCall_1_1_1_0_1_0_0

    # (',' rhs+=Expression)*
    def getGroup_1_1_1_0_1_1(self):
        """ generated source for method getGroup_1_1_1_0_1_1 """
        return self.cGroup_1_1_1_0_1_1

    # ','
    def getCommaKeyword_1_1_1_0_1_1_0(self):
        """ generated source for method getCommaKeyword_1_1_1_0_1_1_0 """
        return self.cCommaKeyword_1_1_1_0_1_1_0

    # rhs+=Expression
    def getRhsAssignment_1_1_1_0_1_1_1(self):
        """ generated source for method getRhsAssignment_1_1_1_0_1_1_1 """
        return self.cRhsAssignment_1_1_1_0_1_1_1

    # Expression
    def getRhsExpressionParserRuleCall_1_1_1_0_1_1_1_0(self):
        """ generated source for method getRhsExpressionParserRuleCall_1_1_1_0_1_1_1_0 """
        return self.cRhsExpressionParserRuleCall_1_1_1_0_1_1_1_0

    # parens+=')'
    def getParensAssignment_1_1_1_0_2(self):
        """ generated source for method getParensAssignment_1_1_1_0_2 """
        return self.cParensAssignment_1_1_1_0_2

    # ')'
    def getParensRightParenthesisKeyword_1_1_1_0_2_0(self):
        """ generated source for method getParensRightParenthesisKeyword_1_1_1_0_2_0 """
        return self.cParensRightParenthesisKeyword_1_1_1_0_2_0

    # braces+='{' (rhs+=Expression (',' rhs+=Expression)*)? braces+='}'
    def getGroup_1_1_1_1(self):
        """ generated source for method getGroup_1_1_1_1 """
        return self.cGroup_1_1_1_1

    # braces+='{'
    def getBracesAssignment_1_1_1_1_0(self):
        """ generated source for method getBracesAssignment_1_1_1_1_0 """
        return self.cBracesAssignment_1_1_1_1_0

    # '{'
    def getBracesLeftCurlyBracketKeyword_1_1_1_1_0_0(self):
        """ generated source for method getBracesLeftCurlyBracketKeyword_1_1_1_1_0_0 """
        return self.cBracesLeftCurlyBracketKeyword_1_1_1_1_0_0

    # (rhs+=Expression (',' rhs+=Expression)*)?
    def getGroup_1_1_1_1_1(self):
        """ generated source for method getGroup_1_1_1_1_1 """
        return self.cGroup_1_1_1_1_1

    # rhs+=Expression
    def getRhsAssignment_1_1_1_1_1_0(self):
        """ generated source for method getRhsAssignment_1_1_1_1_1_0 """
        return self.cRhsAssignment_1_1_1_1_1_0

    # Expression
    def getRhsExpressionParserRuleCall_1_1_1_1_1_0_0(self):
        """ generated source for method getRhsExpressionParserRuleCall_1_1_1_1_1_0_0 """
        return self.cRhsExpressionParserRuleCall_1_1_1_1_1_0_0

    # (',' rhs+=Expression)*
    def getGroup_1_1_1_1_1_1(self):
        """ generated source for method getGroup_1_1_1_1_1_1 """
        return self.cGroup_1_1_1_1_1_1

    # ','
    def getCommaKeyword_1_1_1_1_1_1_0(self):
        """ generated source for method getCommaKeyword_1_1_1_1_1_1_0 """
        return self.cCommaKeyword_1_1_1_1_1_1_0

    # rhs+=Expression
    def getRhsAssignment_1_1_1_1_1_1_1(self):
        """ generated source for method getRhsAssignment_1_1_1_1_1_1_1 """
        return self.cRhsAssignment_1_1_1_1_1_1_1

    # Expression
    def getRhsExpressionParserRuleCall_1_1_1_1_1_1_1_0(self):
        """ generated source for method getRhsExpressionParserRuleCall_1_1_1_1_1_1_1_0 """
        return self.cRhsExpressionParserRuleCall_1_1_1_1_1_1_1_0

    # braces+='}'
    def getBracesAssignment_1_1_1_1_2(self):
        """ generated source for method getBracesAssignment_1_1_1_1_2 """
        return self.cBracesAssignment_1_1_1_1_2

    # '}'
    def getBracesRightCurlyBracketKeyword_1_1_1_1_2_0(self):
        """ generated source for method getBracesRightCurlyBracketKeyword_1_1_1_1_2_0 """
        return self.cBracesRightCurlyBracketKeyword_1_1_1_1_2_0


class ParameterElements(AbstractParserRuleElementFinder):
    """ generated source for class ParameterElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Parameter")
    cGroup = rule.eContents().get(1)
    cAttributesAssignment_0 = cGroup.eContents().get(0)
    cAttributesAttributeParserRuleCall_0_0 = cAttributesAssignment_0.eContents().get(0)
    cNameAssignment_1 = cGroup.eContents().get(1)
    cNameIDTerminalRuleCall_1_0 = cNameAssignment_1.eContents().get(0)
    cGroup_2 = cGroup.eContents().get(2)
    cColonKeyword_2_0 = cGroup_2.eContents().get(0)
    cTypeAssignment_2_1 = cGroup_2.eContents().get(1)
    cTypeTypeParserRuleCall_2_1_0 = cTypeAssignment_2_1.eContents().get(0)
    cAlternatives_3 = cGroup.eContents().get(3)
    cGroup_3_0 = cAlternatives_3.eContents().get(0)
    cParensAssignment_3_0_0 = cGroup_3_0.eContents().get(0)
    cParensLeftParenthesisKeyword_3_0_0_0 = cParensAssignment_3_0_0.eContents().get(0)
    cGroup_3_0_1 = cGroup_3_0.eContents().get(1)
    cInitAssignment_3_0_1_0 = cGroup_3_0_1.eContents().get(0)
    cInitExpressionParserRuleCall_3_0_1_0_0 = cInitAssignment_3_0_1_0.eContents().get(0)
    cGroup_3_0_1_1 = cGroup_3_0_1.eContents().get(1)
    cCommaKeyword_3_0_1_1_0 = cGroup_3_0_1_1.eContents().get(0)
    cInitAssignment_3_0_1_1_1 = cGroup_3_0_1_1.eContents().get(1)
    cInitExpressionParserRuleCall_3_0_1_1_1_0 = cInitAssignment_3_0_1_1_1.eContents().get(0)
    cParensAssignment_3_0_2 = cGroup_3_0.eContents().get(2)
    cParensRightParenthesisKeyword_3_0_2_0 = cParensAssignment_3_0_2.eContents().get(0)
    cGroup_3_1 = cAlternatives_3.eContents().get(1)
    cBracesAssignment_3_1_0 = cGroup_3_1.eContents().get(0)
    cBracesLeftCurlyBracketKeyword_3_1_0_0 = cBracesAssignment_3_1_0.eContents().get(0)
    cGroup_3_1_1 = cGroup_3_1.eContents().get(1)
    cInitAssignment_3_1_1_0 = cGroup_3_1_1.eContents().get(0)
    cInitExpressionParserRuleCall_3_1_1_0_0 = cInitAssignment_3_1_1_0.eContents().get(0)
    cGroup_3_1_1_1 = cGroup_3_1_1.eContents().get(1)
    cCommaKeyword_3_1_1_1_0 = cGroup_3_1_1_1.eContents().get(0)
    cInitAssignment_3_1_1_1_1 = cGroup_3_1_1_1.eContents().get(1)
    cInitExpressionParserRuleCall_3_1_1_1_1_0 = cInitAssignment_3_1_1_1_1.eContents().get(0)
    cBracesAssignment_3_1_2 = cGroup_3_1.eContents().get(2)
    cBracesRightCurlyBracketKeyword_3_1_2_0 = cBracesAssignment_3_1_2.eContents().get(0)

    # /**
    #  * Parameter declaration with optional type and mandatory initialization.
    #  
    # Parameter:
    #     (attributes+=Attribute)*
    #     name=ID (':' (type=Type))?
    #     ((parens+='(' (init+=Expression (','  init+=Expression)*)? parens+=')')
    #         | (braces+='{' (init+=Expression (','  init+=Expression)*)? braces+='}')
    #     )?
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (attributes+=Attribute)*
    # name=ID (':' (type=Type))?
    # ((parens+='(' (init+=Expression (','  init+=Expression)*)? parens+=')')
    #     | (braces+='{' (init+=Expression (','  init+=Expression)*)? braces+='}')
    # )?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # (attributes+=Attribute)*
    def getAttributesAssignment_0(self):
        """ generated source for method getAttributesAssignment_0 """
        return self.cAttributesAssignment_0

    # Attribute
    def getAttributesAttributeParserRuleCall_0_0(self):
        """ generated source for method getAttributesAttributeParserRuleCall_0_0 """
        return self.cAttributesAttributeParserRuleCall_0_0

    # name=ID
    def getNameAssignment_1(self):
        """ generated source for method getNameAssignment_1 """
        return self.cNameAssignment_1

    # ID
    def getNameIDTerminalRuleCall_1_0(self):
        """ generated source for method getNameIDTerminalRuleCall_1_0 """
        return self.cNameIDTerminalRuleCall_1_0

    # (':' (type=Type))?
    def getGroup_2(self):
        """ generated source for method getGroup_2 """
        return self.cGroup_2

    # ':'
    def getColonKeyword_2_0(self):
        """ generated source for method getColonKeyword_2_0 """
        return self.cColonKeyword_2_0

    # (type=Type)
    def getTypeAssignment_2_1(self):
        """ generated source for method getTypeAssignment_2_1 """
        return self.cTypeAssignment_2_1

    # Type
    def getTypeTypeParserRuleCall_2_1_0(self):
        """ generated source for method getTypeTypeParserRuleCall_2_1_0 """
        return self.cTypeTypeParserRuleCall_2_1_0

    # ((parens+='(' (init+=Expression (','  init+=Expression)*)? parens+=')')
    #     | (braces+='{' (init+=Expression (','  init+=Expression)*)? braces+='}')
    # )?
    def getAlternatives_3(self):
        """ generated source for method getAlternatives_3 """
        return self.cAlternatives_3

    # (parens+='(' (init+=Expression (','  init+=Expression)*)? parens+=')')
    def getGroup_3_0(self):
        """ generated source for method getGroup_3_0 """
        return self.cGroup_3_0

    # parens+='('
    def getParensAssignment_3_0_0(self):
        """ generated source for method getParensAssignment_3_0_0 """
        return self.cParensAssignment_3_0_0

    # '('
    def getParensLeftParenthesisKeyword_3_0_0_0(self):
        """ generated source for method getParensLeftParenthesisKeyword_3_0_0_0 """
        return self.cParensLeftParenthesisKeyword_3_0_0_0

    # (init+=Expression (','  init+=Expression)*)?
    def getGroup_3_0_1(self):
        """ generated source for method getGroup_3_0_1 """
        return self.cGroup_3_0_1

    # init+=Expression
    def getInitAssignment_3_0_1_0(self):
        """ generated source for method getInitAssignment_3_0_1_0 """
        return self.cInitAssignment_3_0_1_0

    # Expression
    def getInitExpressionParserRuleCall_3_0_1_0_0(self):
        """ generated source for method getInitExpressionParserRuleCall_3_0_1_0_0 """
        return self.cInitExpressionParserRuleCall_3_0_1_0_0

    # (','  init+=Expression)*
    def getGroup_3_0_1_1(self):
        """ generated source for method getGroup_3_0_1_1 """
        return self.cGroup_3_0_1_1

    # ','
    def getCommaKeyword_3_0_1_1_0(self):
        """ generated source for method getCommaKeyword_3_0_1_1_0 """
        return self.cCommaKeyword_3_0_1_1_0

    # init+=Expression
    def getInitAssignment_3_0_1_1_1(self):
        """ generated source for method getInitAssignment_3_0_1_1_1 """
        return self.cInitAssignment_3_0_1_1_1

    # Expression
    def getInitExpressionParserRuleCall_3_0_1_1_1_0(self):
        """ generated source for method getInitExpressionParserRuleCall_3_0_1_1_1_0 """
        return self.cInitExpressionParserRuleCall_3_0_1_1_1_0

    # parens+=')'
    def getParensAssignment_3_0_2(self):
        """ generated source for method getParensAssignment_3_0_2 """
        return self.cParensAssignment_3_0_2

    # ')'
    def getParensRightParenthesisKeyword_3_0_2_0(self):
        """ generated source for method getParensRightParenthesisKeyword_3_0_2_0 """
        return self.cParensRightParenthesisKeyword_3_0_2_0

    # (braces+='{' (init+=Expression (','  init+=Expression)*)? braces+='}')
    def getGroup_3_1(self):
        """ generated source for method getGroup_3_1 """
        return self.cGroup_3_1

    # braces+='{'
    def getBracesAssignment_3_1_0(self):
        """ generated source for method getBracesAssignment_3_1_0 """
        return self.cBracesAssignment_3_1_0

    # '{'
    def getBracesLeftCurlyBracketKeyword_3_1_0_0(self):
        """ generated source for method getBracesLeftCurlyBracketKeyword_3_1_0_0 """
        return self.cBracesLeftCurlyBracketKeyword_3_1_0_0

    # (init+=Expression (','  init+=Expression)*)?
    def getGroup_3_1_1(self):
        """ generated source for method getGroup_3_1_1 """
        return self.cGroup_3_1_1

    # init+=Expression
    def getInitAssignment_3_1_1_0(self):
        """ generated source for method getInitAssignment_3_1_1_0 """
        return self.cInitAssignment_3_1_1_0

    # Expression
    def getInitExpressionParserRuleCall_3_1_1_0_0(self):
        """ generated source for method getInitExpressionParserRuleCall_3_1_1_0_0 """
        return self.cInitExpressionParserRuleCall_3_1_1_0_0

    # (','  init+=Expression)*
    def getGroup_3_1_1_1(self):
        """ generated source for method getGroup_3_1_1_1 """
        return self.cGroup_3_1_1_1

    # ','
    def getCommaKeyword_3_1_1_1_0(self):
        """ generated source for method getCommaKeyword_3_1_1_1_0 """
        return self.cCommaKeyword_3_1_1_1_0

    # init+=Expression
    def getInitAssignment_3_1_1_1_1(self):
        """ generated source for method getInitAssignment_3_1_1_1_1 """
        return self.cInitAssignment_3_1_1_1_1

    # Expression
    def getInitExpressionParserRuleCall_3_1_1_1_1_0(self):
        """ generated source for method getInitExpressionParserRuleCall_3_1_1_1_1_0 """
        return self.cInitExpressionParserRuleCall_3_1_1_1_1_0

    # braces+='}'
    def getBracesAssignment_3_1_2(self):
        """ generated source for method getBracesAssignment_3_1_2 """
        return self.cBracesAssignment_3_1_2

    # '}'
    def getBracesRightCurlyBracketKeyword_3_1_2_0(self):
        """ generated source for method getBracesRightCurlyBracketKeyword_3_1_2_0 """
        return self.cBracesRightCurlyBracketKeyword_3_1_2_0


class ExpressionElements(AbstractParserRuleElementFinder):
    """ generated source for class ExpressionElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Expression")
    cAlternatives = rule.eContents().get(1)
    cGroup_0 = cAlternatives.eContents().get(0)
    cLiteralAction_0_0 = cGroup_0.eContents().get(0)
    cLiteralAssignment_0_1 = cGroup_0.eContents().get(1)
    cLiteralLiteralParserRuleCall_0_1_0 = cLiteralAssignment_0_1.eContents().get(0)
    cTimeParserRuleCall_1 = cAlternatives.eContents().get(1)
    cParameterReferenceParserRuleCall_2 = cAlternatives.eContents().get(2)
    cCodeParserRuleCall_3 = cAlternatives.eContents().get(3)

    # Expression:
    #     {Literal} literal = Literal
    #     | Time
    #     | ParameterReference
    #     | Code
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # {Literal} literal = Literal
    # | Time
    # | ParameterReference
    # | Code
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # {Literal} literal = Literal
    def getGroup_0(self):
        """ generated source for method getGroup_0 """
        return self.cGroup_0

    # {Literal}
    def getLiteralAction_0_0(self):
        """ generated source for method getLiteralAction_0_0 """
        return self.cLiteralAction_0_0

    # literal = Literal
    def getLiteralAssignment_0_1(self):
        """ generated source for method getLiteralAssignment_0_1 """
        return self.cLiteralAssignment_0_1

    # Literal
    def getLiteralLiteralParserRuleCall_0_1_0(self):
        """ generated source for method getLiteralLiteralParserRuleCall_0_1_0 """
        return self.cLiteralLiteralParserRuleCall_0_1_0

    # Time
    def getTimeParserRuleCall_1(self):
        """ generated source for method getTimeParserRuleCall_1 """
        return self.cTimeParserRuleCall_1

    # ParameterReference
    def getParameterReferenceParserRuleCall_2(self):
        """ generated source for method getParameterReferenceParserRuleCall_2 """
        return self.cParameterReferenceParserRuleCall_2

    # Code
    def getCodeParserRuleCall_3(self):
        """ generated source for method getCodeParserRuleCall_3 """
        return self.cCodeParserRuleCall_3


class ParameterReferenceElements(AbstractParserRuleElementFinder):
    """ generated source for class ParameterReferenceElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.ParameterReference")
    cParameterAssignment = rule.eContents().get(1)
    cParameterParameterCrossReference_0 = cParameterAssignment.eContents().get(0)
    cParameterParameterIDTerminalRuleCall_0_1 = cParameterParameterCrossReference_0.eContents().get(1)

    # ParameterReference:
    #     parameter=[Parameter]
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # parameter=[Parameter]
    def getParameterAssignment(self):
        """ generated source for method getParameterAssignment """
        return self.cParameterAssignment

    # [Parameter]
    def getParameterParameterCrossReference_0(self):
        """ generated source for method getParameterParameterCrossReference_0 """
        return self.cParameterParameterCrossReference_0

    # ID
    def getParameterParameterIDTerminalRuleCall_0_1(self):
        """ generated source for method getParameterParameterIDTerminalRuleCall_0_1 """
        return self.cParameterParameterIDTerminalRuleCall_0_1


class TimeElements(AbstractParserRuleElementFinder):
    """ generated source for class TimeElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Time")
    cGroup = rule.eContents().get(1)
    cIntervalAssignment_0 = cGroup.eContents().get(0)
    cIntervalINTTerminalRuleCall_0_0 = cIntervalAssignment_0.eContents().get(0)
    cUnitAssignment_1 = cGroup.eContents().get(1)
    cUnitTimeUnitParserRuleCall_1_0 = cUnitAssignment_1.eContents().get(0)

    # Time:
    #     (interval=INT unit=TimeUnit)
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (interval=INT unit=TimeUnit)
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # interval=INT
    def getIntervalAssignment_0(self):
        """ generated source for method getIntervalAssignment_0 """
        return self.cIntervalAssignment_0

    # INT
    def getIntervalINTTerminalRuleCall_0_0(self):
        """ generated source for method getIntervalINTTerminalRuleCall_0_0 """
        return self.cIntervalINTTerminalRuleCall_0_0

    # unit=TimeUnit
    def getUnitAssignment_1(self):
        """ generated source for method getUnitAssignment_1 """
        return self.cUnitAssignment_1

    # TimeUnit
    def getUnitTimeUnitParserRuleCall_1_0(self):
        """ generated source for method getUnitTimeUnitParserRuleCall_1_0 """
        return self.cUnitTimeUnitParserRuleCall_1_0


class PortElements(AbstractParserRuleElementFinder):
    """ generated source for class PortElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Port")
    cAlternatives = rule.eContents().get(1)
    cInputParserRuleCall_0 = cAlternatives.eContents().get(0)
    cOutputParserRuleCall_1 = cAlternatives.eContents().get(1)

    # Port:
    #     Input | Output;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # Input | Output
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # Input
    def getInputParserRuleCall_0(self):
        """ generated source for method getInputParserRuleCall_0 """
        return self.cInputParserRuleCall_0

    # Output
    def getOutputParserRuleCall_1(self):
        """ generated source for method getOutputParserRuleCall_1 """
        return self.cOutputParserRuleCall_1


class TypeElements(AbstractParserRuleElementFinder):
    """ generated source for class TypeElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Type")
    cAlternatives = rule.eContents().get(1)
    cGroup_0 = cAlternatives.eContents().get(0)
    cTimeAssignment_0_0 = cGroup_0.eContents().get(0)
    cTimeTimeKeyword_0_0_0 = cTimeAssignment_0_0.eContents().get(0)
    cArraySpecAssignment_0_1 = cGroup_0.eContents().get(1)
    cArraySpecArraySpecParserRuleCall_0_1_0 = cArraySpecAssignment_0_1.eContents().get(0)
    cGroup_1 = cAlternatives.eContents().get(1)
    cIdAssignment_1_0 = cGroup_1.eContents().get(0)
    cIdDottedNameParserRuleCall_1_0_0 = cIdAssignment_1_0.eContents().get(0)
    cGroup_1_1 = cGroup_1.eContents().get(1)
    cLessThanSignKeyword_1_1_0 = cGroup_1_1.eContents().get(0)
    cTypeParmsAssignment_1_1_1 = cGroup_1_1.eContents().get(1)
    cTypeParmsTypeParserRuleCall_1_1_1_0 = cTypeParmsAssignment_1_1_1.eContents().get(0)
    cGroup_1_1_2 = cGroup_1_1.eContents().get(2)
    cCommaKeyword_1_1_2_0 = cGroup_1_1_2.eContents().get(0)
    cTypeParmsAssignment_1_1_2_1 = cGroup_1_1_2.eContents().get(1)
    cTypeParmsTypeParserRuleCall_1_1_2_1_0 = cTypeParmsAssignment_1_1_2_1.eContents().get(0)
    cGreaterThanSignKeyword_1_1_3 = cGroup_1_1.eContents().get(3)
    cStarsAssignment_1_2 = cGroup_1.eContents().get(2)
    cStarsAsteriskKeyword_1_2_0 = cStarsAssignment_1_2.eContents().get(0)
    cArraySpecAssignment_1_3 = cGroup_1.eContents().get(3)
    cArraySpecArraySpecParserRuleCall_1_3_0 = cArraySpecAssignment_1_3.eContents().get(0)
    cCodeAssignment_2 = cAlternatives.eContents().get(2)
    cCodeCodeParserRuleCall_2_0 = cCodeAssignment_2.eContents().get(0)

    # // A type is in the target language, hence either an ID or target code.
    # Type:
    #    time?='time' (arraySpec=ArraySpec)?
    #    | id=DottedName ('<' typeParms+=Type (',' typeParms+=Type)* '>')? (stars+='*')* (arraySpec=ArraySpec)?
    #    | code=Code
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # time?='time' (arraySpec=ArraySpec)?
    # | id=DottedName ('<' typeParms+=Type (',' typeParms+=Type)* '>')? (stars+='*')* (arraySpec=ArraySpec)?
    # | code=Code
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # time?='time' (arraySpec=ArraySpec)?
    def getGroup_0(self):
        """ generated source for method getGroup_0 """
        return self.cGroup_0

    # time?='time'
    def getTimeAssignment_0_0(self):
        """ generated source for method getTimeAssignment_0_0 """
        return self.cTimeAssignment_0_0

    # 'time'
    def getTimeTimeKeyword_0_0_0(self):
        """ generated source for method getTimeTimeKeyword_0_0_0 """
        return self.cTimeTimeKeyword_0_0_0

    # (arraySpec=ArraySpec)?
    def getArraySpecAssignment_0_1(self):
        """ generated source for method getArraySpecAssignment_0_1 """
        return self.cArraySpecAssignment_0_1

    # ArraySpec
    def getArraySpecArraySpecParserRuleCall_0_1_0(self):
        """ generated source for method getArraySpecArraySpecParserRuleCall_0_1_0 """
        return self.cArraySpecArraySpecParserRuleCall_0_1_0

    # id=DottedName ('<' typeParms+=Type (',' typeParms+=Type)* '>')? (stars+='*')* (arraySpec=ArraySpec)?
    def getGroup_1(self):
        """ generated source for method getGroup_1 """
        return self.cGroup_1

    # id=DottedName
    def getIdAssignment_1_0(self):
        """ generated source for method getIdAssignment_1_0 """
        return self.cIdAssignment_1_0

    # DottedName
    def getIdDottedNameParserRuleCall_1_0_0(self):
        """ generated source for method getIdDottedNameParserRuleCall_1_0_0 """
        return self.cIdDottedNameParserRuleCall_1_0_0

    # ('<' typeParms+=Type (',' typeParms+=Type)* '>')?
    def getGroup_1_1(self):
        """ generated source for method getGroup_1_1 """
        return self.cGroup_1_1

    # '<'
    def getLessThanSignKeyword_1_1_0(self):
        """ generated source for method getLessThanSignKeyword_1_1_0 """
        return self.cLessThanSignKeyword_1_1_0

    # typeParms+=Type
    def getTypeParmsAssignment_1_1_1(self):
        """ generated source for method getTypeParmsAssignment_1_1_1 """
        return self.cTypeParmsAssignment_1_1_1

    # Type
    def getTypeParmsTypeParserRuleCall_1_1_1_0(self):
        """ generated source for method getTypeParmsTypeParserRuleCall_1_1_1_0 """
        return self.cTypeParmsTypeParserRuleCall_1_1_1_0

    # (',' typeParms+=Type)*
    def getGroup_1_1_2(self):
        """ generated source for method getGroup_1_1_2 """
        return self.cGroup_1_1_2

    # ','
    def getCommaKeyword_1_1_2_0(self):
        """ generated source for method getCommaKeyword_1_1_2_0 """
        return self.cCommaKeyword_1_1_2_0

    # typeParms+=Type
    def getTypeParmsAssignment_1_1_2_1(self):
        """ generated source for method getTypeParmsAssignment_1_1_2_1 """
        return self.cTypeParmsAssignment_1_1_2_1

    # Type
    def getTypeParmsTypeParserRuleCall_1_1_2_1_0(self):
        """ generated source for method getTypeParmsTypeParserRuleCall_1_1_2_1_0 """
        return self.cTypeParmsTypeParserRuleCall_1_1_2_1_0

    # '>'
    def getGreaterThanSignKeyword_1_1_3(self):
        """ generated source for method getGreaterThanSignKeyword_1_1_3 """
        return self.cGreaterThanSignKeyword_1_1_3

    # (stars+='*')*
    def getStarsAssignment_1_2(self):
        """ generated source for method getStarsAssignment_1_2 """
        return self.cStarsAssignment_1_2

    # '*'
    def getStarsAsteriskKeyword_1_2_0(self):
        """ generated source for method getStarsAsteriskKeyword_1_2_0 """
        return self.cStarsAsteriskKeyword_1_2_0

    # (arraySpec=ArraySpec)?
    def getArraySpecAssignment_1_3(self):
        """ generated source for method getArraySpecAssignment_1_3 """
        return self.cArraySpecAssignment_1_3

    # ArraySpec
    def getArraySpecArraySpecParserRuleCall_1_3_0(self):
        """ generated source for method getArraySpecArraySpecParserRuleCall_1_3_0 """
        return self.cArraySpecArraySpecParserRuleCall_1_3_0

    # code=Code
    def getCodeAssignment_2(self):
        """ generated source for method getCodeAssignment_2 """
        return self.cCodeAssignment_2

    # Code
    def getCodeCodeParserRuleCall_2_0(self):
        """ generated source for method getCodeCodeParserRuleCall_2_0 """
        return self.cCodeCodeParserRuleCall_2_0


class ArraySpecElements(AbstractParserRuleElementFinder):
    """ generated source for class ArraySpecElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.ArraySpec")
    cGroup = rule.eContents().get(1)
    cLeftSquareBracketKeyword_0 = cGroup.eContents().get(0)
    cAlternatives_1 = cGroup.eContents().get(1)
    cOfVariableLengthAssignment_1_0 = cAlternatives_1.eContents().get(0)
    cOfVariableLengthRightSquareBracketKeyword_1_0_0 = cOfVariableLengthAssignment_1_0.eContents().get(0)
    cGroup_1_1 = cAlternatives_1.eContents().get(1)
    cLengthAssignment_1_1_0 = cGroup_1_1.eContents().get(0)
    cLengthINTTerminalRuleCall_1_1_0_0 = cLengthAssignment_1_1_0.eContents().get(0)
    cRightSquareBracketKeyword_1_1_1 = cGroup_1_1.eContents().get(1)

    # ArraySpec:
    #     '[' ( ofVariableLength?=']' | length=INT ']' );
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # '[' ( ofVariableLength?=']' | length=INT ']' )
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # '['
    def getLeftSquareBracketKeyword_0(self):
        """ generated source for method getLeftSquareBracketKeyword_0 """
        return self.cLeftSquareBracketKeyword_0

    # ( ofVariableLength?=']' | length=INT ']' )
    def getAlternatives_1(self):
        """ generated source for method getAlternatives_1 """
        return self.cAlternatives_1

    # ofVariableLength?=']'
    def getOfVariableLengthAssignment_1_0(self):
        """ generated source for method getOfVariableLengthAssignment_1_0 """
        return self.cOfVariableLengthAssignment_1_0

    # ']'
    def getOfVariableLengthRightSquareBracketKeyword_1_0_0(self):
        """ generated source for method getOfVariableLengthRightSquareBracketKeyword_1_0_0 """
        return self.cOfVariableLengthRightSquareBracketKeyword_1_0_0

    # length=INT ']'
    def getGroup_1_1(self):
        """ generated source for method getGroup_1_1 """
        return self.cGroup_1_1

    # length=INT
    def getLengthAssignment_1_1_0(self):
        """ generated source for method getLengthAssignment_1_1_0 """
        return self.cLengthAssignment_1_1_0

    # INT
    def getLengthINTTerminalRuleCall_1_1_0_0(self):
        """ generated source for method getLengthINTTerminalRuleCall_1_1_0_0 """
        return self.cLengthINTTerminalRuleCall_1_1_0_0

    # ']'
    def getRightSquareBracketKeyword_1_1_1(self):
        """ generated source for method getRightSquareBracketKeyword_1_1_1 """
        return self.cRightSquareBracketKeyword_1_1_1


class WidthSpecElements(AbstractParserRuleElementFinder):
    """ generated source for class WidthSpecElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.WidthSpec")
    cGroup = rule.eContents().get(1)
    cLeftSquareBracketKeyword_0 = cGroup.eContents().get(0)
    cAlternatives_1 = cGroup.eContents().get(1)
    cOfVariableLengthAssignment_1_0 = cAlternatives_1.eContents().get(0)
    cOfVariableLengthRightSquareBracketKeyword_1_0_0 = cOfVariableLengthAssignment_1_0.eContents().get(0)
    cGroup_1_1 = cAlternatives_1.eContents().get(1)
    cTermsAssignment_1_1_0 = cGroup_1_1.eContents().get(0)
    cTermsWidthTermParserRuleCall_1_1_0_0 = cTermsAssignment_1_1_0.eContents().get(0)
    cGroup_1_1_1 = cGroup_1_1.eContents().get(1)
    cPlusSignKeyword_1_1_1_0 = cGroup_1_1_1.eContents().get(0)
    cTermsAssignment_1_1_1_1 = cGroup_1_1_1.eContents().get(1)
    cTermsWidthTermParserRuleCall_1_1_1_1_0 = cTermsAssignment_1_1_1_1.eContents().get(0)
    cRightSquareBracketKeyword_1_1_2 = cGroup_1_1.eContents().get(2)

    # WidthSpec:
    #     '[' ( ofVariableLength?=']' | (terms+=WidthTerm) ('+' terms+=WidthTerm)* ']' );
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # '[' ( ofVariableLength?=']' | (terms+=WidthTerm) ('+' terms+=WidthTerm)* ']' )
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # '['
    def getLeftSquareBracketKeyword_0(self):
        """ generated source for method getLeftSquareBracketKeyword_0 """
        return self.cLeftSquareBracketKeyword_0

    # ( ofVariableLength?=']' | (terms+=WidthTerm) ('+' terms+=WidthTerm)* ']' )
    def getAlternatives_1(self):
        """ generated source for method getAlternatives_1 """
        return self.cAlternatives_1

    # ofVariableLength?=']'
    def getOfVariableLengthAssignment_1_0(self):
        """ generated source for method getOfVariableLengthAssignment_1_0 """
        return self.cOfVariableLengthAssignment_1_0

    # ']'
    def getOfVariableLengthRightSquareBracketKeyword_1_0_0(self):
        """ generated source for method getOfVariableLengthRightSquareBracketKeyword_1_0_0 """
        return self.cOfVariableLengthRightSquareBracketKeyword_1_0_0

    # (terms+=WidthTerm) ('+' terms+=WidthTerm)* ']'
    def getGroup_1_1(self):
        """ generated source for method getGroup_1_1 """
        return self.cGroup_1_1

    # (terms+=WidthTerm)
    def getTermsAssignment_1_1_0(self):
        """ generated source for method getTermsAssignment_1_1_0 """
        return self.cTermsAssignment_1_1_0

    # WidthTerm
    def getTermsWidthTermParserRuleCall_1_1_0_0(self):
        """ generated source for method getTermsWidthTermParserRuleCall_1_1_0_0 """
        return self.cTermsWidthTermParserRuleCall_1_1_0_0

    # ('+' terms+=WidthTerm)*
    def getGroup_1_1_1(self):
        """ generated source for method getGroup_1_1_1 """
        return self.cGroup_1_1_1

    # '+'
    def getPlusSignKeyword_1_1_1_0(self):
        """ generated source for method getPlusSignKeyword_1_1_1_0 """
        return self.cPlusSignKeyword_1_1_1_0

    # terms+=WidthTerm
    def getTermsAssignment_1_1_1_1(self):
        """ generated source for method getTermsAssignment_1_1_1_1 """
        return self.cTermsAssignment_1_1_1_1

    # WidthTerm
    def getTermsWidthTermParserRuleCall_1_1_1_1_0(self):
        """ generated source for method getTermsWidthTermParserRuleCall_1_1_1_1_0 """
        return self.cTermsWidthTermParserRuleCall_1_1_1_1_0

    # ']'
    def getRightSquareBracketKeyword_1_1_2(self):
        """ generated source for method getRightSquareBracketKeyword_1_1_2 """
        return self.cRightSquareBracketKeyword_1_1_2


class WidthTermElements(AbstractParserRuleElementFinder):
    """ generated source for class WidthTermElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.WidthTerm")
    cAlternatives = rule.eContents().get(1)
    cWidthAssignment_0 = cAlternatives.eContents().get(0)
    cWidthINTTerminalRuleCall_0_0 = cWidthAssignment_0.eContents().get(0)
    cParameterAssignment_1 = cAlternatives.eContents().get(1)
    cParameterParameterCrossReference_1_0 = cParameterAssignment_1.eContents().get(0)
    cParameterParameterIDTerminalRuleCall_1_0_1 = cParameterParameterCrossReference_1_0.eContents().get(1)
    cGroup_2 = cAlternatives.eContents().get(2)
    cWidthofKeyword_2_0 = cGroup_2.eContents().get(0)
    cPortAssignment_2_1 = cGroup_2.eContents().get(1)
    cPortVarRefParserRuleCall_2_1_0 = cPortAssignment_2_1.eContents().get(0)
    cRightParenthesisKeyword_2_2 = cGroup_2.eContents().get(2)
    cCodeAssignment_3 = cAlternatives.eContents().get(3)
    cCodeCodeParserRuleCall_3_0 = cCodeAssignment_3.eContents().get(0)

    # WidthTerm:
    #     width=INT
    #     | parameter=[Parameter]
    #     | 'widthof(' port=VarRef ')'
    #     | code=Code;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # width=INT
    # | parameter=[Parameter]
    # | 'widthof(' port=VarRef ')'
    # | code=Code
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # width=INT
    def getWidthAssignment_0(self):
        """ generated source for method getWidthAssignment_0 """
        return self.cWidthAssignment_0

    # INT
    def getWidthINTTerminalRuleCall_0_0(self):
        """ generated source for method getWidthINTTerminalRuleCall_0_0 """
        return self.cWidthINTTerminalRuleCall_0_0

    # parameter=[Parameter]
    def getParameterAssignment_1(self):
        """ generated source for method getParameterAssignment_1 """
        return self.cParameterAssignment_1

    # [Parameter]
    def getParameterParameterCrossReference_1_0(self):
        """ generated source for method getParameterParameterCrossReference_1_0 """
        return self.cParameterParameterCrossReference_1_0

    # ID
    def getParameterParameterIDTerminalRuleCall_1_0_1(self):
        """ generated source for method getParameterParameterIDTerminalRuleCall_1_0_1 """
        return self.cParameterParameterIDTerminalRuleCall_1_0_1

    # 'widthof(' port=VarRef ')'
    def getGroup_2(self):
        """ generated source for method getGroup_2 """
        return self.cGroup_2

    # 'widthof('
    def getWidthofKeyword_2_0(self):
        """ generated source for method getWidthofKeyword_2_0 """
        return self.cWidthofKeyword_2_0

    # port=VarRef
    def getPortAssignment_2_1(self):
        """ generated source for method getPortAssignment_2_1 """
        return self.cPortAssignment_2_1

    # VarRef
    def getPortVarRefParserRuleCall_2_1_0(self):
        """ generated source for method getPortVarRefParserRuleCall_2_1_0 """
        return self.cPortVarRefParserRuleCall_2_1_0

    # ')'
    def getRightParenthesisKeyword_2_2(self):
        """ generated source for method getRightParenthesisKeyword_2_2 """
        return self.cRightParenthesisKeyword_2_2

    # code=Code
    def getCodeAssignment_3(self):
        """ generated source for method getCodeAssignment_3 """
        return self.cCodeAssignment_3

    # Code
    def getCodeCodeParserRuleCall_3_0(self):
        """ generated source for method getCodeCodeParserRuleCall_3_0 """
        return self.cCodeCodeParserRuleCall_3_0


class IPV4HostElements(AbstractParserRuleElementFinder):
    """ generated source for class IPV4HostElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.IPV4Host")
    cGroup = rule.eContents().get(1)
    cGroup_0 = cGroup.eContents().get(0)
    cUserAssignment_0_0 = cGroup_0.eContents().get(0)
    cUserKebabParserRuleCall_0_0_0 = cUserAssignment_0_0.eContents().get(0)
    cCommercialAtKeyword_0_1 = cGroup_0.eContents().get(1)
    cAddrAssignment_1 = cGroup.eContents().get(1)
    cAddrIPV4AddrParserRuleCall_1_0 = cAddrAssignment_1.eContents().get(0)
    cGroup_2 = cGroup.eContents().get(2)
    cColonKeyword_2_0 = cGroup_2.eContents().get(0)
    cPortAssignment_2_1 = cGroup_2.eContents().get(1)
    cPortINTTerminalRuleCall_2_1_0 = cPortAssignment_2_1.eContents().get(0)

    # IPV4Host:
    #     (user=Kebab '@')? addr=IPV4Addr (':' port=INT)?
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (user=Kebab '@')? addr=IPV4Addr (':' port=INT)?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # (user=Kebab '@')?
    def getGroup_0(self):
        """ generated source for method getGroup_0 """
        return self.cGroup_0

    # user=Kebab
    def getUserAssignment_0_0(self):
        """ generated source for method getUserAssignment_0_0 """
        return self.cUserAssignment_0_0

    # Kebab
    def getUserKebabParserRuleCall_0_0_0(self):
        """ generated source for method getUserKebabParserRuleCall_0_0_0 """
        return self.cUserKebabParserRuleCall_0_0_0

    # '@'
    def getCommercialAtKeyword_0_1(self):
        """ generated source for method getCommercialAtKeyword_0_1 """
        return self.cCommercialAtKeyword_0_1

    # addr=IPV4Addr
    def getAddrAssignment_1(self):
        """ generated source for method getAddrAssignment_1 """
        return self.cAddrAssignment_1

    # IPV4Addr
    def getAddrIPV4AddrParserRuleCall_1_0(self):
        """ generated source for method getAddrIPV4AddrParserRuleCall_1_0 """
        return self.cAddrIPV4AddrParserRuleCall_1_0

    # (':' port=INT)?
    def getGroup_2(self):
        """ generated source for method getGroup_2 """
        return self.cGroup_2

    # ':'
    def getColonKeyword_2_0(self):
        """ generated source for method getColonKeyword_2_0 """
        return self.cColonKeyword_2_0

    # port=INT
    def getPortAssignment_2_1(self):
        """ generated source for method getPortAssignment_2_1 """
        return self.cPortAssignment_2_1

    # INT
    def getPortINTTerminalRuleCall_2_1_0(self):
        """ generated source for method getPortINTTerminalRuleCall_2_1_0 """
        return self.cPortINTTerminalRuleCall_2_1_0


class IPV6HostElements(AbstractParserRuleElementFinder):
    """ generated source for class IPV6HostElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.IPV6Host")
    cGroup = rule.eContents().get(1)
    cLeftSquareBracketKeyword_0 = cGroup.eContents().get(0)
    cGroup_1 = cGroup.eContents().get(1)
    cUserAssignment_1_0 = cGroup_1.eContents().get(0)
    cUserKebabParserRuleCall_1_0_0 = cUserAssignment_1_0.eContents().get(0)
    cCommercialAtKeyword_1_1 = cGroup_1.eContents().get(1)
    cAddrAssignment_2 = cGroup.eContents().get(2)
    cAddrIPV6AddrParserRuleCall_2_0 = cAddrAssignment_2.eContents().get(0)
    cRightSquareBracketKeyword_3 = cGroup.eContents().get(3)
    cGroup_4 = cGroup.eContents().get(4)
    cColonKeyword_4_0 = cGroup_4.eContents().get(0)
    cPortAssignment_4_1 = cGroup_4.eContents().get(1)
    cPortINTTerminalRuleCall_4_1_0 = cPortAssignment_4_1.eContents().get(0)

    # IPV6Host:
    #     ('[' (user=Kebab '@')? addr=IPV6Addr ']' (':' port=INT)?)
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # ('[' (user=Kebab '@')? addr=IPV6Addr ']' (':' port=INT)?)
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # '['
    def getLeftSquareBracketKeyword_0(self):
        """ generated source for method getLeftSquareBracketKeyword_0 """
        return self.cLeftSquareBracketKeyword_0

    # (user=Kebab '@')?
    def getGroup_1(self):
        """ generated source for method getGroup_1 """
        return self.cGroup_1

    # user=Kebab
    def getUserAssignment_1_0(self):
        """ generated source for method getUserAssignment_1_0 """
        return self.cUserAssignment_1_0

    # Kebab
    def getUserKebabParserRuleCall_1_0_0(self):
        """ generated source for method getUserKebabParserRuleCall_1_0_0 """
        return self.cUserKebabParserRuleCall_1_0_0

    # '@'
    def getCommercialAtKeyword_1_1(self):
        """ generated source for method getCommercialAtKeyword_1_1 """
        return self.cCommercialAtKeyword_1_1

    # addr=IPV6Addr
    def getAddrAssignment_2(self):
        """ generated source for method getAddrAssignment_2 """
        return self.cAddrAssignment_2

    # IPV6Addr
    def getAddrIPV6AddrParserRuleCall_2_0(self):
        """ generated source for method getAddrIPV6AddrParserRuleCall_2_0 """
        return self.cAddrIPV6AddrParserRuleCall_2_0

    # ']'
    def getRightSquareBracketKeyword_3(self):
        """ generated source for method getRightSquareBracketKeyword_3 """
        return self.cRightSquareBracketKeyword_3

    # (':' port=INT)?
    def getGroup_4(self):
        """ generated source for method getGroup_4 """
        return self.cGroup_4

    # ':'
    def getColonKeyword_4_0(self):
        """ generated source for method getColonKeyword_4_0 """
        return self.cColonKeyword_4_0

    # port=INT
    def getPortAssignment_4_1(self):
        """ generated source for method getPortAssignment_4_1 """
        return self.cPortAssignment_4_1

    # INT
    def getPortINTTerminalRuleCall_4_1_0(self):
        """ generated source for method getPortINTTerminalRuleCall_4_1_0 """
        return self.cPortINTTerminalRuleCall_4_1_0


class NamedHostElements(AbstractParserRuleElementFinder):
    """ generated source for class NamedHostElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.NamedHost")
    cGroup = rule.eContents().get(1)
    cGroup_0 = cGroup.eContents().get(0)
    cUserAssignment_0_0 = cGroup_0.eContents().get(0)
    cUserKebabParserRuleCall_0_0_0 = cUserAssignment_0_0.eContents().get(0)
    cCommercialAtKeyword_0_1 = cGroup_0.eContents().get(1)
    cAddrAssignment_1 = cGroup.eContents().get(1)
    cAddrHostNameParserRuleCall_1_0 = cAddrAssignment_1.eContents().get(0)
    cGroup_2 = cGroup.eContents().get(2)
    cColonKeyword_2_0 = cGroup_2.eContents().get(0)
    cPortAssignment_2_1 = cGroup_2.eContents().get(1)
    cPortINTTerminalRuleCall_2_1_0 = cPortAssignment_2_1.eContents().get(0)

    # NamedHost:
    #     (user=Kebab '@')? addr=HostName (':' port=INT)?
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (user=Kebab '@')? addr=HostName (':' port=INT)?
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # (user=Kebab '@')?
    def getGroup_0(self):
        """ generated source for method getGroup_0 """
        return self.cGroup_0

    # user=Kebab
    def getUserAssignment_0_0(self):
        """ generated source for method getUserAssignment_0_0 """
        return self.cUserAssignment_0_0

    # Kebab
    def getUserKebabParserRuleCall_0_0_0(self):
        """ generated source for method getUserKebabParserRuleCall_0_0_0 """
        return self.cUserKebabParserRuleCall_0_0_0

    # '@'
    def getCommercialAtKeyword_0_1(self):
        """ generated source for method getCommercialAtKeyword_0_1 """
        return self.cCommercialAtKeyword_0_1

    # addr=HostName
    def getAddrAssignment_1(self):
        """ generated source for method getAddrAssignment_1 """
        return self.cAddrAssignment_1

    # HostName
    def getAddrHostNameParserRuleCall_1_0(self):
        """ generated source for method getAddrHostNameParserRuleCall_1_0 """
        return self.cAddrHostNameParserRuleCall_1_0

    # (':' port=INT)?
    def getGroup_2(self):
        """ generated source for method getGroup_2 """
        return self.cGroup_2

    # ':'
    def getColonKeyword_2_0(self):
        """ generated source for method getColonKeyword_2_0 """
        return self.cColonKeyword_2_0

    # port=INT
    def getPortAssignment_2_1(self):
        """ generated source for method getPortAssignment_2_1 """
        return self.cPortAssignment_2_1

    # INT
    def getPortINTTerminalRuleCall_2_1_0(self):
        """ generated source for method getPortINTTerminalRuleCall_2_1_0 """
        return self.cPortINTTerminalRuleCall_2_1_0


class HostElements(AbstractParserRuleElementFinder):
    """ generated source for class HostElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Host")
    cAlternatives = rule.eContents().get(1)
    cIPV4HostParserRuleCall_0 = cAlternatives.eContents().get(0)
    cIPV6HostParserRuleCall_1 = cAlternatives.eContents().get(1)
    cNamedHostParserRuleCall_2 = cAlternatives.eContents().get(2)

    # Host:
    #     IPV4Host | IPV6Host | NamedHost
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # IPV4Host | IPV6Host | NamedHost
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # IPV4Host
    def getIPV4HostParserRuleCall_0(self):
        """ generated source for method getIPV4HostParserRuleCall_0 """
        return self.cIPV4HostParserRuleCall_0

    # IPV6Host
    def getIPV6HostParserRuleCall_1(self):
        """ generated source for method getIPV6HostParserRuleCall_1 """
        return self.cIPV6HostParserRuleCall_1

    # NamedHost
    def getNamedHostParserRuleCall_2(self):
        """ generated source for method getNamedHostParserRuleCall_2 """
        return self.cNamedHostParserRuleCall_2


class HostNameElements(AbstractParserRuleElementFinder):
    """ generated source for class HostNameElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.HostName")
    cGroup = rule.eContents().get(1)
    cKebabParserRuleCall_0 = cGroup.eContents().get(0)
    cGroup_1 = cGroup.eContents().get(1)
    cFullStopKeyword_1_0 = cGroup_1.eContents().get(0)
    cKebabParserRuleCall_1_1 = cGroup_1.eContents().get(1)

    # HostName:
    #     (Kebab (('.') Kebab)*)
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (Kebab (('.') Kebab)*)
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # Kebab
    def getKebabParserRuleCall_0(self):
        """ generated source for method getKebabParserRuleCall_0 """
        return self.cKebabParserRuleCall_0

    # (('.') Kebab)*
    def getGroup_1(self):
        """ generated source for method getGroup_1 """
        return self.cGroup_1

    # ('.')
    def getFullStopKeyword_1_0(self):
        """ generated source for method getFullStopKeyword_1_0 """
        return self.cFullStopKeyword_1_0

    # Kebab
    def getKebabParserRuleCall_1_1(self):
        """ generated source for method getKebabParserRuleCall_1_1 """
        return self.cKebabParserRuleCall_1_1


class DottedNameElements(AbstractParserRuleElementFinder):
    """ generated source for class DottedNameElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.DottedName")
    cGroup = rule.eContents().get(1)
    cIDTerminalRuleCall_0 = cGroup.eContents().get(0)
    cGroup_1 = cGroup.eContents().get(1)
    cAlternatives_1_0 = cGroup_1.eContents().get(0)
    cFullStopKeyword_1_0_0 = cAlternatives_1_0.eContents().get(0)
    cColonColonKeyword_1_0_1 = cAlternatives_1_0.eContents().get(1)
    cIDTerminalRuleCall_1_1 = cGroup_1.eContents().get(1)

    # DottedName:
    #     (ID (('.'|'::') ID)*)
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (ID (('.'|'::') ID)*)
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # ID
    def getIDTerminalRuleCall_0(self):
        """ generated source for method getIDTerminalRuleCall_0 """
        return self.cIDTerminalRuleCall_0

    # (('.'|'::') ID)*
    def getGroup_1(self):
        """ generated source for method getGroup_1 """
        return self.cGroup_1

    # ('.'|'::')
    def getAlternatives_1_0(self):
        """ generated source for method getAlternatives_1_0 """
        return self.cAlternatives_1_0

    # '.'
    def getFullStopKeyword_1_0_0(self):
        """ generated source for method getFullStopKeyword_1_0_0 """
        return self.cFullStopKeyword_1_0_0

    # '::'
    def getColonColonKeyword_1_0_1(self):
        """ generated source for method getColonColonKeyword_1_0_1 """
        return self.cColonColonKeyword_1_0_1

    # ID
    def getIDTerminalRuleCall_1_1(self):
        """ generated source for method getIDTerminalRuleCall_1_1 """
        return self.cIDTerminalRuleCall_1_1


class SignedIntElements(AbstractParserRuleElementFinder):
    """ generated source for class SignedIntElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.SignedInt")
    cAlternatives = rule.eContents().get(1)
    cINTTerminalRuleCall_0 = cAlternatives.eContents().get(0)
    cNEGINTTerminalRuleCall_1 = cAlternatives.eContents().get(1)

    # SignedInt:
    #     INT | NEGINT
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # INT | NEGINT
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # INT
    def getINTTerminalRuleCall_0(self):
        """ generated source for method getINTTerminalRuleCall_0 """
        return self.cINTTerminalRuleCall_0

    # NEGINT
    def getNEGINTTerminalRuleCall_1(self):
        """ generated source for method getNEGINTTerminalRuleCall_1 """
        return self.cNEGINTTerminalRuleCall_1


class LiteralElements(AbstractParserRuleElementFinder):
    """ generated source for class LiteralElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Literal")
    cAlternatives = rule.eContents().get(1)
    cSTRINGTerminalRuleCall_0 = cAlternatives.eContents().get(0)
    cCHAR_LITTerminalRuleCall_1 = cAlternatives.eContents().get(1)
    cSignedFloatParserRuleCall_2 = cAlternatives.eContents().get(2)
    cSignedIntParserRuleCall_3 = cAlternatives.eContents().get(3)
    cBooleanParserRuleCall_4 = cAlternatives.eContents().get(4)

    # Literal:
    #     STRING | CHAR_LIT | SignedFloat | SignedInt | Boolean;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # STRING | CHAR_LIT | SignedFloat | SignedInt | Boolean
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # STRING
    def getSTRINGTerminalRuleCall_0(self):
        """ generated source for method getSTRINGTerminalRuleCall_0 """
        return self.cSTRINGTerminalRuleCall_0

    # CHAR_LIT
    def getCHAR_LITTerminalRuleCall_1(self):
        """ generated source for method getCHAR_LITTerminalRuleCall_1 """
        return self.cCHAR_LITTerminalRuleCall_1

    # SignedFloat
    def getSignedFloatParserRuleCall_2(self):
        """ generated source for method getSignedFloatParserRuleCall_2 """
        return self.cSignedFloatParserRuleCall_2

    # SignedInt
    def getSignedIntParserRuleCall_3(self):
        """ generated source for method getSignedIntParserRuleCall_3 """
        return self.cSignedIntParserRuleCall_3

    # Boolean
    def getBooleanParserRuleCall_4(self):
        """ generated source for method getBooleanParserRuleCall_4 """
        return self.cBooleanParserRuleCall_4


class KebabElements(AbstractParserRuleElementFinder):
    """ generated source for class KebabElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Kebab")
    cGroup = rule.eContents().get(1)
    cAlternatives_0 = cGroup.eContents().get(0)
    cIDTerminalRuleCall_0_0 = cAlternatives_0.eContents().get(0)
    cPhysicalKeyword_0_1 = cAlternatives_0.eContents().get(1)
    cGroup_1 = cGroup.eContents().get(1)
    cHyphenMinusKeyword_1_0 = cGroup_1.eContents().get(0)
    cIDTerminalRuleCall_1_1 = cGroup_1.eContents().get(1)

    # Kebab: (ID|"physical")('-'ID)*;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (ID|"physical")('-'ID)*
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # (ID|"physical")
    def getAlternatives_0(self):
        """ generated source for method getAlternatives_0 """
        return self.cAlternatives_0

    # ID
    def getIDTerminalRuleCall_0_0(self):
        """ generated source for method getIDTerminalRuleCall_0_0 """
        return self.cIDTerminalRuleCall_0_0

    # "physical"
    def getPhysicalKeyword_0_1(self):
        """ generated source for method getPhysicalKeyword_0_1 """
        return self.cPhysicalKeyword_0_1

    # ('-'ID)*
    def getGroup_1(self):
        """ generated source for method getGroup_1 """
        return self.cGroup_1

    # '-'
    def getHyphenMinusKeyword_1_0(self):
        """ generated source for method getHyphenMinusKeyword_1_0 """
        return self.cHyphenMinusKeyword_1_0

    # ID
    def getIDTerminalRuleCall_1_1(self):
        """ generated source for method getIDTerminalRuleCall_1_1 """
        return self.cIDTerminalRuleCall_1_1


class IPV4AddrElements(AbstractParserRuleElementFinder):
    """ generated source for class IPV4AddrElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.IPV4Addr")
    cGroup = rule.eContents().get(1)
    cINTTerminalRuleCall_0 = cGroup.eContents().get(0)
    cFullStopKeyword_1 = cGroup.eContents().get(1)
    cINTTerminalRuleCall_2 = cGroup.eContents().get(2)
    cFullStopKeyword_3 = cGroup.eContents().get(3)
    cINTTerminalRuleCall_4 = cGroup.eContents().get(4)
    cFullStopKeyword_5 = cGroup.eContents().get(5)
    cINTTerminalRuleCall_6 = cGroup.eContents().get(6)

    # IPV4Addr:
    #     INT '.' INT '.' INT '.' INT
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # INT '.' INT '.' INT '.' INT
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # INT
    def getINTTerminalRuleCall_0(self):
        """ generated source for method getINTTerminalRuleCall_0 """
        return self.cINTTerminalRuleCall_0

    # '.'
    def getFullStopKeyword_1(self):
        """ generated source for method getFullStopKeyword_1 """
        return self.cFullStopKeyword_1

    # INT
    def getINTTerminalRuleCall_2(self):
        """ generated source for method getINTTerminalRuleCall_2 """
        return self.cINTTerminalRuleCall_2

    # '.'
    def getFullStopKeyword_3(self):
        """ generated source for method getFullStopKeyword_3 """
        return self.cFullStopKeyword_3

    # INT
    def getINTTerminalRuleCall_4(self):
        """ generated source for method getINTTerminalRuleCall_4 """
        return self.cINTTerminalRuleCall_4

    # '.'
    def getFullStopKeyword_5(self):
        """ generated source for method getFullStopKeyword_5 """
        return self.cFullStopKeyword_5

    # INT
    def getINTTerminalRuleCall_6(self):
        """ generated source for method getINTTerminalRuleCall_6 """
        return self.cINTTerminalRuleCall_6


class IPV6SegElements(AbstractParserRuleElementFinder):
    """ generated source for class IPV6SegElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.IPV6Seg")
    cAlternatives = rule.eContents().get(1)
    cINTTerminalRuleCall_0 = cAlternatives.eContents().get(0)
    cGroup_1 = cAlternatives.eContents().get(1)
    cINTTerminalRuleCall_1_0 = cGroup_1.eContents().get(0)
    cIDTerminalRuleCall_1_1 = cGroup_1.eContents().get(1)

    # IPV6Seg:
    #     // NOTE: This rule is too permissive by design.
    #     // Further checking is done during validation.
    #     (INT | (INT? ID))
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # // NOTE: This rule is too permissive by design.
    # // Further checking is done during validation.
    # (INT | (INT? ID))
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # INT
    def getINTTerminalRuleCall_0(self):
        """ generated source for method getINTTerminalRuleCall_0 """
        return self.cINTTerminalRuleCall_0

    # (INT? ID)
    def getGroup_1(self):
        """ generated source for method getGroup_1 """
        return self.cGroup_1

    # INT?
    def getINTTerminalRuleCall_1_0(self):
        """ generated source for method getINTTerminalRuleCall_1_0 """
        return self.cINTTerminalRuleCall_1_0

    # ID
    def getIDTerminalRuleCall_1_1(self):
        """ generated source for method getIDTerminalRuleCall_1_1 """
        return self.cIDTerminalRuleCall_1_1


class IPV6AddrElements(AbstractParserRuleElementFinder):
    """ generated source for class IPV6AddrElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.IPV6Addr")
    cAlternatives = rule.eContents().get(1)
    cColonColonKeyword_0 = cAlternatives.eContents().get(0)
    cGroup_1 = cAlternatives.eContents().get(1)
    cColonColonKeyword_1_0 = cGroup_1.eContents().get(0)
    cGroup_1_1 = cGroup_1.eContents().get(1)
    cIPV6SegParserRuleCall_1_1_0 = cGroup_1_1.eContents().get(0)
    cColonKeyword_1_1_1 = cGroup_1_1.eContents().get(1)
    cIPV6SegParserRuleCall_1_2 = cGroup_1.eContents().get(2)
    cGroup_2 = cAlternatives.eContents().get(2)
    cGroup_2_0 = cGroup_2.eContents().get(0)
    cIPV6SegParserRuleCall_2_0_0 = cGroup_2_0.eContents().get(0)
    cAlternatives_2_0_1 = cGroup_2_0.eContents().get(1)
    cColonKeyword_2_0_1_0 = cAlternatives_2_0_1.eContents().get(0)
    cColonColonKeyword_2_0_1_1 = cAlternatives_2_0_1.eContents().get(1)
    cIPV6SegParserRuleCall_2_1 = cGroup_2.eContents().get(1)
    cGroup_3 = cAlternatives.eContents().get(3)
    cIDTerminalRuleCall_3_0 = cGroup_3.eContents().get(0)
    cColonColonKeyword_3_1 = cGroup_3.eContents().get(1)
    cIPV6SegParserRuleCall_3_2 = cGroup_3.eContents().get(2)
    cGroup_3_3 = cGroup_3.eContents().get(3)
    cColonKeyword_3_3_0 = cGroup_3_3.eContents().get(0)
    cIPV6SegParserRuleCall_3_3_1 = cGroup_3_3.eContents().get(1)
    cPercentSignKeyword_3_4 = cGroup_3.eContents().get(4)
    cAlternatives_3_5 = cGroup_3.eContents().get(5)
    cINTTerminalRuleCall_3_5_0 = cAlternatives_3_5.eContents().get(0)
    cIDTerminalRuleCall_3_5_1 = cAlternatives_3_5.eContents().get(1)
    cGroup_4 = cAlternatives.eContents().get(4)
    cColonColonKeyword_4_0 = cGroup_4.eContents().get(0)
    cIPV4AddrParserRuleCall_4_1 = cGroup_4.eContents().get(1)
    cGroup_5 = cAlternatives.eContents().get(5)
    cColonColonKeyword_5_0 = cGroup_5.eContents().get(0)
    cIDTerminalRuleCall_5_1 = cGroup_5.eContents().get(1)
    cColonKeyword_5_2 = cGroup_5.eContents().get(2)
    cGroup_5_3 = cGroup_5.eContents().get(3)
    cINTTerminalRuleCall_5_3_0 = cGroup_5_3.eContents().get(0)
    cColonKeyword_5_3_1 = cGroup_5_3.eContents().get(1)
    cIPV4AddrParserRuleCall_5_4 = cGroup_5.eContents().get(4)
    cGroup_6 = cAlternatives.eContents().get(6)
    cAlternatives_6_0 = cGroup_6.eContents().get(0)
    cGroup_6_0_0 = cAlternatives_6_0.eContents().get(0)
    cIPV6SegParserRuleCall_6_0_0_0 = cGroup_6_0_0.eContents().get(0)
    cGroup_6_0_0_1 = cGroup_6_0_0.eContents().get(1)
    cColonKeyword_6_0_0_1_0 = cGroup_6_0_0_1.eContents().get(0)
    cIPV6SegParserRuleCall_6_0_0_1_1 = cGroup_6_0_0_1.eContents().get(1)
    cColonColonKeyword_6_0_0_2 = cGroup_6_0_0.eContents().get(2)
    cGroup_6_0_1 = cAlternatives_6_0.eContents().get(1)
    cGroup_6_0_1_0 = cGroup_6_0_1.eContents().get(0)
    cIPV6SegParserRuleCall_6_0_1_0_0 = cGroup_6_0_1_0.eContents().get(0)
    cGroup_6_0_1_0_1 = cGroup_6_0_1_0.eContents().get(1)
    cColonKeyword_6_0_1_0_1_0 = cGroup_6_0_1_0_1.eContents().get(0)
    cIPV6SegParserRuleCall_6_0_1_0_1_1 = cGroup_6_0_1_0_1.eContents().get(1)
    cColonKeyword_6_0_1_1 = cGroup_6_0_1.eContents().get(1)
    cIPV4AddrParserRuleCall_6_1 = cGroup_6.eContents().get(1)

    # IPV6Addr:
    #     // NOTE: This rule is too permissive by design.
    #     // Further checking is done during validation.
    #     // IPV6 with truncation.
    #     '::' | ('::' (IPV6Seg (':'))* IPV6Seg) | ((IPV6Seg (':'|'::'))+ IPV6Seg?) |
    #     // (Link-local IPv6 addresses with zone index) "fe80::7:8%1"
    #     (ID '::' IPV6Seg (':' IPV6Seg)* '%' (INT | ID)+) |
    #     // IPv4-mapped IPv6 addresses and IPv4-translated addresses
    #     ('::' IPV4Addr) | ('::' ID ':' (INT ':')? IPV4Addr) |
    #     // IPv4-Embedded IPv6 Address
    #     (((IPV6Seg (':' IPV6Seg)* '::') | (IPV6Seg (':' IPV6Seg)*) ':') IPV4Addr)
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # // NOTE: This rule is too permissive by design.
    # // Further checking is done during validation.
    # // IPV6 with truncation.
    # '::' | ('::' (IPV6Seg (':'))* IPV6Seg) | ((IPV6Seg (':'|'::'))+ IPV6Seg?) |
    # // (Link-local IPv6 addresses with zone index) "fe80::7:8%1"
    # (ID '::' IPV6Seg (':' IPV6Seg)* '%' (INT | ID)+) |
    # // IPv4-mapped IPv6 addresses and IPv4-translated addresses
    # ('::' IPV4Addr) | ('::' ID ':' (INT ':')? IPV4Addr) |
    # // IPv4-Embedded IPv6 Address
    # (((IPV6Seg (':' IPV6Seg)* '::') | (IPV6Seg (':' IPV6Seg)*) ':') IPV4Addr)
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # // NOTE: This rule is too permissive by design.
    # // Further checking is done during validation.
    # // IPV6 with truncation.
    # '::'
    def getColonColonKeyword_0(self):
        """ generated source for method getColonColonKeyword_0 """
        return self.cColonColonKeyword_0

    # ('::' (IPV6Seg (':'))* IPV6Seg)
    def getGroup_1(self):
        """ generated source for method getGroup_1 """
        return self.cGroup_1

    # '::'
    def getColonColonKeyword_1_0(self):
        """ generated source for method getColonColonKeyword_1_0 """
        return self.cColonColonKeyword_1_0

    # (IPV6Seg (':'))*
    def getGroup_1_1(self):
        """ generated source for method getGroup_1_1 """
        return self.cGroup_1_1

    # IPV6Seg
    def getIPV6SegParserRuleCall_1_1_0(self):
        """ generated source for method getIPV6SegParserRuleCall_1_1_0 """
        return self.cIPV6SegParserRuleCall_1_1_0

    # (':')
    def getColonKeyword_1_1_1(self):
        """ generated source for method getColonKeyword_1_1_1 """
        return self.cColonKeyword_1_1_1

    # IPV6Seg
    def getIPV6SegParserRuleCall_1_2(self):
        """ generated source for method getIPV6SegParserRuleCall_1_2 """
        return self.cIPV6SegParserRuleCall_1_2

    # ((IPV6Seg (':'|'::'))+ IPV6Seg?)
    def getGroup_2(self):
        """ generated source for method getGroup_2 """
        return self.cGroup_2

    # (IPV6Seg (':'|'::'))+
    def getGroup_2_0(self):
        """ generated source for method getGroup_2_0 """
        return self.cGroup_2_0

    # IPV6Seg
    def getIPV6SegParserRuleCall_2_0_0(self):
        """ generated source for method getIPV6SegParserRuleCall_2_0_0 """
        return self.cIPV6SegParserRuleCall_2_0_0

    # (':'|'::')
    def getAlternatives_2_0_1(self):
        """ generated source for method getAlternatives_2_0_1 """
        return self.cAlternatives_2_0_1

    # ':'
    def getColonKeyword_2_0_1_0(self):
        """ generated source for method getColonKeyword_2_0_1_0 """
        return self.cColonKeyword_2_0_1_0

    # '::'
    def getColonColonKeyword_2_0_1_1(self):
        """ generated source for method getColonColonKeyword_2_0_1_1 """
        return self.cColonColonKeyword_2_0_1_1

    # IPV6Seg?
    def getIPV6SegParserRuleCall_2_1(self):
        """ generated source for method getIPV6SegParserRuleCall_2_1 """
        return self.cIPV6SegParserRuleCall_2_1

    # // (Link-local IPv6 addresses with zone index) "fe80::7:8%1"
    # (ID '::' IPV6Seg (':' IPV6Seg)* '%' (INT | ID)+)
    def getGroup_3(self):
        """ generated source for method getGroup_3 """
        return self.cGroup_3

    # ID
    def getIDTerminalRuleCall_3_0(self):
        """ generated source for method getIDTerminalRuleCall_3_0 """
        return self.cIDTerminalRuleCall_3_0

    # '::'
    def getColonColonKeyword_3_1(self):
        """ generated source for method getColonColonKeyword_3_1 """
        return self.cColonColonKeyword_3_1

    # IPV6Seg
    def getIPV6SegParserRuleCall_3_2(self):
        """ generated source for method getIPV6SegParserRuleCall_3_2 """
        return self.cIPV6SegParserRuleCall_3_2

    # (':' IPV6Seg)*
    def getGroup_3_3(self):
        """ generated source for method getGroup_3_3 """
        return self.cGroup_3_3

    # ':'
    def getColonKeyword_3_3_0(self):
        """ generated source for method getColonKeyword_3_3_0 """
        return self.cColonKeyword_3_3_0

    # IPV6Seg
    def getIPV6SegParserRuleCall_3_3_1(self):
        """ generated source for method getIPV6SegParserRuleCall_3_3_1 """
        return self.cIPV6SegParserRuleCall_3_3_1

    # '%'
    def getPercentSignKeyword_3_4(self):
        """ generated source for method getPercentSignKeyword_3_4 """
        return self.cPercentSignKeyword_3_4

    # (INT | ID)+
    def getAlternatives_3_5(self):
        """ generated source for method getAlternatives_3_5 """
        return self.cAlternatives_3_5

    # INT
    def getINTTerminalRuleCall_3_5_0(self):
        """ generated source for method getINTTerminalRuleCall_3_5_0 """
        return self.cINTTerminalRuleCall_3_5_0

    # ID
    def getIDTerminalRuleCall_3_5_1(self):
        """ generated source for method getIDTerminalRuleCall_3_5_1 """
        return self.cIDTerminalRuleCall_3_5_1

    # // IPv4-mapped IPv6 addresses and IPv4-translated addresses
    # ('::' IPV4Addr)
    def getGroup_4(self):
        """ generated source for method getGroup_4 """
        return self.cGroup_4

    # '::'
    def getColonColonKeyword_4_0(self):
        """ generated source for method getColonColonKeyword_4_0 """
        return self.cColonColonKeyword_4_0

    # IPV4Addr
    def getIPV4AddrParserRuleCall_4_1(self):
        """ generated source for method getIPV4AddrParserRuleCall_4_1 """
        return self.cIPV4AddrParserRuleCall_4_1

    # ('::' ID ':' (INT ':')? IPV4Addr)
    def getGroup_5(self):
        """ generated source for method getGroup_5 """
        return self.cGroup_5

    # '::'
    def getColonColonKeyword_5_0(self):
        """ generated source for method getColonColonKeyword_5_0 """
        return self.cColonColonKeyword_5_0

    # ID
    def getIDTerminalRuleCall_5_1(self):
        """ generated source for method getIDTerminalRuleCall_5_1 """
        return self.cIDTerminalRuleCall_5_1

    # ':'
    def getColonKeyword_5_2(self):
        """ generated source for method getColonKeyword_5_2 """
        return self.cColonKeyword_5_2

    # (INT ':')?
    def getGroup_5_3(self):
        """ generated source for method getGroup_5_3 """
        return self.cGroup_5_3

    # INT
    def getINTTerminalRuleCall_5_3_0(self):
        """ generated source for method getINTTerminalRuleCall_5_3_0 """
        return self.cINTTerminalRuleCall_5_3_0

    # ':'
    def getColonKeyword_5_3_1(self):
        """ generated source for method getColonKeyword_5_3_1 """
        return self.cColonKeyword_5_3_1

    # IPV4Addr
    def getIPV4AddrParserRuleCall_5_4(self):
        """ generated source for method getIPV4AddrParserRuleCall_5_4 """
        return self.cIPV4AddrParserRuleCall_5_4

    # // IPv4-Embedded IPv6 Address
    # (((IPV6Seg (':' IPV6Seg)* '::') | (IPV6Seg (':' IPV6Seg)*) ':') IPV4Addr)
    def getGroup_6(self):
        """ generated source for method getGroup_6 """
        return self.cGroup_6

    # ((IPV6Seg (':' IPV6Seg)* '::') | (IPV6Seg (':' IPV6Seg)*) ':')
    def getAlternatives_6_0(self):
        """ generated source for method getAlternatives_6_0 """
        return self.cAlternatives_6_0

    # (IPV6Seg (':' IPV6Seg)* '::')
    def getGroup_6_0_0(self):
        """ generated source for method getGroup_6_0_0 """
        return self.cGroup_6_0_0

    # IPV6Seg
    def getIPV6SegParserRuleCall_6_0_0_0(self):
        """ generated source for method getIPV6SegParserRuleCall_6_0_0_0 """
        return self.cIPV6SegParserRuleCall_6_0_0_0

    # (':' IPV6Seg)*
    def getGroup_6_0_0_1(self):
        """ generated source for method getGroup_6_0_0_1 """
        return self.cGroup_6_0_0_1

    # ':'
    def getColonKeyword_6_0_0_1_0(self):
        """ generated source for method getColonKeyword_6_0_0_1_0 """
        return self.cColonKeyword_6_0_0_1_0

    # IPV6Seg
    def getIPV6SegParserRuleCall_6_0_0_1_1(self):
        """ generated source for method getIPV6SegParserRuleCall_6_0_0_1_1 """
        return self.cIPV6SegParserRuleCall_6_0_0_1_1

    # '::'
    def getColonColonKeyword_6_0_0_2(self):
        """ generated source for method getColonColonKeyword_6_0_0_2 """
        return self.cColonColonKeyword_6_0_0_2

    # (IPV6Seg (':' IPV6Seg)*) ':'
    def getGroup_6_0_1(self):
        """ generated source for method getGroup_6_0_1 """
        return self.cGroup_6_0_1

    # (IPV6Seg (':' IPV6Seg)*)
    def getGroup_6_0_1_0(self):
        """ generated source for method getGroup_6_0_1_0 """
        return self.cGroup_6_0_1_0

    # IPV6Seg
    def getIPV6SegParserRuleCall_6_0_1_0_0(self):
        """ generated source for method getIPV6SegParserRuleCall_6_0_1_0_0 """
        return self.cIPV6SegParserRuleCall_6_0_1_0_0

    # (':' IPV6Seg)*
    def getGroup_6_0_1_0_1(self):
        """ generated source for method getGroup_6_0_1_0_1 """
        return self.cGroup_6_0_1_0_1

    # ':'
    def getColonKeyword_6_0_1_0_1_0(self):
        """ generated source for method getColonKeyword_6_0_1_0_1_0 """
        return self.cColonKeyword_6_0_1_0_1_0

    # IPV6Seg
    def getIPV6SegParserRuleCall_6_0_1_0_1_1(self):
        """ generated source for method getIPV6SegParserRuleCall_6_0_1_0_1_1 """
        return self.cIPV6SegParserRuleCall_6_0_1_0_1_1

    # ':'
    def getColonKeyword_6_0_1_1(self):
        """ generated source for method getColonKeyword_6_0_1_1 """
        return self.cColonKeyword_6_0_1_1

    # IPV4Addr
    def getIPV4AddrParserRuleCall_6_1(self):
        """ generated source for method getIPV4AddrParserRuleCall_6_1 """
        return self.cIPV4AddrParserRuleCall_6_1


class SignedFloatElements(AbstractParserRuleElementFinder):
    """ generated source for class SignedFloatElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.SignedFloat")
    cGroup = rule.eContents().get(1)
    cAlternatives_0 = cGroup.eContents().get(0)
    cSignedIntParserRuleCall_0_0 = cAlternatives_0.eContents().get(0)
    cHyphenMinusKeyword_0_1 = cAlternatives_0.eContents().get(1)
    cFullStopKeyword_1 = cGroup.eContents().get(1)
    cAlternatives_2 = cGroup.eContents().get(2)
    cINTTerminalRuleCall_2_0 = cAlternatives_2.eContents().get(0)
    cFLOAT_EXP_SUFFIXTerminalRuleCall_2_1 = cAlternatives_2.eContents().get(1)

    # SignedFloat:
    #     (SignedInt | '-')? '.' (INT | FLOAT_EXP_SUFFIX);
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (SignedInt | '-')? '.' (INT | FLOAT_EXP_SUFFIX)
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # (SignedInt | '-')?
    def getAlternatives_0(self):
        """ generated source for method getAlternatives_0 """
        return self.cAlternatives_0

    # SignedInt
    def getSignedIntParserRuleCall_0_0(self):
        """ generated source for method getSignedIntParserRuleCall_0_0 """
        return self.cSignedIntParserRuleCall_0_0

    # '-'
    def getHyphenMinusKeyword_0_1(self):
        """ generated source for method getHyphenMinusKeyword_0_1 """
        return self.cHyphenMinusKeyword_0_1

    # '.'
    def getFullStopKeyword_1(self):
        """ generated source for method getFullStopKeyword_1 """
        return self.cFullStopKeyword_1

    # (INT | FLOAT_EXP_SUFFIX)
    def getAlternatives_2(self):
        """ generated source for method getAlternatives_2 """
        return self.cAlternatives_2

    # INT
    def getINTTerminalRuleCall_2_0(self):
        """ generated source for method getINTTerminalRuleCall_2_0 """
        return self.cINTTerminalRuleCall_2_0

    # FLOAT_EXP_SUFFIX
    def getFLOAT_EXP_SUFFIXTerminalRuleCall_2_1(self):
        """ generated source for method getFLOAT_EXP_SUFFIXTerminalRuleCall_2_1 """
        return self.cFLOAT_EXP_SUFFIXTerminalRuleCall_2_1


class CodeElements(AbstractParserRuleElementFinder):
    """ generated source for class CodeElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Code")
    cGroup = rule.eContents().get(1)
    cCodeAction_0 = cGroup.eContents().get(0)
    cLeftCurlyBracketEqualsSignKeyword_1 = cGroup.eContents().get(1)
    cBodyAssignment_2 = cGroup.eContents().get(2)
    cBodyBodyParserRuleCall_2_0 = cBodyAssignment_2.eContents().get(0)
    cEqualsSignRightCurlyBracketKeyword_3 = cGroup.eContents().get(3)

    # // FIXME: What if the code needs to contain '=}'?
    # // Just escaping with \ is not a good idea because then every \ has to be escaped \\.
    # // Perhaps the string EQUALS_BRACE could become '=}'?
    # Code:
    #     //{Code} '{=' (tokens+=Token)* '=}'
    #     {Code} '{=' body=Body '=}'
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # //{Code} '{=' (tokens+=Token)* '=}'
    # {Code} '{=' body=Body '=}'
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # //{Code} '{=' (tokens+=Token)* '=}'
    # {Code}
    def getCodeAction_0(self):
        """ generated source for method getCodeAction_0 """
        return self.cCodeAction_0

    # '{='
    def getLeftCurlyBracketEqualsSignKeyword_1(self):
        """ generated source for method getLeftCurlyBracketEqualsSignKeyword_1 """
        return self.cLeftCurlyBracketEqualsSignKeyword_1

    # body=Body
    def getBodyAssignment_2(self):
        """ generated source for method getBodyAssignment_2 """
        return self.cBodyAssignment_2

    # Body
    def getBodyBodyParserRuleCall_2_0(self):
        """ generated source for method getBodyBodyParserRuleCall_2_0 """
        return self.cBodyBodyParserRuleCall_2_0

    # '=}'
    def getEqualsSignRightCurlyBracketKeyword_3(self):
        """ generated source for method getEqualsSignRightCurlyBracketKeyword_3 """
        return self.cEqualsSignRightCurlyBracketKeyword_3


class FSNameElements(AbstractParserRuleElementFinder):
    """ generated source for class FSNameElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.FSName")
    cAlternatives = rule.eContents().get(1)
    cIDTerminalRuleCall_0 = cAlternatives.eContents().get(0)
    cFullStopKeyword_1 = cAlternatives.eContents().get(1)
    c_Keyword_2 = cAlternatives.eContents().get(2)

    # FSName:
    #     (ID | '.' | '_')+
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (ID | '.' | '_')+
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # ID
    def getIDTerminalRuleCall_0(self):
        """ generated source for method getIDTerminalRuleCall_0 """
        return self.cIDTerminalRuleCall_0

    # '.'
    def getFullStopKeyword_1(self):
        """ generated source for method getFullStopKeyword_1 """
        return self.cFullStopKeyword_1

    # '_'
    def get_Keyword_2(self):
        """ generated source for method get_Keyword_2 """
        return self.c_Keyword_2


class PathElements(AbstractParserRuleElementFinder):
    """ generated source for class PathElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Path")
    cGroup = rule.eContents().get(1)
    cGroup_0 = cGroup.eContents().get(0)
    cFSNameParserRuleCall_0_0 = cGroup_0.eContents().get(0)
    cColonReverseSolidusKeyword_0_1 = cGroup_0.eContents().get(1)
    cAlternatives_1 = cGroup.eContents().get(1)
    cBackslashKeyword_1_0 = cAlternatives_1.eContents().get(0)
    cSolidusKeyword_1_1 = cAlternatives_1.eContents().get(1)
    cFSNameParserRuleCall_2 = cGroup.eContents().get(2)
    cGroup_3 = cGroup.eContents().get(3)
    cAlternatives_3_0 = cGroup_3.eContents().get(0)
    cBackslashKeyword_3_0_0 = cAlternatives_3_0.eContents().get(0)
    cSolidusKeyword_3_0_1 = cAlternatives_3_0.eContents().get(1)
    cFSNameParserRuleCall_3_1 = cGroup_3.eContents().get(1)

    # // Absolute or relative directory path in Windows, Linux, or MacOS.
    # Path:
    #     (FSName ':\\')? ('\\' | '/')? FSName (('\\' | '/') FSName)*
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # (FSName ':\\')? ('\\' | '/')? FSName (('\\' | '/') FSName)*
    def getGroup(self):
        """ generated source for method getGroup """
        return self.cGroup

    # (FSName ':\\')?
    def getGroup_0(self):
        """ generated source for method getGroup_0 """
        return self.cGroup_0

    # FSName
    def getFSNameParserRuleCall_0_0(self):
        """ generated source for method getFSNameParserRuleCall_0_0 """
        return self.cFSNameParserRuleCall_0_0

    # ':\\'
    def getColonReverseSolidusKeyword_0_1(self):
        """ generated source for method getColonReverseSolidusKeyword_0_1 """
        return self.cColonReverseSolidusKeyword_0_1

    # ('\\' | '/')?
    def getAlternatives_1(self):
        """ generated source for method getAlternatives_1 """
        return self.cAlternatives_1

    # '\\'
    def getBackslashKeyword_1_0(self):
        """ generated source for method getBackslashKeyword_1_0 """
        return self.cBackslashKeyword_1_0

    # '/'
    def getSolidusKeyword_1_1(self):
        """ generated source for method getSolidusKeyword_1_1 """
        return self.cSolidusKeyword_1_1

    # FSName
    def getFSNameParserRuleCall_2(self):
        """ generated source for method getFSNameParserRuleCall_2 """
        return self.cFSNameParserRuleCall_2

    # (('\\' | '/') FSName)*
    def getGroup_3(self):
        """ generated source for method getGroup_3 """
        return self.cGroup_3

    # ('\\' | '/')
    def getAlternatives_3_0(self):
        """ generated source for method getAlternatives_3_0 """
        return self.cAlternatives_3_0

    # '\\'
    def getBackslashKeyword_3_0_0(self):
        """ generated source for method getBackslashKeyword_3_0_0 """
        return self.cBackslashKeyword_3_0_0

    # '/'
    def getSolidusKeyword_3_0_1(self):
        """ generated source for method getSolidusKeyword_3_0_1 """
        return self.cSolidusKeyword_3_0_1

    # FSName
    def getFSNameParserRuleCall_3_1(self):
        """ generated source for method getFSNameParserRuleCall_3_1 """
        return self.cFSNameParserRuleCall_3_1


class TimeUnitElements(AbstractParserRuleElementFinder):
    """ generated source for class TimeUnitElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.TimeUnit")
    cIDTerminalRuleCall = rule.eContents().get(1)

    # // Note: time units are not keywords, otherwise it would reserve
    # // a lot of useful identifiers (like 's' or 'd').
    # // The validator ensures the unit is valid.
    # TimeUnit: ID;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # ID
    def getIDTerminalRuleCall(self):
        """ generated source for method getIDTerminalRuleCall """
        return self.cIDTerminalRuleCall


class BodyElements(AbstractParserRuleElementFinder):
    """ generated source for class BodyElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Body")
    cTokenParserRuleCall = rule.eContents().get(1)

    # // An arbitrary sequence of terminals.
    # Body:
    #     Token*
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # Token*
    def getTokenParserRuleCall(self):
        """ generated source for method getTokenParserRuleCall """
        return self.cTokenParserRuleCall


class TokenElements(AbstractParserRuleElementFinder):
    """ generated source for class TokenElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Token")
    cAlternatives = rule.eContents().get(1)
    cIDTerminalRuleCall_0 = cAlternatives.eContents().get(0)
    cINTTerminalRuleCall_1 = cAlternatives.eContents().get(1)
    cFLOAT_EXP_SUFFIXTerminalRuleCall_2 = cAlternatives.eContents().get(2)
    cLT_ANNOTTerminalRuleCall_3 = cAlternatives.eContents().get(3)
    cSTRINGTerminalRuleCall_4 = cAlternatives.eContents().get(4)
    cCHAR_LITTerminalRuleCall_5 = cAlternatives.eContents().get(5)
    cML_COMMENTTerminalRuleCall_6 = cAlternatives.eContents().get(6)
    cSL_COMMENTTerminalRuleCall_7 = cAlternatives.eContents().get(7)
    cWSTerminalRuleCall_8 = cAlternatives.eContents().get(8)
    cANY_OTHERTerminalRuleCall_9 = cAlternatives.eContents().get(9)
    cTargetKeyword_10 = cAlternatives.eContents().get(10)
    cImportKeyword_11 = cAlternatives.eContents().get(11)
    cMainKeyword_12 = cAlternatives.eContents().get(12)
    cRealtimeKeyword_13 = cAlternatives.eContents().get(13)
    cReactorKeyword_14 = cAlternatives.eContents().get(14)
    cStateKeyword_15 = cAlternatives.eContents().get(15)
    cTimeKeyword_16 = cAlternatives.eContents().get(16)
    cMutableKeyword_17 = cAlternatives.eContents().get(17)
    cInputKeyword_18 = cAlternatives.eContents().get(18)
    cOutputKeyword_19 = cAlternatives.eContents().get(19)
    cTimerKeyword_20 = cAlternatives.eContents().get(20)
    cActionKeyword_21 = cAlternatives.eContents().get(21)
    cReactionKeyword_22 = cAlternatives.eContents().get(22)
    cStartupKeyword_23 = cAlternatives.eContents().get(23)
    cShutdownKeyword_24 = cAlternatives.eContents().get(24)
    cAfterKeyword_25 = cAlternatives.eContents().get(25)
    cDeadlineKeyword_26 = cAlternatives.eContents().get(26)
    cMutationKeyword_27 = cAlternatives.eContents().get(27)
    cPreambleKeyword_28 = cAlternatives.eContents().get(28)
    cNewKeyword_29 = cAlternatives.eContents().get(29)
    cFederatedKeyword_30 = cAlternatives.eContents().get(30)
    cAtKeyword_31 = cAlternatives.eContents().get(31)
    cAsKeyword_32 = cAlternatives.eContents().get(32)
    cFromKeyword_33 = cAlternatives.eContents().get(33)
    cWidthofKeyword_34 = cAlternatives.eContents().get(34)
    cConstKeyword_35 = cAlternatives.eContents().get(35)
    cMethodKeyword_36 = cAlternatives.eContents().get(36)
    cInterleavedKeyword_37 = cAlternatives.eContents().get(37)
    cModeKeyword_38 = cAlternatives.eContents().get(38)
    cInitialKeyword_39 = cAlternatives.eContents().get(39)
    cResetKeyword_40 = cAlternatives.eContents().get(40)
    cHistoryKeyword_41 = cAlternatives.eContents().get(41)
    cNEGINTTerminalRuleCall_42 = cAlternatives.eContents().get(42)
    cTRUETerminalRuleCall_43 = cAlternatives.eContents().get(43)
    cFALSETerminalRuleCall_44 = cAlternatives.eContents().get(44)
    cLogicalKeyword_45 = cAlternatives.eContents().get(45)
    cPhysicalKeyword_46 = cAlternatives.eContents().get(46)
    cPrivateKeyword_47 = cAlternatives.eContents().get(47)
    cPublicKeyword_48 = cAlternatives.eContents().get(48)
    cLeftParenthesisKeyword_49 = cAlternatives.eContents().get(49)
    cRightParenthesisKeyword_50 = cAlternatives.eContents().get(50)
    cLeftCurlyBracketKeyword_51 = cAlternatives.eContents().get(51)
    cRightCurlyBracketKeyword_52 = cAlternatives.eContents().get(52)
    cLeftSquareBracketKeyword_53 = cAlternatives.eContents().get(53)
    cRightSquareBracketKeyword_54 = cAlternatives.eContents().get(54)
    cLessThanSignKeyword_55 = cAlternatives.eContents().get(55)
    cGreaterThanSignKeyword_56 = cAlternatives.eContents().get(56)
    cColonKeyword_57 = cAlternatives.eContents().get(57)
    cSemicolonKeyword_58 = cAlternatives.eContents().get(58)
    cCommaKeyword_59 = cAlternatives.eContents().get(59)
    cFullStopKeyword_60 = cAlternatives.eContents().get(60)
    cColonColonKeyword_61 = cAlternatives.eContents().get(61)
    cColonReverseSolidusKeyword_62 = cAlternatives.eContents().get(62)
    cBackslashKeyword_63 = cAlternatives.eContents().get(63)
    cPlusSignKeyword_64 = cAlternatives.eContents().get(64)
    cHyphenMinusKeyword_65 = cAlternatives.eContents().get(65)
    cAsteriskKeyword_66 = cAlternatives.eContents().get(66)
    cSolidusKeyword_67 = cAlternatives.eContents().get(67)
    c_Keyword_68 = cAlternatives.eContents().get(68)
    cHyphenMinusGreaterThanSignKeyword_69 = cAlternatives.eContents().get(69)
    cEqualsSignKeyword_70 = cAlternatives.eContents().get(70)
    cPercentSignKeyword_71 = cAlternatives.eContents().get(71)
    cCommercialAtKeyword_72 = cAlternatives.eContents().get(72)
    cApostropheKeyword_73 = cAlternatives.eContents().get(73)

    # // Production for the tokenization of target code. All terminals used in any
    # // of the productions in the grammar (except for `{=` and `=}`) have to be
    # // listed here. Whenever a terminal is encountered amid a sequence of target-
    # // language tokens that is not featured in this production, this will demarcate
    # // the end of a target-code segment.
    # Token:
    #     // Non-constant terminals
    #     ID | INT | FLOAT_EXP_SUFFIX | LT_ANNOT | STRING | CHAR_LIT | ML_COMMENT | SL_COMMENT | WS | ANY_OTHER |
    #     // Keywords
    #     'target' | 'import' | 'main' | 'realtime' | 'reactor' | 'state' | 'time' |
    #     'mutable' | 'input' | 'output' | 'timer' | 'action' | 'reaction' |
    #     'startup' | 'shutdown' | 'after' | 'deadline' | 'mutation' | 'preamble' |
    #     'new' | 'federated' | 'at' | 'as' | 'from' | 'widthof' | 'const' | 'method' |
    #     'interleaved' | 'mode' | 'initial' | 'reset' | 'history' |
    #     // Other terminals
    #     NEGINT | TRUE | FALSE |
    #     // Action origins
    #     'logical' | 'physical' |
    #     // Visibility modifiers
    #     'private' | 'public' |
    #     // Braces
    #     '(' | ')' | '{' | '}' |
    #     // Brackets
    #     '[' | ']' | '<' | '>' |
    #     // Punctuation
    #     ':' | ';' | ',' | '.' | '::' |
    #     // Slashes
    #     ':\\' | '\\' |
    #     // Arithmetic
    #     '+' | '-' | '*' | '/' |
    #     // Underscore
    #     '_' |
    #     // Arrow
    #     '->' |
    #     // Assignment
    #     '=' |
    #     // Percentage
    #     '%' |
    #     // Annotation
    #     '@' |
    #     // Single quotes
    #     "'"
    # ;
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # // Non-constant terminals
    # ID | INT | FLOAT_EXP_SUFFIX | LT_ANNOT | STRING | CHAR_LIT | ML_COMMENT | SL_COMMENT | WS | ANY_OTHER |
    # // Keywords
    # 'target' | 'import' | 'main' | 'realtime' | 'reactor' | 'state' | 'time' |
    # 'mutable' | 'input' | 'output' | 'timer' | 'action' | 'reaction' |
    # 'startup' | 'shutdown' | 'after' | 'deadline' | 'mutation' | 'preamble' |
    # 'new' | 'federated' | 'at' | 'as' | 'from' | 'widthof' | 'const' | 'method' |
    # 'interleaved' | 'mode' | 'initial' | 'reset' | 'history' |
    # // Other terminals
    # NEGINT | TRUE | FALSE |
    # // Action origins
    # 'logical' | 'physical' |
    # // Visibility modifiers
    # 'private' | 'public' |
    # // Braces
    # '(' | ')' | '{' | '}' |
    # // Brackets
    # '[' | ']' | '<' | '>' |
    # // Punctuation
    # ':' | ';' | ',' | '.' | '::' |
    # // Slashes
    # ':\\' | '\\' |
    # // Arithmetic
    # '+' | '-' | '*' | '/' |
    # // Underscore
    # '_' |
    # // Arrow
    # '->' |
    # // Assignment
    # '=' |
    # // Percentage
    # '%' |
    # // Annotation
    # '@' |
    # // Single quotes
    # "'"
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # // Non-constant terminals
    # ID
    def getIDTerminalRuleCall_0(self):
        """ generated source for method getIDTerminalRuleCall_0 """
        return self.cIDTerminalRuleCall_0

    # INT
    def getINTTerminalRuleCall_1(self):
        """ generated source for method getINTTerminalRuleCall_1 """
        return self.cINTTerminalRuleCall_1

    # FLOAT_EXP_SUFFIX
    def getFLOAT_EXP_SUFFIXTerminalRuleCall_2(self):
        """ generated source for method getFLOAT_EXP_SUFFIXTerminalRuleCall_2 """
        return self.cFLOAT_EXP_SUFFIXTerminalRuleCall_2

    # LT_ANNOT
    def getLT_ANNOTTerminalRuleCall_3(self):
        """ generated source for method getLT_ANNOTTerminalRuleCall_3 """
        return self.cLT_ANNOTTerminalRuleCall_3

    # STRING
    def getSTRINGTerminalRuleCall_4(self):
        """ generated source for method getSTRINGTerminalRuleCall_4 """
        return self.cSTRINGTerminalRuleCall_4

    # CHAR_LIT
    def getCHAR_LITTerminalRuleCall_5(self):
        """ generated source for method getCHAR_LITTerminalRuleCall_5 """
        return self.cCHAR_LITTerminalRuleCall_5

    # ML_COMMENT
    def getML_COMMENTTerminalRuleCall_6(self):
        """ generated source for method getML_COMMENTTerminalRuleCall_6 """
        return self.cML_COMMENTTerminalRuleCall_6

    # SL_COMMENT
    def getSL_COMMENTTerminalRuleCall_7(self):
        """ generated source for method getSL_COMMENTTerminalRuleCall_7 """
        return self.cSL_COMMENTTerminalRuleCall_7

    # WS
    def getWSTerminalRuleCall_8(self):
        """ generated source for method getWSTerminalRuleCall_8 """
        return self.cWSTerminalRuleCall_8

    # ANY_OTHER
    def getANY_OTHERTerminalRuleCall_9(self):
        """ generated source for method getANY_OTHERTerminalRuleCall_9 """
        return self.cANY_OTHERTerminalRuleCall_9

    # // Keywords
    # 'target'
    def getTargetKeyword_10(self):
        """ generated source for method getTargetKeyword_10 """
        return self.cTargetKeyword_10

    # 'import'
    def getImportKeyword_11(self):
        """ generated source for method getImportKeyword_11 """
        return self.cImportKeyword_11

    # 'main'
    def getMainKeyword_12(self):
        """ generated source for method getMainKeyword_12 """
        return self.cMainKeyword_12

    # 'realtime'
    def getRealtimeKeyword_13(self):
        """ generated source for method getRealtimeKeyword_13 """
        return self.cRealtimeKeyword_13

    # 'reactor'
    def getReactorKeyword_14(self):
        """ generated source for method getReactorKeyword_14 """
        return self.cReactorKeyword_14

    # 'state'
    def getStateKeyword_15(self):
        """ generated source for method getStateKeyword_15 """
        return self.cStateKeyword_15

    # 'time'
    def getTimeKeyword_16(self):
        """ generated source for method getTimeKeyword_16 """
        return self.cTimeKeyword_16

    # 'mutable'
    def getMutableKeyword_17(self):
        """ generated source for method getMutableKeyword_17 """
        return self.cMutableKeyword_17

    # 'input'
    def getInputKeyword_18(self):
        """ generated source for method getInputKeyword_18 """
        return self.cInputKeyword_18

    # 'output'
    def getOutputKeyword_19(self):
        """ generated source for method getOutputKeyword_19 """
        return self.cOutputKeyword_19

    # 'timer'
    def getTimerKeyword_20(self):
        """ generated source for method getTimerKeyword_20 """
        return self.cTimerKeyword_20

    # 'action'
    def getActionKeyword_21(self):
        """ generated source for method getActionKeyword_21 """
        return self.cActionKeyword_21

    # 'reaction'
    def getReactionKeyword_22(self):
        """ generated source for method getReactionKeyword_22 """
        return self.cReactionKeyword_22

    # 'startup'
    def getStartupKeyword_23(self):
        """ generated source for method getStartupKeyword_23 """
        return self.cStartupKeyword_23

    # 'shutdown'
    def getShutdownKeyword_24(self):
        """ generated source for method getShutdownKeyword_24 """
        return self.cShutdownKeyword_24

    # 'after'
    def getAfterKeyword_25(self):
        """ generated source for method getAfterKeyword_25 """
        return self.cAfterKeyword_25

    # 'deadline'
    def getDeadlineKeyword_26(self):
        """ generated source for method getDeadlineKeyword_26 """
        return self.cDeadlineKeyword_26

    # 'mutation'
    def getMutationKeyword_27(self):
        """ generated source for method getMutationKeyword_27 """
        return self.cMutationKeyword_27

    # 'preamble'
    def getPreambleKeyword_28(self):
        """ generated source for method getPreambleKeyword_28 """
        return self.cPreambleKeyword_28

    # 'new'
    def getNewKeyword_29(self):
        """ generated source for method getNewKeyword_29 """
        return self.cNewKeyword_29

    # 'federated'
    def getFederatedKeyword_30(self):
        """ generated source for method getFederatedKeyword_30 """
        return self.cFederatedKeyword_30

    # 'at'
    def getAtKeyword_31(self):
        """ generated source for method getAtKeyword_31 """
        return self.cAtKeyword_31

    # 'as'
    def getAsKeyword_32(self):
        """ generated source for method getAsKeyword_32 """
        return self.cAsKeyword_32

    # 'from'
    def getFromKeyword_33(self):
        """ generated source for method getFromKeyword_33 """
        return self.cFromKeyword_33

    # 'widthof'
    def getWidthofKeyword_34(self):
        """ generated source for method getWidthofKeyword_34 """
        return self.cWidthofKeyword_34

    # 'const'
    def getConstKeyword_35(self):
        """ generated source for method getConstKeyword_35 """
        return self.cConstKeyword_35

    # 'method'
    def getMethodKeyword_36(self):
        """ generated source for method getMethodKeyword_36 """
        return self.cMethodKeyword_36

    # 'interleaved'
    def getInterleavedKeyword_37(self):
        """ generated source for method getInterleavedKeyword_37 """
        return self.cInterleavedKeyword_37

    # 'mode'
    def getModeKeyword_38(self):
        """ generated source for method getModeKeyword_38 """
        return self.cModeKeyword_38

    # 'initial'
    def getInitialKeyword_39(self):
        """ generated source for method getInitialKeyword_39 """
        return self.cInitialKeyword_39

    # 'reset'
    def getResetKeyword_40(self):
        """ generated source for method getResetKeyword_40 """
        return self.cResetKeyword_40

    # 'history'
    def getHistoryKeyword_41(self):
        """ generated source for method getHistoryKeyword_41 """
        return self.cHistoryKeyword_41

    # // Other terminals
    # NEGINT
    def getNEGINTTerminalRuleCall_42(self):
        """ generated source for method getNEGINTTerminalRuleCall_42 """
        return self.cNEGINTTerminalRuleCall_42

    # TRUE
    def getTRUETerminalRuleCall_43(self):
        """ generated source for method getTRUETerminalRuleCall_43 """
        return self.cTRUETerminalRuleCall_43

    # FALSE
    def getFALSETerminalRuleCall_44(self):
        """ generated source for method getFALSETerminalRuleCall_44 """
        return self.cFALSETerminalRuleCall_44

    # // Action origins
    # 'logical'
    def getLogicalKeyword_45(self):
        """ generated source for method getLogicalKeyword_45 """
        return self.cLogicalKeyword_45

    # 'physical'
    def getPhysicalKeyword_46(self):
        """ generated source for method getPhysicalKeyword_46 """
        return self.cPhysicalKeyword_46

    # // Visibility modifiers
    # 'private'
    def getPrivateKeyword_47(self):
        """ generated source for method getPrivateKeyword_47 """
        return self.cPrivateKeyword_47

    # 'public'
    def getPublicKeyword_48(self):
        """ generated source for method getPublicKeyword_48 """
        return self.cPublicKeyword_48

    # // Braces
    # '('
    def getLeftParenthesisKeyword_49(self):
        """ generated source for method getLeftParenthesisKeyword_49 """
        return self.cLeftParenthesisKeyword_49

    # ')'
    def getRightParenthesisKeyword_50(self):
        """ generated source for method getRightParenthesisKeyword_50 """
        return self.cRightParenthesisKeyword_50

    # '{'
    def getLeftCurlyBracketKeyword_51(self):
        """ generated source for method getLeftCurlyBracketKeyword_51 """
        return self.cLeftCurlyBracketKeyword_51

    # '}'
    def getRightCurlyBracketKeyword_52(self):
        """ generated source for method getRightCurlyBracketKeyword_52 """
        return self.cRightCurlyBracketKeyword_52

    # // Brackets
    # '['
    def getLeftSquareBracketKeyword_53(self):
        """ generated source for method getLeftSquareBracketKeyword_53 """
        return self.cLeftSquareBracketKeyword_53

    # ']'
    def getRightSquareBracketKeyword_54(self):
        """ generated source for method getRightSquareBracketKeyword_54 """
        return self.cRightSquareBracketKeyword_54

    # '<'
    def getLessThanSignKeyword_55(self):
        """ generated source for method getLessThanSignKeyword_55 """
        return self.cLessThanSignKeyword_55

    # '>'
    def getGreaterThanSignKeyword_56(self):
        """ generated source for method getGreaterThanSignKeyword_56 """
        return self.cGreaterThanSignKeyword_56

    # // Punctuation
    # ':'
    def getColonKeyword_57(self):
        """ generated source for method getColonKeyword_57 """
        return self.cColonKeyword_57

    # ';'
    def getSemicolonKeyword_58(self):
        """ generated source for method getSemicolonKeyword_58 """
        return self.cSemicolonKeyword_58

    # ','
    def getCommaKeyword_59(self):
        """ generated source for method getCommaKeyword_59 """
        return self.cCommaKeyword_59

    # '.'
    def getFullStopKeyword_60(self):
        """ generated source for method getFullStopKeyword_60 """
        return self.cFullStopKeyword_60

    # '::'
    def getColonColonKeyword_61(self):
        """ generated source for method getColonColonKeyword_61 """
        return self.cColonColonKeyword_61

    # // Slashes
    # ':\\'
    def getColonReverseSolidusKeyword_62(self):
        """ generated source for method getColonReverseSolidusKeyword_62 """
        return self.cColonReverseSolidusKeyword_62

    # '\\'
    def getBackslashKeyword_63(self):
        """ generated source for method getBackslashKeyword_63 """
        return self.cBackslashKeyword_63

    # // Arithmetic
    # '+'
    def getPlusSignKeyword_64(self):
        """ generated source for method getPlusSignKeyword_64 """
        return self.cPlusSignKeyword_64

    # '-'
    def getHyphenMinusKeyword_65(self):
        """ generated source for method getHyphenMinusKeyword_65 """
        return self.cHyphenMinusKeyword_65

    # '*'
    def getAsteriskKeyword_66(self):
        """ generated source for method getAsteriskKeyword_66 """
        return self.cAsteriskKeyword_66

    # '/'
    def getSolidusKeyword_67(self):
        """ generated source for method getSolidusKeyword_67 """
        return self.cSolidusKeyword_67

    # // Underscore
    # '_'
    def get_Keyword_68(self):
        """ generated source for method get_Keyword_68 """
        return self.c_Keyword_68

    # // Arrow
    # '->'
    def getHyphenMinusGreaterThanSignKeyword_69(self):
        """ generated source for method getHyphenMinusGreaterThanSignKeyword_69 """
        return self.cHyphenMinusGreaterThanSignKeyword_69

    # // Assignment
    # '='
    def getEqualsSignKeyword_70(self):
        """ generated source for method getEqualsSignKeyword_70 """
        return self.cEqualsSignKeyword_70

    # // Percentage
    # '%'
    def getPercentSignKeyword_71(self):
        """ generated source for method getPercentSignKeyword_71 """
        return self.cPercentSignKeyword_71

    # // Annotation
    # '@'
    def getCommercialAtKeyword_72(self):
        """ generated source for method getCommercialAtKeyword_72 """
        return self.cCommercialAtKeyword_72

    # // Single quotes
    # "'"
    def getApostropheKeyword_73(self):
        """ generated source for method getApostropheKeyword_73 """
        return self.cApostropheKeyword_73


class ActionOriginElements(AbstractElementFinder, AbstractEnumRuleElementFinder):
    """ generated source for class ActionOriginElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.ActionOrigin")
    cAlternatives = rule.eContents().get(1)
    cNONEEnumLiteralDeclaration_0 = cAlternatives.eContents().get(0)
    cNONENONEKeyword_0_0 = cNONEEnumLiteralDeclaration_0.eContents().get(0)
    cLOGICALEnumLiteralDeclaration_1 = cAlternatives.eContents().get(1)
    cLOGICALLogicalKeyword_1_0 = cLOGICALEnumLiteralDeclaration_1.eContents().get(0)
    cPHYSICALEnumLiteralDeclaration_2 = cAlternatives.eContents().get(2)
    cPHYSICALPhysicalKeyword_2_0 = cPHYSICALEnumLiteralDeclaration_2.eContents().get(0)

    # /////////// Enums
    # enum ActionOrigin:
    #     NONE | LOGICAL='logical' | PHYSICAL='physical';
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # NONE | LOGICAL='logical' | PHYSICAL='physical'
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # NONE
    def getNONEEnumLiteralDeclaration_0(self):
        """ generated source for method getNONEEnumLiteralDeclaration_0 """
        return self.cNONEEnumLiteralDeclaration_0

    def getNONENONEKeyword_0_0(self):
        """ generated source for method getNONENONEKeyword_0_0 """
        return self.cNONENONEKeyword_0_0

    # LOGICAL='logical'
    def getLOGICALEnumLiteralDeclaration_1(self):
        """ generated source for method getLOGICALEnumLiteralDeclaration_1 """
        return self.cLOGICALEnumLiteralDeclaration_1

    # 'logical'
    def getLOGICALLogicalKeyword_1_0(self):
        """ generated source for method getLOGICALLogicalKeyword_1_0 """
        return self.cLOGICALLogicalKeyword_1_0

    # PHYSICAL='physical'
    def getPHYSICALEnumLiteralDeclaration_2(self):
        """ generated source for method getPHYSICALEnumLiteralDeclaration_2 """
        return self.cPHYSICALEnumLiteralDeclaration_2

    # 'physical'
    def getPHYSICALPhysicalKeyword_2_0(self):
        """ generated source for method getPHYSICALPhysicalKeyword_2_0 """
        return self.cPHYSICALPhysicalKeyword_2_0


class VisibilityElements(AbstractElementFinder, AbstractEnumRuleElementFinder):
    """ generated source for class VisibilityElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.Visibility")
    cAlternatives = rule.eContents().get(1)
    cNONEEnumLiteralDeclaration_0 = cAlternatives.eContents().get(0)
    cNONENONEKeyword_0_0 = cNONEEnumLiteralDeclaration_0.eContents().get(0)
    cPRIVATEEnumLiteralDeclaration_1 = cAlternatives.eContents().get(1)
    cPRIVATEPrivateKeyword_1_0 = cPRIVATEEnumLiteralDeclaration_1.eContents().get(0)
    cPUBLICEnumLiteralDeclaration_2 = cAlternatives.eContents().get(2)
    cPUBLICPublicKeyword_2_0 = cPUBLICEnumLiteralDeclaration_2.eContents().get(0)

    # enum Visibility:
    #     NONE | PRIVATE='private' | PUBLIC='public';
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # NONE | PRIVATE='private' | PUBLIC='public'
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # NONE
    def getNONEEnumLiteralDeclaration_0(self):
        """ generated source for method getNONEEnumLiteralDeclaration_0 """
        return self.cNONEEnumLiteralDeclaration_0

    def getNONENONEKeyword_0_0(self):
        """ generated source for method getNONENONEKeyword_0_0 """
        return self.cNONENONEKeyword_0_0

    # PRIVATE='private'
    def getPRIVATEEnumLiteralDeclaration_1(self):
        """ generated source for method getPRIVATEEnumLiteralDeclaration_1 """
        return self.cPRIVATEEnumLiteralDeclaration_1

    # 'private'
    def getPRIVATEPrivateKeyword_1_0(self):
        """ generated source for method getPRIVATEPrivateKeyword_1_0 """
        return self.cPRIVATEPrivateKeyword_1_0

    # PUBLIC='public'
    def getPUBLICEnumLiteralDeclaration_2(self):
        """ generated source for method getPUBLICEnumLiteralDeclaration_2 """
        return self.cPUBLICEnumLiteralDeclaration_2

    # 'public'
    def getPUBLICPublicKeyword_2_0(self):
        """ generated source for method getPUBLICPublicKeyword_2_0 """
        return self.cPUBLICPublicKeyword_2_0


class BuiltinTriggerElements(AbstractElementFinder, AbstractEnumRuleElementFinder):
    """ generated source for class BuiltinTriggerElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.BuiltinTrigger")
    cAlternatives = rule.eContents().get(1)
    cSTARTUPEnumLiteralDeclaration_0 = cAlternatives.eContents().get(0)
    cSTARTUPStartupKeyword_0_0 = cSTARTUPEnumLiteralDeclaration_0.eContents().get(0)
    cSHUTDOWNEnumLiteralDeclaration_1 = cAlternatives.eContents().get(1)
    cSHUTDOWNShutdownKeyword_1_0 = cSHUTDOWNEnumLiteralDeclaration_1.eContents().get(0)
    cRESETEnumLiteralDeclaration_2 = cAlternatives.eContents().get(2)
    cRESETResetKeyword_2_0 = cRESETEnumLiteralDeclaration_2.eContents().get(0)

    # enum BuiltinTrigger:
    #     STARTUP='startup' | SHUTDOWN='shutdown' | RESET='reset';
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # STARTUP='startup' | SHUTDOWN='shutdown' | RESET='reset'
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # STARTUP='startup'
    def getSTARTUPEnumLiteralDeclaration_0(self):
        """ generated source for method getSTARTUPEnumLiteralDeclaration_0 """
        return self.cSTARTUPEnumLiteralDeclaration_0

    # 'startup'
    def getSTARTUPStartupKeyword_0_0(self):
        """ generated source for method getSTARTUPStartupKeyword_0_0 """
        return self.cSTARTUPStartupKeyword_0_0

    # SHUTDOWN='shutdown'
    def getSHUTDOWNEnumLiteralDeclaration_1(self):
        """ generated source for method getSHUTDOWNEnumLiteralDeclaration_1 """
        return self.cSHUTDOWNEnumLiteralDeclaration_1

    # 'shutdown'
    def getSHUTDOWNShutdownKeyword_1_0(self):
        """ generated source for method getSHUTDOWNShutdownKeyword_1_0 """
        return self.cSHUTDOWNShutdownKeyword_1_0

    # RESET='reset'
    def getRESETEnumLiteralDeclaration_2(self):
        """ generated source for method getRESETEnumLiteralDeclaration_2 """
        return self.cRESETEnumLiteralDeclaration_2

    # 'reset'
    def getRESETResetKeyword_2_0(self):
        """ generated source for method getRESETResetKeyword_2_0 """
        return self.cRESETResetKeyword_2_0


class ModeTransitionElements(AbstractElementFinder, AbstractEnumRuleElementFinder):
    """ generated source for class ModeTransitionElements """
    rule = GrammarUtil.findRuleForName(self.getGrammar(), "org.lflang.LF.ModeTransition")
    cAlternatives = rule.eContents().get(1)
    cRESETEnumLiteralDeclaration_0 = cAlternatives.eContents().get(0)
    cRESETResetKeyword_0_0 = cRESETEnumLiteralDeclaration_0.eContents().get(0)
    cHISTORYEnumLiteralDeclaration_1 = cAlternatives.eContents().get(1)
    cHISTORYHistoryKeyword_1_0 = cHISTORYEnumLiteralDeclaration_1.eContents().get(0)

    # enum ModeTransition:
    #     RESET='reset' | HISTORY='history';
    def getRule(self):
        """ generated source for method getRule """
        return self.rule

    # RESET='reset' | HISTORY='history'
    def getAlternatives(self):
        """ generated source for method getAlternatives """
        return self.cAlternatives

    # RESET='reset'
    def getRESETEnumLiteralDeclaration_0(self):
        """ generated source for method getRESETEnumLiteralDeclaration_0 """
        return self.cRESETEnumLiteralDeclaration_0

    # 'reset'
    def getRESETResetKeyword_0_0(self):
        """ generated source for method getRESETResetKeyword_0_0 """
        return self.cRESETResetKeyword_0_0

    # HISTORY='history'
    def getHISTORYEnumLiteralDeclaration_1(self):
        """ generated source for method getHISTORYEnumLiteralDeclaration_1 """
        return self.cHISTORYEnumLiteralDeclaration_1

    # 'history'
    def getHISTORYHistoryKeyword_1_0(self):
        """ generated source for method getHISTORYHistoryKeyword_1_0 """
        return self.cHISTORYHistoryKeyword_1_0



